
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000434c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f4  080044f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044fc  080044fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013650  2000000c  08004510  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001365c  08004510  0002365c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d19c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022bb  00000000  00000000  0002d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  0002f498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  00030120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e88  00000000  00000000  00030c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aed0  00000000  00000000  00051b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5e1c  00000000  00000000  0005c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001227f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  00122870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044bc 	.word	0x080044bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080044bc 	.word	0x080044bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <FL_uart_decode>:
 */

#include "FL.h"

void FL_uart_decode()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	int function_number = FL_find_decode_nr();
 80004ce:	f000 f861 	bl	8000594 <FL_find_decode_nr>
 80004d2:	6078      	str	r0, [r7, #4]
	if(function_number == FUNCTION_NO_RESET)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d101      	bne.n	80004de <FL_uart_decode+0x16>
		FL_error_handler();
 80004da:	f000 f953 	bl	8000784 <FL_error_handler>

	switch(function_number)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	2b0a      	cmp	r3, #10
 80004e4:	d84e      	bhi.n	8000584 <FL_uart_decode+0xbc>
 80004e6:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <FL_uart_decode+0x24>)
 80004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ec:	08000519 	.word	0x08000519
 80004f0:	08000531 	.word	0x08000531
 80004f4:	08000525 	.word	0x08000525
 80004f8:	0800058b 	.word	0x0800058b
 80004fc:	0800053d 	.word	0x0800053d
 8000500:	08000549 	.word	0x08000549
 8000504:	08000555 	.word	0x08000555
 8000508:	08000561 	.word	0x08000561
 800050c:	0800056d 	.word	0x0800056d
 8000510:	08000585 	.word	0x08000585
 8000514:	08000579 	.word	0x08000579
	{
		case BITMAP_FUNCTION_NO: FL_find_args(function_number, BITMAP_ARGS, BITMAP_FUNCTION_NAME_LEN);
 8000518:	2206      	movs	r2, #6
 800051a:	2103      	movs	r1, #3
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 f885 	bl	800062c <FL_find_args>
		break;
 8000522:	e033      	b.n	800058c <FL_uart_decode+0xc4>

		case CLEARSCHERM_FUNCTION_NO: FL_find_args(function_number, CLEARSCHERM_ARGS, CLEARSCHERM_FUNCTION_NAME_LEN);
 8000524:	220b      	movs	r2, #11
 8000526:	2101      	movs	r1, #1
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f000 f87f 	bl	800062c <FL_find_args>
		break;
 800052e:	e02d      	b.n	800058c <FL_uart_decode+0xc4>

		case CIRKEL_FUNCTION_NO: FL_find_args(function_number, CIRKEL_ARGS, CIRKEL_FUNCTION_NAME_LEN);
 8000530:	2206      	movs	r2, #6
 8000532:	2104      	movs	r1, #4
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 f879 	bl	800062c <FL_find_args>
		break;
 800053a:	e027      	b.n	800058c <FL_uart_decode+0xc4>

		case EXECUTE_FUNCTION_NO: //special case: no args, so directly execute
		break;

		case FIGUUR_FUNCTION_NO: FL_find_args(function_number, FIGUUR_ARGS, FIGUUR_FUNCTION_NAME_LEN);
 800053c:	2206      	movs	r2, #6
 800053e:	2109      	movs	r1, #9
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f000 f873 	bl	800062c <FL_find_args>
		break;
 8000546:	e021      	b.n	800058c <FL_uart_decode+0xc4>

		case HERHAAL_FUNCTION_NO: FL_find_args(function_number, HERHAAL_ARGS, HERHAAL_FUNCTION_NAME_LEN);
 8000548:	2207      	movs	r2, #7
 800054a:	2102      	movs	r1, #2
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 f86d 	bl	800062c <FL_find_args>
		break;
 8000552:	e01b      	b.n	800058c <FL_uart_decode+0xc4>

		case LIJN_FUNCTION_NO: FL_find_args(function_number, LIJN_ARGS, LIJN_FUNCTION_NAME_LEN);
 8000554:	2204      	movs	r2, #4
 8000556:	2106      	movs	r1, #6
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f867 	bl	800062c <FL_find_args>
		break;
 800055e:	e015      	b.n	800058c <FL_uart_decode+0xc4>

		case RECHTHOEK_FUNCTION_NO: FL_find_args(function_number, RECHTHOEK_ARGS, RECHTHOEK_FUNCTION_NAME_LEN);
 8000560:	2209      	movs	r2, #9
 8000562:	2106      	movs	r1, #6
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f000 f861 	bl	800062c <FL_find_args>
		break;
 800056a:	e00f      	b.n	800058c <FL_uart_decode+0xc4>

		case TEKST_FUNCTION_NO: FL_find_args(function_number, TEKST_ARGS, TEKST_FUNCTION_NAME_LEN);
 800056c:	2205      	movs	r2, #5
 800056e:	2106      	movs	r1, #6
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 f85b 	bl	800062c <FL_find_args>
		break;
 8000576:	e009      	b.n	800058c <FL_uart_decode+0xc4>

		case WACHT_FUNCTION_NO: FL_find_args(function_number, WACHT_ARGS, WACHT_FUNCTION_NAME_LEN);
 8000578:	2205      	movs	r2, #5
 800057a:	2101      	movs	r1, #1
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 f855 	bl	800062c <FL_find_args>
		break;
 8000582:	e003      	b.n	800058c <FL_uart_decode+0xc4>

		default : FL_error_handler();
 8000584:	f000 f8fe 	bl	8000784 <FL_error_handler>
	}

}
 8000588:	e000      	b.n	800058c <FL_uart_decode+0xc4>
		break;
 800058a:	bf00      	nop
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <FL_find_decode_nr>:

int FL_find_decode_nr()
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	if(input.line_rx_buffer[0] == LETTERB) return BITMAP_FUNCTION_NO;
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <FL_find_decode_nr+0x94>)
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	2b62      	cmp	r3, #98	; 0x62
 800059e:	d101      	bne.n	80005a4 <FL_find_decode_nr+0x10>
 80005a0:	2301      	movs	r3, #1
 80005a2:	e03c      	b.n	800061e <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERC)
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <FL_find_decode_nr+0x94>)
 80005a6:	785b      	ldrb	r3, [r3, #1]
 80005a8:	2b63      	cmp	r3, #99	; 0x63
 80005aa:	d107      	bne.n	80005bc <FL_find_decode_nr+0x28>
	{
		if(input.line_rx_buffer[1] == LETTERL) return CLEARSCHERM_FUNCTION_NO;
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <FL_find_decode_nr+0x94>)
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	2b6c      	cmp	r3, #108	; 0x6c
 80005b2:	d101      	bne.n	80005b8 <FL_find_decode_nr+0x24>
 80005b4:	2303      	movs	r3, #3
 80005b6:	e032      	b.n	800061e <FL_find_decode_nr+0x8a>
		else return CIRKEL_FUNCTION_NO;
 80005b8:	2302      	movs	r3, #2
 80005ba:	e030      	b.n	800061e <FL_find_decode_nr+0x8a>
	}

	if(input.line_rx_buffer[0] == LETTERE) return EXECUTE_FUNCTION_NO;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <FL_find_decode_nr+0x94>)
 80005be:	785b      	ldrb	r3, [r3, #1]
 80005c0:	2b65      	cmp	r3, #101	; 0x65
 80005c2:	d101      	bne.n	80005c8 <FL_find_decode_nr+0x34>
 80005c4:	2304      	movs	r3, #4
 80005c6:	e02a      	b.n	800061e <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERF) return FIGUUR_FUNCTION_NO;
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <FL_find_decode_nr+0x94>)
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	2b66      	cmp	r3, #102	; 0x66
 80005ce:	d101      	bne.n	80005d4 <FL_find_decode_nr+0x40>
 80005d0:	2305      	movs	r3, #5
 80005d2:	e024      	b.n	800061e <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERH) return HERHAAL_FUNCTION_NO;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <FL_find_decode_nr+0x94>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	2b68      	cmp	r3, #104	; 0x68
 80005da:	d101      	bne.n	80005e0 <FL_find_decode_nr+0x4c>
 80005dc:	2306      	movs	r3, #6
 80005de:	e01e      	b.n	800061e <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERL) return LIJN_FUNCTION_NO;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <FL_find_decode_nr+0x94>)
 80005e2:	785b      	ldrb	r3, [r3, #1]
 80005e4:	2b6c      	cmp	r3, #108	; 0x6c
 80005e6:	d101      	bne.n	80005ec <FL_find_decode_nr+0x58>
 80005e8:	2307      	movs	r3, #7
 80005ea:	e018      	b.n	800061e <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERR) return RECHTHOEK_FUNCTION_NO;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <FL_find_decode_nr+0x94>)
 80005ee:	785b      	ldrb	r3, [r3, #1]
 80005f0:	2b72      	cmp	r3, #114	; 0x72
 80005f2:	d101      	bne.n	80005f8 <FL_find_decode_nr+0x64>
 80005f4:	2308      	movs	r3, #8
 80005f6:	e012      	b.n	800061e <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERT)
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <FL_find_decode_nr+0x94>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	2b74      	cmp	r3, #116	; 0x74
 80005fe:	d107      	bne.n	8000610 <FL_find_decode_nr+0x7c>
	{
		if(input.line_rx_buffer[1] == LETTERE) return TEKST_FUNCTION_NO;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <FL_find_decode_nr+0x94>)
 8000602:	789b      	ldrb	r3, [r3, #2]
 8000604:	2b65      	cmp	r3, #101	; 0x65
 8000606:	d101      	bne.n	800060c <FL_find_decode_nr+0x78>
 8000608:	2309      	movs	r3, #9
 800060a:	e008      	b.n	800061e <FL_find_decode_nr+0x8a>
		else return TOREN_FUNCTION_NO;
 800060c:	230a      	movs	r3, #10
 800060e:	e006      	b.n	800061e <FL_find_decode_nr+0x8a>
	}

	if(input.line_rx_buffer[0] == LETTERW) return WACHT_FUNCTION_NO;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <FL_find_decode_nr+0x94>)
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	2b77      	cmp	r3, #119	; 0x77
 8000616:	d101      	bne.n	800061c <FL_find_decode_nr+0x88>
 8000618:	230b      	movs	r3, #11
 800061a:	e000      	b.n	800061e <FL_find_decode_nr+0x8a>

	return FUNCTION_NO_RESET;
 800061c:	2300      	movs	r3, #0

}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	20000028 	.word	0x20000028

0800062c <FL_find_args>:

void FL_find_args(int function_number, int num_args, int len_function_name)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
	if(function_number != TEKST_FUNCTION_NO)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	2b09      	cmp	r3, #9
 800063c:	d078      	beq.n	8000730 <FL_find_args+0x104>
	{
		char string_container[MAX_ARG_LEN]; //ook resetten
		int k;
		for(k = 0; k < MAX_ARG_LEN; k++) string_container[k] = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000642:	e008      	b.n	8000656 <FL_find_args+0x2a>
 8000644:	f107 0214 	add.w	r2, r7, #20
 8000648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064a:	4413      	add	r3, r2
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000652:	3301      	adds	r3, #1
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000658:	2b09      	cmp	r3, #9
 800065a:	ddf3      	ble.n	8000644 <FL_find_args+0x18>
		int arg_character_counter = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
		char stored_args = 0; // Counts how many arguments are stored. is incremented after successfully storing an arg
 8000660:	2300      	movs	r3, #0
 8000662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		int i = len_function_name; // Start at the first comma
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	623b      	str	r3, [r7, #32]

		while(i <= input.msglen)
 800066a:	e052      	b.n	8000712 <FL_find_args+0xe6>
		{
			if(input.line_rx_buffer[i] == ',')
 800066c:	4a32      	ldr	r2, [pc, #200]	; (8000738 <FL_find_args+0x10c>)
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	4413      	add	r3, r2
 8000672:	3301      	adds	r3, #1
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b2c      	cmp	r3, #44	; 0x2c
 8000678:	d128      	bne.n	80006cc <FL_find_args+0xa0>
			{

				if(stored_args != 0) // Dit is niet de eerste komma dus
 800067a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800067e:	2b00      	cmp	r3, #0
 8000680:	d01c      	beq.n	80006bc <FL_find_args+0x90>
				{
					// convert the stored string()
					FL_convert_args(string_container, arg_character_counter);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f857 	bl	800073c <FL_convert_args>
					// reset string container
					for(k = 0; k < MAX_ARG_LEN; k++) string_container[k] = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000692:	e008      	b.n	80006a6 <FL_find_args+0x7a>
 8000694:	f107 0214 	add.w	r2, r7, #20
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	4413      	add	r3, r2
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a2:	3301      	adds	r3, #1
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a8:	2b09      	cmp	r3, #9
 80006aa:	ddf3      	ble.n	8000694 <FL_find_args+0x68>
					arg_character_counter = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
					stored_args++;
 80006b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006b4:	3301      	adds	r3, #1
 80006b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006ba:	e004      	b.n	80006c6 <FL_find_args+0x9a>
				}
				else stored_args++;
 80006bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006c0:	3301      	adds	r3, #1
 80006c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				i++;
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	3301      	adds	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
			}
			if(input.line_rx_buffer[i] == ' ')
 80006cc:	4a1a      	ldr	r2, [pc, #104]	; (8000738 <FL_find_args+0x10c>)
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	4413      	add	r3, r2
 80006d2:	3301      	adds	r3, #1
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b20      	cmp	r3, #32
 80006d8:	d103      	bne.n	80006e2 <FL_find_args+0xb6>
				i++;
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	3301      	adds	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
 80006e0:	e017      	b.n	8000712 <FL_find_args+0xe6>
			else
			{
				if(input.line_rx_buffer[i] == ',')
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <FL_find_args+0x10c>)
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	4413      	add	r3, r2
 80006e8:	3301      	adds	r3, #1
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b2c      	cmp	r3, #44	; 0x2c
 80006ee:	d102      	bne.n	80006f6 <FL_find_args+0xca>
					FL_error_handler();
 80006f0:	f000 f848 	bl	8000784 <FL_error_handler>
 80006f4:	e00d      	b.n	8000712 <FL_find_args+0xe6>
				else
				{
					string_container[arg_character_counter++] = input.line_rx_buffer[i++];
 80006f6:	6a3a      	ldr	r2, [r7, #32]
 80006f8:	1c53      	adds	r3, r2, #1
 80006fa:	623b      	str	r3, [r7, #32]
 80006fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006fe:	1c59      	adds	r1, r3, #1
 8000700:	62b9      	str	r1, [r7, #40]	; 0x28
 8000702:	490d      	ldr	r1, [pc, #52]	; (8000738 <FL_find_args+0x10c>)
 8000704:	440a      	add	r2, r1
 8000706:	7852      	ldrb	r2, [r2, #1]
 8000708:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800070c:	440b      	add	r3, r1
 800070e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		while(i <= input.msglen)
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <FL_find_args+0x10c>)
 8000714:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000718:	6a3a      	ldr	r2, [r7, #32]
 800071a:	429a      	cmp	r2, r3
 800071c:	dda6      	ble.n	800066c <FL_find_args+0x40>
				}
			}


		}
		FL_convert_args(string_container, --arg_character_counter);
 800071e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000720:	3b01      	subs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f806 	bl	800073c <FL_convert_args>
	}
	else
	{

	}
}
 8000730:	bf00      	nop
 8000732:	3730      	adds	r7, #48	; 0x30
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000028 	.word	0x20000028

0800073c <FL_convert_args>:

void FL_convert_args(char arg_array[], int num_chars)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < num_chars; i++)
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	e00d      	b.n	8000768 <FL_convert_args+0x2c>
	{
		container[temp++] = arg_array[i];
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	441a      	add	r2, r3
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <FL_convert_args+0x40>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	1c59      	adds	r1, r3, #1
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <FL_convert_args+0x40>)
 800075a:	6001      	str	r1, [r0, #0]
 800075c:	7811      	ldrb	r1, [r2, #0]
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <FL_convert_args+0x44>)
 8000760:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < num_chars; i++)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	dbed      	blt.n	800074c <FL_convert_args+0x10>
	}
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	20000438 	.word	0x20000438
 8000780:	20013138 	.word	0x20013138

08000784 <FL_error_handler>:

void FL_error_handler()
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	while(1);
 8000788:	e7fe      	b.n	8000788 <FL_error_handler+0x4>
	...

0800078c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_DMA_Init+0x3c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <MX_DMA_Init+0x3c>)
 800079c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_DMA_Init+0x3c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2044      	movs	r0, #68	; 0x44
 80007b4:	f000 fe87 	bl	80014c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80007b8:	2044      	movs	r0, #68	; 0x44
 80007ba:	f000 fea0 	bl	80014fe <HAL_NVIC_EnableIRQ>

}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <MX_GPIO_Init+0xe4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a31      	ldr	r2, [pc, #196]	; (80008b0 <MX_GPIO_Init+0xe4>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <MX_GPIO_Init+0xe4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <MX_GPIO_Init+0xe4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a2a      	ldr	r2, [pc, #168]	; (80008b0 <MX_GPIO_Init+0xe4>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_GPIO_Init+0xe4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_GPIO_Init+0xe4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <MX_GPIO_Init+0xe4>)
 8000824:	f043 0310 	orr.w	r3, r3, #16
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_GPIO_Init+0xe4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_GPIO_Init+0xe4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <MX_GPIO_Init+0xe4>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_GPIO_Init+0xe4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin 
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000858:	4816      	ldr	r0, [pc, #88]	; (80008b4 <MX_GPIO_Init+0xe8>)
 800085a:	f001 fb95 	bl	8001f88 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <MX_GPIO_Init+0xec>)
 8000866:	f001 fb8f 	bl	8001f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin 
 800086a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800086e:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MX_GPIO_Init+0xe8>)
 8000884:	f001 f9e6 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_GPIO_Init+0xec>)
 80008a2:	f001 f9d7 	bl	8001c54 <HAL_GPIO_Init>

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	; 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40020400 	.word	0x40020400

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f000 fcb3 	bl	800122c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f865 	bl	8000994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f7ff ff7f 	bl	80007cc <MX_GPIO_Init>
  MX_DMA_Init();
 80008ce:	f7ff ff5d 	bl	800078c <MX_DMA_Init>
  MX_TIM1_Init();
 80008d2:	f000 fa03 	bl	8000cdc <MX_TIM1_Init>
  MX_TIM2_Init();
 80008d6:	f000 fa51 	bl	8000d7c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80008da:	f000 fb67 	bl	8000fac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Reset line_rx buffer
  int i;
  for(i = 0; i < LINE_BUFLEN; i++)
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	e008      	b.n	80008f6 <main+0x3a>
	  input.line_rx_buffer[i] = 0;
 80008e4:	4a27      	ldr	r2, [pc, #156]	; (8000984 <main+0xc8>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	3301      	adds	r3, #1
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008fc:	dbf2      	blt.n	80008e4 <main+0x28>

  for(i = 0; i < 1024; i++)
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	e007      	b.n	8000914 <main+0x58>
	  container[i] = 0;
 8000904:	4a20      	ldr	r2, [pc, #128]	; (8000988 <main+0xcc>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < 1024; i++)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3301      	adds	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800091a:	dbf3      	blt.n	8000904 <main+0x48>
  temp = 0;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <main+0xd0>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <main+0xc8>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <main+0xc8>)
 800092a:	2200      	movs	r2, #0
 800092c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = False;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <main+0xc8>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000938:	f000 fbdc 	bl	80010f4 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 800093c:	20ff      	movs	r0, #255	; 0xff
 800093e:	f000 fc2b 	bl	8001198 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000942:	220a      	movs	r2, #10
 8000944:	210a      	movs	r1, #10
 8000946:	200a      	movs	r0, #10
 8000948:	f000 fc48 	bl	80011dc <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2000      	movs	r0, #0
 8000952:	f000 fc43 	bl	80011dc <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	f240 103f 	movw	r0, #319	; 0x13f
 800095e:	f000 fc3d 	bl	80011dc <UB_VGA_SetPixel>

  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000962:	2201      	movs	r2, #1
 8000964:	4907      	ldr	r1, [pc, #28]	; (8000984 <main+0xc8>)
 8000966:	480a      	ldr	r0, [pc, #40]	; (8000990 <main+0xd4>)
 8000968:	f002 ff6b 	bl	8003842 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == True)
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <main+0xc8>)
 800096e:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000972:	2bff      	cmp	r3, #255	; 0xff
 8000974:	d1fa      	bne.n	800096c <main+0xb0>
	  {
		  input.command_execute_flag = False;
 8000976:	4b03      	ldr	r3, [pc, #12]	; (8000984 <main+0xc8>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
//		  UB_VGA_SetPixel(10,10,VGA_COL_GREEN);
		  FL_uart_decode();
 800097e:	f7ff fda3 	bl	80004c8 <FL_uart_decode>
	  if(input.command_execute_flag == True)
 8000982:	e7f3      	b.n	800096c <main+0xb0>
 8000984:	20000028 	.word	0x20000028
 8000988:	20013138 	.word	0x20013138
 800098c:	20000438 	.word	0x20000438
 8000990:	20013618 	.word	0x20013618

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b094      	sub	sp, #80	; 0x50
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	f107 0320 	add.w	r3, r7, #32
 800099e:	2230      	movs	r2, #48	; 0x30
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 fd82 	bl	80044ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <SystemClock_Config+0xcc>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	4a27      	ldr	r2, [pc, #156]	; (8000a60 <SystemClock_Config+0xcc>)
 80009c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c6:	6413      	str	r3, [r2, #64]	; 0x40
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <SystemClock_Config+0xcc>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <SystemClock_Config+0xd0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <SystemClock_Config+0xd0>)
 80009de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e2:	6013      	str	r3, [r2, #0]
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <SystemClock_Config+0xd0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f0:	2301      	movs	r3, #1
 80009f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fa:	2302      	movs	r3, #2
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a04:	2304      	movs	r3, #4
 8000a06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a08:	23a8      	movs	r3, #168	; 0xa8
 8000a0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a10:	2304      	movs	r3, #4
 8000a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 0320 	add.w	r3, r7, #32
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 facf 	bl	8001fbc <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a24:	f000 f820 	bl	8000a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2105      	movs	r1, #5
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fd28 	bl	800249c <HAL_RCC_ClockConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a52:	f000 f809 	bl	8000a68 <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	3750      	adds	r7, #80	; 0x50
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 fbd8 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b28:	4828      	ldr	r0, [pc, #160]	; (8000bcc <TIM2_IRQHandler+0xa8>)
 8000b2a:	f001 ffe5 	bl	8002af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <TIM2_IRQHandler+0xa8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f06f 0208 	mvn.w	r2, #8
 8000b36:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000b42:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000b4c:	d905      	bls.n	8000b5a <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000b54:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <TIM2_IRQHandler+0xb0>)
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000b58:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d802      	bhi.n	8000b68 <TIM2_IRQHandler+0x44>
 8000b62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b66:	e001      	b.n	8000b6c <TIM2_IRQHandler+0x48>
 8000b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <TIM2_IRQHandler+0xb4>)
 8000b6e:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	2b23      	cmp	r3, #35	; 0x23
 8000b76:	d927      	bls.n	8000bc8 <TIM2_IRQHandler+0xa4>
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	f240 2202 	movw	r2, #514	; 0x202
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d821      	bhi.n	8000bc8 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000b84:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <TIM2_IRQHandler+0xb8>)
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <TIM2_IRQHandler+0xb8>)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <TIM2_IRQHandler+0xbc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <TIM2_IRQHandler+0xbc>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <TIM2_IRQHandler+0xc0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <TIM2_IRQHandler+0xc0>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f042 0201 	orr.w	r2, r2, #1
 8000bae:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000bc4:	4a02      	ldr	r2, [pc, #8]	; (8000bd0 <TIM2_IRQHandler+0xac>)
 8000bc6:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200135d8 	.word	0x200135d8
 8000bd0:	2000043c 	.word	0x2000043c
 8000bd4:	20000448 	.word	0x20000448
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	40026488 	.word	0x40026488
 8000be0:	40010000 	.word	0x40010000
 8000be4:	20013578 	.word	0x20013578

08000be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  // Get the recieved character from the USART2 Data Register
  char uart_char = USART2->DR;
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <USART2_IRQHandler+0x68>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	71fb      	strb	r3, [r7, #7]


  //This way we ignore the '\n' character
  if(uart_char != LINE_FEED)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b0a      	cmp	r3, #10
 8000bf8:	d023      	beq.n	8000c42 <USART2_IRQHandler+0x5a>
  {
	 //Check for CR and LF characters
	 if(uart_char == CARRIAGE_RETURN)
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b0d      	cmp	r3, #13
 8000bfe:	d10e      	bne.n	8000c1e <USART2_IRQHandler+0x36>
	 {
		input.command_execute_flag = True;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <USART2_IRQHandler+0x6c>)
 8000c02:	22ff      	movs	r2, #255	; 0xff
 8000c04:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		// Store the message lenght for processing
		input.msglen = input.char_counter;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <USART2_IRQHandler+0x6c>)
 8000c0a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000c0e:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <USART2_IRQHandler+0x6c>)
 8000c10:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
		// Reset the counter for the next line
		input.char_counter = 0;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <USART2_IRQHandler+0x6c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000c1c:	e011      	b.n	8000c42 <USART2_IRQHandler+0x5a>
		//Gently exit intterupt
	 }
	 else
	 {
		input.command_execute_flag = False;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <USART2_IRQHandler+0x6c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		input.line_rx_buffer[input.char_counter] = uart_char;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <USART2_IRQHandler+0x6c>)
 8000c28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000c2c:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <USART2_IRQHandler+0x6c>)
 8000c2e:	4413      	add	r3, r2
 8000c30:	79fa      	ldrb	r2, [r7, #7]
 8000c32:	705a      	strb	r2, [r3, #1]
//		container[temp++] = uart_char;
		input.char_counter++;
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <USART2_IRQHandler+0x6c>)
 8000c36:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <USART2_IRQHandler+0x6c>)
 8000c3e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	 }
  }


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <USART2_IRQHandler+0x70>)
 8000c44:	f002 fe52 	bl	80038ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40004400 	.word	0x40004400
 8000c54:	20000028 	.word	0x20000028
 8000c58:	20013618 	.word	0x20013618

08000c5c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  // if (__HAL_DMA_GET_IT_SOURCE(&hdma_tim1_up, DMA_IT_TC)) // not needed?
  // {
    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <DMA2_Stream5_IRQHandler+0x48>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6a1a      	ldr	r2, [r3, #32]
 8000c66:	f241 1311 	movw	r3, #4369	; 0x1111
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10f      	bne.n	8000c90 <DMA2_Stream5_IRQHandler+0x34>
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <DMA2_Stream5_IRQHandler+0x48>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6a1a      	ldr	r2, [r3, #32]
 8000c76:	f240 4344 	movw	r3, #1092	; 0x444
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d107      	bne.n	8000c90 <DMA2_Stream5_IRQHandler+0x34>
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <DMA2_Stream5_IRQHandler+0x48>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <DMA2_Stream5_IRQHandler+0x48>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 0201 	bic.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <DMA2_Stream5_IRQHandler+0x4c>)
 8000c92:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000c96:	619a      	str	r2, [r3, #24]
  // }

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <DMA2_Stream5_IRQHandler+0x50>)
 8000c9a:	f000 fd73 	bl	8001784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20013538 	.word	0x20013538
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	20013578 	.word	0x20013578

08000cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <SystemInit+0x28>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <SystemInit+0x28>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SystemInit+0x28>)
 8000cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cca:	609a      	str	r2, [r3, #8]
#endif
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_TIM1_Init+0x98>)
 8000cfa:	4a1f      	ldr	r2, [pc, #124]	; (8000d78 <MX_TIM1_Init+0x9c>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_TIM1_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_TIM1_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_TIM1_Init+0x98>)
 8000d0c:	220b      	movs	r2, #11
 8000d0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_TIM1_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_TIM1_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_TIM1_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d22:	4814      	ldr	r0, [pc, #80]	; (8000d74 <MX_TIM1_Init+0x98>)
 8000d24:	f001 fdac 	bl	8002880 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000d2e:	f7ff fe9b 	bl	8000a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <MX_TIM1_Init+0x98>)
 8000d40:	f002 f8a8 	bl	8002e94 <HAL_TIM_ConfigClockSource>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000d4a:	f7ff fe8d 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d56:	463b      	mov	r3, r7
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_TIM1_Init+0x98>)
 8000d5c:	f002 fc94 	bl	8003688 <HAL_TIMEx_MasterConfigSynchronization>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000d66:	f7ff fe7f 	bl	8000a68 <Error_Handler>
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20013538 	.word	0x20013538
 8000d78:	40010000 	.word	0x40010000

08000d7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <MX_TIM2_Init+0xcc>)
 8000da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <MX_TIM2_Init+0xcc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <MX_TIM2_Init+0xcc>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <MX_TIM2_Init+0xcc>)
 8000db4:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000db8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <MX_TIM2_Init+0xcc>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_TIM2_Init+0xcc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dc6:	4820      	ldr	r0, [pc, #128]	; (8000e48 <MX_TIM2_Init+0xcc>)
 8000dc8:	f001 fda9 	bl	800291e <HAL_TIM_PWM_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000dd2:	f7ff fe49 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	4619      	mov	r1, r3
 8000de4:	4818      	ldr	r0, [pc, #96]	; (8000e48 <MX_TIM2_Init+0xcc>)
 8000de6:	f002 fc4f 	bl	8003688 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000df0:	f7ff fe3a 	bl	8000a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df4:	2360      	movs	r3, #96	; 0x60
 8000df6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000df8:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000dfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2208      	movs	r2, #8
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480e      	ldr	r0, [pc, #56]	; (8000e48 <MX_TIM2_Init+0xcc>)
 8000e0e:	f001 ff7b 	bl	8002d08 <HAL_TIM_PWM_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e18:	f7ff fe26 	bl	8000a68 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000e1c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	220c      	movs	r2, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM2_Init+0xcc>)
 8000e2a:	f001 ff6d 	bl	8002d08 <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000e34:	f7ff fe18 	bl	8000a68 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM2_Init+0xcc>)
 8000e3a:	f000 f87f 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200135d8 	.word	0x200135d8

08000e4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <HAL_TIM_Base_MspInit+0x94>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d13c      	bne.n	8000ed8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <HAL_TIM_Base_MspInit+0x98>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <HAL_TIM_Base_MspInit+0x98>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_TIM_Base_MspInit+0x98>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <HAL_TIM_Base_MspInit+0xa0>)
 8000e7e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000e82:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000e86:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000e8a:	2240      	movs	r2, #64	; 0x40
 8000e8c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000eb0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eb4:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000ebe:	f000 fb39 	bl	8001534 <HAL_DMA_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000ec8:	f7ff fdce 	bl	8000a68 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000ed0:	621a      	str	r2, [r3, #32]
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	20013578 	.word	0x20013578
 8000eec:	40026488 	.word	0x40026488

08000ef0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f00:	d115      	bne.n	8000f2e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_TIM_PWM_MspInit+0x48>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <HAL_TIM_PWM_MspInit+0x48>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_TIM_PWM_MspInit+0x48>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	201c      	movs	r0, #28
 8000f24:	f000 facf 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f28:	201c      	movs	r0, #28
 8000f2a:	f000 fae8 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f5c:	d11e      	bne.n	8000f9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_TIM_MspPostInit+0x68>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_TIM_MspPostInit+0x68>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_TIM_MspPostInit+0x68>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4619      	mov	r1, r3
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <HAL_TIM_MspPostInit+0x6c>)
 8000f98:	f000 fe5c 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020400 	.word	0x40020400

08000fac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <MX_USART2_UART_Init+0x50>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fe4:	f002 fbe0 	bl	80037a8 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fee:	f7ff fd3b 	bl	8000a68 <Error_Handler>
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20013618 	.word	0x20013618
 8000ffc:	40004400 	.word	0x40004400

08001000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_UART_MspInit+0x94>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d133      	bne.n	800108a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_UART_MspInit+0x98>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <HAL_UART_MspInit+0x98>)
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_UART_MspInit+0x98>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_UART_MspInit+0x98>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <HAL_UART_MspInit+0x98>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_UART_MspInit+0x98>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800105a:	230c      	movs	r3, #12
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106a:	2307      	movs	r3, #7
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <HAL_UART_MspInit+0x9c>)
 8001076:	f000 fded 	bl	8001c54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2026      	movs	r0, #38	; 0x26
 8001080:	f000 fa21 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001084:	2026      	movs	r0, #38	; 0x26
 8001086:	f000 fa3a 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	; 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40004400 	.word	0x40004400
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000

080010a0 <Reset_Handler>:
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0x14>
 80010a4:	2100      	movs	r1, #0
 80010a6:	e003      	b.n	80010b0 <LoopCopyDataInit>

080010a8 <CopyDataInit>:
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <LoopFillZerobss+0x18>)
 80010aa:	585b      	ldr	r3, [r3, r1]
 80010ac:	5043      	str	r3, [r0, r1]
 80010ae:	3104      	adds	r1, #4

080010b0 <LoopCopyDataInit>:
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <LoopFillZerobss+0x1c>)
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <LoopFillZerobss+0x20>)
 80010b4:	1842      	adds	r2, r0, r1
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3f6      	bcc.n	80010a8 <CopyDataInit>
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopFillZerobss+0x24>)
 80010bc:	e002      	b.n	80010c4 <LoopFillZerobss>

080010be <FillZerobss>:
 80010be:	2300      	movs	r3, #0
 80010c0:	f842 3b04 	str.w	r3, [r2], #4

080010c4 <LoopFillZerobss>:
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <LoopFillZerobss+0x28>)
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3f9      	bcc.n	80010be <FillZerobss>
 80010ca:	f7ff fdf1 	bl	8000cb0 <SystemInit>
 80010ce:	f003 f9c9 	bl	8004464 <__libc_init_array>
 80010d2:	f7ff fbf3 	bl	80008bc <main>
 80010d6:	4770      	bx	lr
 80010d8:	20020000 	.word	0x20020000
 80010dc:	08004504 	.word	0x08004504
 80010e0:	20000000 	.word	0x20000000
 80010e4:	2000000c 	.word	0x2000000c
 80010e8:	2000000c 	.word	0x2000000c
 80010ec:	2001365c 	.word	0x2001365c

080010f0 <ADC_IRQHandler>:
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <UB_VGA_Screen_Init+0x84>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <UB_VGA_Screen_Init+0x84>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <UB_VGA_Screen_Init+0x84>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <UB_VGA_Screen_Init+0x88>)
 800110c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001110:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001112:	481b      	ldr	r0, [pc, #108]	; (8001180 <UB_VGA_Screen_Init+0x8c>)
 8001114:	f001 fbdf 	bl	80028d6 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001118:	210c      	movs	r1, #12
 800111a:	4819      	ldr	r0, [pc, #100]	; (8001180 <UB_VGA_Screen_Init+0x8c>)
 800111c:	f001 fc2a 	bl	8002974 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001120:	2108      	movs	r1, #8
 8001122:	4817      	ldr	r0, [pc, #92]	; (8001180 <UB_VGA_Screen_Init+0x8c>)
 8001124:	f001 fc64 	bl	80029f0 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <UB_VGA_Screen_Init+0x90>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <UB_VGA_Screen_Init+0x90>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001136:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <UB_VGA_Screen_Init+0x90>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <UB_VGA_Screen_Init+0x90>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0201 	orr.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001148:	490f      	ldr	r1, [pc, #60]	; (8001188 <UB_VGA_Screen_Init+0x94>)
 800114a:	f240 1341 	movw	r3, #321	; 0x141
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <UB_VGA_Screen_Init+0x98>)
 8001150:	480f      	ldr	r0, [pc, #60]	; (8001190 <UB_VGA_Screen_Init+0x9c>)
 8001152:	f000 fa9d 	bl	8001690 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001156:	480e      	ldr	r0, [pc, #56]	; (8001190 <UB_VGA_Screen_Init+0x9c>)
 8001158:	f000 f9ec 	bl	8001534 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <UB_VGA_Screen_Init+0x9c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <UB_VGA_Screen_Init+0x9c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0210 	orr.w	r2, r2, #16
 800116a:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <UB_VGA_Screen_Init+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a01      	ldr	r2, [pc, #4]	; (8001178 <UB_VGA_Screen_Init+0x84>)
 8001172:	6093      	str	r3, [r2, #8]
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000043c 	.word	0x2000043c
 800117c:	40020400 	.word	0x40020400
 8001180:	200135d8 	.word	0x200135d8
 8001184:	20013538 	.word	0x20013538
 8001188:	20000448 	.word	0x20000448
 800118c:	40021015 	.word	0x40021015
 8001190:	20013578 	.word	0x20013578
 8001194:	40026488 	.word	0x40026488

08001198 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	81bb      	strh	r3, [r7, #12]
 80011a6:	e012      	b.n	80011ce <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	81fb      	strh	r3, [r7, #14]
 80011ac:	e008      	b.n	80011c0 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	89b9      	ldrh	r1, [r7, #12]
 80011b2:	89fb      	ldrh	r3, [r7, #14]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f811 	bl	80011dc <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	3301      	adds	r3, #1
 80011be:	81fb      	strh	r3, [r7, #14]
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011c6:	d3f2      	bcc.n	80011ae <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80011c8:	89bb      	ldrh	r3, [r7, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	81bb      	strh	r3, [r7, #12]
 80011ce:	89bb      	ldrh	r3, [r7, #12]
 80011d0:	2bef      	cmp	r3, #239	; 0xef
 80011d2:	d9e9      	bls.n	80011a8 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
 80011e6:	460b      	mov	r3, r1
 80011e8:	80bb      	strh	r3, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011f4:	d301      	bcc.n	80011fa <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	2bef      	cmp	r3, #239	; 0xef
 80011fe:	d901      	bls.n	8001204 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001204:	88ba      	ldrh	r2, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	019b      	lsls	r3, r3, #6
 800120e:	441a      	add	r2, r3
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	4413      	add	r3, r2
 8001214:	4904      	ldr	r1, [pc, #16]	; (8001228 <UB_VGA_SetPixel+0x4c>)
 8001216:	78fa      	ldrb	r2, [r7, #3]
 8001218:	54ca      	strb	r2, [r1, r3]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000448 	.word	0x20000448

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <HAL_Init+0x40>)
 8001236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_Init+0x40>)
 8001242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001246:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_Init+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_Init+0x40>)
 800124e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f92b 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f808 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001260:	f7ff fc0a 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023c00 	.word	0x40023c00

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x54>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	fbb3 f3f1 	udiv	r3, r3, r1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f943 	bl	800151a <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00e      	b.n	80012bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d80a      	bhi.n	80012ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f000 f90b 	bl	80014c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_InitTick+0x5c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x20>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x24>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_IncTick+0x24>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20013658 	.word	0x20013658

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20013658 	.word	0x20013658

08001310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db0b      	blt.n	800139e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4907      	ldr	r1, [pc, #28]	; (80013ac <__NVIC_EnableIRQ+0x38>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	; (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	; (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	; 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800147c:	d301      	bcc.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <SysTick_Config+0x40>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	210f      	movs	r1, #15
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f7ff ff8e 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <SysTick_Config+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SysTick_Config+0x40>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff29 	bl	8001310 <__NVIC_SetPriorityGrouping>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff3e 	bl	8001358 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff8e 	bl	8001404 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5d 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff31 	bl	8001374 <__NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffa2 	bl	800146c <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001540:	f7ff feda 	bl	80012f8 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e099      	b.n	8001684 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001570:	e00f      	b.n	8001592 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001572:	f7ff fec1 	bl	80012f8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b05      	cmp	r3, #5
 800157e:	d908      	bls.n	8001592 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2220      	movs	r2, #32
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2203      	movs	r2, #3
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e078      	b.n	8001684 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e8      	bne.n	8001572 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <HAL_DMA_Init+0x158>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d107      	bne.n	80015fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	4313      	orrs	r3, r2
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f023 0307 	bic.w	r3, r3, #7
 8001612:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	4313      	orrs	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	2b04      	cmp	r3, #4
 8001624:	d117      	bne.n	8001656 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4313      	orrs	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00e      	beq.n	8001656 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fa91 	bl	8001b60 <DMA_CheckFifoParam>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2240      	movs	r2, #64	; 0x40
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001652:	2301      	movs	r3, #1
 8001654:	e016      	b.n	8001684 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fa48 	bl	8001af4 <DMA_CalcBaseAndBitshift>
 8001664:	4603      	mov	r3, r0
 8001666:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166c:	223f      	movs	r2, #63	; 0x3f
 800166e:	409a      	lsls	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	f010803f 	.word	0xf010803f

08001690 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_DMA_Start_IT+0x26>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e040      	b.n	8001738 <HAL_DMA_Start_IT+0xa8>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d12f      	bne.n	800172a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2202      	movs	r2, #2
 80016ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f9da 	bl	8001a98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	223f      	movs	r2, #63	; 0x3f
 80016ea:	409a      	lsls	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0216 	orr.w	r2, r2, #22
 80016fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d007      	beq.n	8001718 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0208 	orr.w	r2, r2, #8
 8001716:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e005      	b.n	8001736 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001732:	2302      	movs	r3, #2
 8001734:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001736:	7dfb      	ldrb	r3, [r7, #23]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d004      	beq.n	800175e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00c      	b.n	8001778 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2205      	movs	r2, #5
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001790:	4b92      	ldr	r3, [pc, #584]	; (80019dc <HAL_DMA_IRQHandler+0x258>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a92      	ldr	r2, [pc, #584]	; (80019e0 <HAL_DMA_IRQHandler+0x25c>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0a9b      	lsrs	r3, r3, #10
 800179c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	2208      	movs	r2, #8
 80017b0:	409a      	lsls	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d01a      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0204 	bic.w	r2, r2, #4
 80017d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	2208      	movs	r2, #8
 80017de:	409a      	lsls	r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	2201      	movs	r2, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d012      	beq.n	8001826 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00b      	beq.n	8001826 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001812:	2201      	movs	r2, #1
 8001814:	409a      	lsls	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	f043 0202 	orr.w	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	2204      	movs	r2, #4
 800182c:	409a      	lsls	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d012      	beq.n	800185c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00b      	beq.n	800185c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	2204      	movs	r2, #4
 800184a:	409a      	lsls	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	f043 0204 	orr.w	r2, r3, #4
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	2210      	movs	r2, #16
 8001862:	409a      	lsls	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d043      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d03c      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187e:	2210      	movs	r2, #16
 8001880:	409a      	lsls	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d018      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d108      	bne.n	80018b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d024      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
 80018b2:	e01f      	b.n	80018f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01b      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	4798      	blx	r3
 80018c4:	e016      	b.n	80018f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d107      	bne.n	80018e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0208 	bic.w	r2, r2, #8
 80018e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f8:	2220      	movs	r2, #32
 80018fa:	409a      	lsls	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 808e 	beq.w	8001a22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 8086 	beq.w	8001a22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191a:	2220      	movs	r2, #32
 800191c:	409a      	lsls	r2, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b05      	cmp	r3, #5
 800192c:	d136      	bne.n	800199c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0216 	bic.w	r2, r2, #22
 800193c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800194c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	2b00      	cmp	r3, #0
 8001954:	d103      	bne.n	800195e <HAL_DMA_IRQHandler+0x1da>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0208 	bic.w	r2, r2, #8
 800196c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	223f      	movs	r2, #63	; 0x3f
 8001974:	409a      	lsls	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800198e:	2b00      	cmp	r3, #0
 8001990:	d07d      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	4798      	blx	r3
        }
        return;
 800199a:	e078      	b.n	8001a8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01c      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d108      	bne.n	80019ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d030      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	4798      	blx	r3
 80019c8:	e02b      	b.n	8001a22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d027      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4798      	blx	r3
 80019da:	e022      	b.n	8001a22 <HAL_DMA_IRQHandler+0x29e>
 80019dc:	20000000 	.word	0x20000000
 80019e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10f      	bne.n	8001a12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0210 	bic.w	r2, r2, #16
 8001a00:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d032      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d022      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2205      	movs	r2, #5
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3301      	adds	r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d307      	bcc.n	8001a6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f2      	bne.n	8001a4e <HAL_DMA_IRQHandler+0x2ca>
 8001a68:	e000      	b.n	8001a6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a6a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	4798      	blx	r3
 8001a8c:	e000      	b.n	8001a90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a8e:	bf00      	nop
    }
  }
}
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop

08001a98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ab4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b40      	cmp	r3, #64	; 0x40
 8001ac4:	d108      	bne.n	8001ad8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ad6:	e007      	b.n	8001ae8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	60da      	str	r2, [r3, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	3b10      	subs	r3, #16
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <DMA_CalcBaseAndBitshift+0x64>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b0e:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <DMA_CalcBaseAndBitshift+0x68>)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d909      	bls.n	8001b36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b2a:	f023 0303 	bic.w	r3, r3, #3
 8001b2e:	1d1a      	adds	r2, r3, #4
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	659a      	str	r2, [r3, #88]	; 0x58
 8001b34:	e007      	b.n	8001b46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b3e:	f023 0303 	bic.w	r3, r3, #3
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	aaaaaaab 	.word	0xaaaaaaab
 8001b5c:	080044ec 	.word	0x080044ec

08001b60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11f      	bne.n	8001bba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d855      	bhi.n	8001c2c <DMA_CheckFifoParam+0xcc>
 8001b80:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <DMA_CheckFifoParam+0x28>)
 8001b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b86:	bf00      	nop
 8001b88:	08001b99 	.word	0x08001b99
 8001b8c:	08001bab 	.word	0x08001bab
 8001b90:	08001b99 	.word	0x08001b99
 8001b94:	08001c2d 	.word	0x08001c2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d045      	beq.n	8001c30 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba8:	e042      	b.n	8001c30 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bb2:	d13f      	bne.n	8001c34 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bb8:	e03c      	b.n	8001c34 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bc2:	d121      	bne.n	8001c08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d836      	bhi.n	8001c38 <DMA_CheckFifoParam+0xd8>
 8001bca:	a201      	add	r2, pc, #4	; (adr r2, 8001bd0 <DMA_CheckFifoParam+0x70>)
 8001bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd0:	08001be1 	.word	0x08001be1
 8001bd4:	08001be7 	.word	0x08001be7
 8001bd8:	08001be1 	.word	0x08001be1
 8001bdc:	08001bf9 	.word	0x08001bf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
      break;
 8001be4:	e02f      	b.n	8001c46 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d024      	beq.n	8001c3c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bf6:	e021      	b.n	8001c3c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c00:	d11e      	bne.n	8001c40 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c06:	e01b      	b.n	8001c40 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d902      	bls.n	8001c14 <DMA_CheckFifoParam+0xb4>
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d003      	beq.n	8001c1a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c12:	e018      	b.n	8001c46 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
      break;
 8001c18:	e015      	b.n	8001c46 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00e      	beq.n	8001c44 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
      break;
 8001c2a:	e00b      	b.n	8001c44 <DMA_CheckFifoParam+0xe4>
      break;
 8001c2c:	bf00      	nop
 8001c2e:	e00a      	b.n	8001c46 <DMA_CheckFifoParam+0xe6>
      break;
 8001c30:	bf00      	nop
 8001c32:	e008      	b.n	8001c46 <DMA_CheckFifoParam+0xe6>
      break;
 8001c34:	bf00      	nop
 8001c36:	e006      	b.n	8001c46 <DMA_CheckFifoParam+0xe6>
      break;
 8001c38:	bf00      	nop
 8001c3a:	e004      	b.n	8001c46 <DMA_CheckFifoParam+0xe6>
      break;
 8001c3c:	bf00      	nop
 8001c3e:	e002      	b.n	8001c46 <DMA_CheckFifoParam+0xe6>
      break;   
 8001c40:	bf00      	nop
 8001c42:	e000      	b.n	8001c46 <DMA_CheckFifoParam+0xe6>
      break;
 8001c44:	bf00      	nop
    }
  } 
  
  return status; 
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e16b      	b.n	8001f48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c70:	2201      	movs	r2, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f040 815a 	bne.w	8001f42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d00b      	beq.n	8001cae <HAL_GPIO_Init+0x5a>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca2:	2b11      	cmp	r3, #17
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b12      	cmp	r3, #18
 8001cac:	d130      	bne.n	8001d10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 0201 	and.w	r2, r3, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0xfc>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b12      	cmp	r3, #18
 8001d4e:	d123      	bne.n	8001d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80b4 	beq.w	8001f42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b5f      	ldr	r3, [pc, #380]	; (8001f5c <HAL_GPIO_Init+0x308>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a5e      	ldr	r2, [pc, #376]	; (8001f5c <HAL_GPIO_Init+0x308>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b5c      	ldr	r3, [pc, #368]	; (8001f5c <HAL_GPIO_Init+0x308>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df6:	4a5a      	ldr	r2, [pc, #360]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a51      	ldr	r2, [pc, #324]	; (8001f64 <HAL_GPIO_Init+0x310>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02b      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a50      	ldr	r2, [pc, #320]	; (8001f68 <HAL_GPIO_Init+0x314>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d025      	beq.n	8001e76 <HAL_GPIO_Init+0x222>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4f      	ldr	r2, [pc, #316]	; (8001f6c <HAL_GPIO_Init+0x318>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <HAL_GPIO_Init+0x21e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4e      	ldr	r2, [pc, #312]	; (8001f70 <HAL_GPIO_Init+0x31c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x21a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4d      	ldr	r2, [pc, #308]	; (8001f74 <HAL_GPIO_Init+0x320>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x216>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4c      	ldr	r2, [pc, #304]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x212>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4b      	ldr	r2, [pc, #300]	; (8001f7c <HAL_GPIO_Init+0x328>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x20e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4a      	ldr	r2, [pc, #296]	; (8001f80 <HAL_GPIO_Init+0x32c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x20a>
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	e00e      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e5e:	2308      	movs	r3, #8
 8001e60:	e00c      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e62:	2306      	movs	r3, #6
 8001e64:	e00a      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e66:	2305      	movs	r3, #5
 8001e68:	e008      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e004      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	f002 0203 	and.w	r2, r2, #3
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	4093      	lsls	r3, r2
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8c:	4934      	ldr	r1, [pc, #208]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ebe:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ec4:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee8:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f12:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f3c:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3301      	adds	r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b0f      	cmp	r3, #15
 8001f4c:	f67f ae90 	bls.w	8001c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	3724      	adds	r7, #36	; 0x24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40013800 	.word	0x40013800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40021400 	.word	0x40021400
 8001f7c:	40021800 	.word	0x40021800
 8001f80:	40021c00 	.word	0x40021c00
 8001f84:	40013c00 	.word	0x40013c00

08001f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
 8001f94:	4613      	mov	r3, r2
 8001f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa4:	e003      	b.n	8001fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa6:	887b      	ldrh	r3, [r7, #2]
 8001fa8:	041a      	lsls	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e25b      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d075      	beq.n	80020c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fda:	4ba3      	ldr	r3, [pc, #652]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00c      	beq.n	8002000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe6:	4ba0      	ldr	r3, [pc, #640]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d112      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff2:	4b9d      	ldr	r3, [pc, #628]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	4b99      	ldr	r3, [pc, #612]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d05b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x108>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d157      	bne.n	80020c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e236      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x74>
 8002022:	4b91      	ldr	r3, [pc, #580]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a90      	ldr	r2, [pc, #576]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x98>
 800203a:	4b8b      	ldr	r3, [pc, #556]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a8a      	ldr	r2, [pc, #552]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a87      	ldr	r2, [pc, #540]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002054:	4b84      	ldr	r3, [pc, #528]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a83      	ldr	r2, [pc, #524]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b81      	ldr	r3, [pc, #516]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a80      	ldr	r2, [pc, #512]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff f940 	bl	80012f8 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff f93c 	bl	80012f8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e1fb      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0xc0>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff f92c 	bl	80012f8 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff f928 	bl	80012f8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1e7      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	4b6c      	ldr	r3, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0xe8>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020d2:	4b65      	ldr	r3, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b62      	ldr	r3, [pc, #392]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1bb      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b56      	ldr	r3, [pc, #344]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4952      	ldr	r1, [pc, #328]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	e03a      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b4f      	ldr	r3, [pc, #316]	; (800226c <HAL_RCC_OscConfig+0x2b0>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff f8e1 	bl	80012f8 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff f8dd 	bl	80012f8 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e19c      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b46      	ldr	r3, [pc, #280]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b43      	ldr	r3, [pc, #268]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4940      	ldr	r1, [pc, #256]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x2b0>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff f8c0 	bl	80012f8 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217c:	f7ff f8bc 	bl	80012f8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e17b      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d030      	beq.n	8002208 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d016      	beq.n	80021dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCC_OscConfig+0x2b4>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7ff f8a0 	bl	80012f8 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff f89c 	bl	80012f8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e15b      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x200>
 80021da:	e015      	b.n	8002208 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_RCC_OscConfig+0x2b4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff f889 	bl	80012f8 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff f885 	bl	80012f8 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e144      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a0 	beq.w	8002356 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d121      	bne.n	8002296 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7ff f84b 	bl	80012f8 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e011      	b.n	800228a <HAL_RCC_OscConfig+0x2ce>
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	42470000 	.word	0x42470000
 8002270:	42470e80 	.word	0x42470e80
 8002274:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7ff f83e 	bl	80012f8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e0fd      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b81      	ldr	r3, [pc, #516]	; (8002490 <HAL_RCC_OscConfig+0x4d4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x2f0>
 800229e:	4b7d      	ldr	r3, [pc, #500]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a7c      	ldr	r2, [pc, #496]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
 80022aa:	e01c      	b.n	80022e6 <HAL_RCC_OscConfig+0x32a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x312>
 80022b4:	4b77      	ldr	r3, [pc, #476]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	4a76      	ldr	r2, [pc, #472]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6713      	str	r3, [r2, #112]	; 0x70
 80022c0:	4b74      	ldr	r3, [pc, #464]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	4a73      	ldr	r2, [pc, #460]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6713      	str	r3, [r2, #112]	; 0x70
 80022cc:	e00b      	b.n	80022e6 <HAL_RCC_OscConfig+0x32a>
 80022ce:	4b71      	ldr	r3, [pc, #452]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	4a70      	ldr	r2, [pc, #448]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6713      	str	r3, [r2, #112]	; 0x70
 80022da:	4b6e      	ldr	r3, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	4a6d      	ldr	r2, [pc, #436]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d015      	beq.n	800231a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7ff f803 	bl	80012f8 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe ffff 	bl	80012f8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0bc      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	4b61      	ldr	r3, [pc, #388]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ee      	beq.n	80022f6 <HAL_RCC_OscConfig+0x33a>
 8002318:	e014      	b.n	8002344 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7fe ffed 	bl	80012f8 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe ffe9 	bl	80012f8 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0a6      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	4b56      	ldr	r3, [pc, #344]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b52      	ldr	r3, [pc, #328]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a51      	ldr	r2, [pc, #324]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 8002350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8092 	beq.w	8002484 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002360:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b08      	cmp	r3, #8
 800236a:	d05c      	beq.n	8002426 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d141      	bne.n	80023f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b48      	ldr	r3, [pc, #288]	; (8002498 <HAL_RCC_OscConfig+0x4dc>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7fe ffbd 	bl	80012f8 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002382:	f7fe ffb9 	bl	80012f8 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e078      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002394:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	019b      	lsls	r3, r3, #6
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	3b01      	subs	r3, #1
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	061b      	lsls	r3, r3, #24
 80023c4:	4933      	ldr	r1, [pc, #204]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ca:	4b33      	ldr	r3, [pc, #204]	; (8002498 <HAL_RCC_OscConfig+0x4dc>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe ff92 	bl	80012f8 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe ff8e 	bl	80012f8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e04d      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x41c>
 80023f6:	e045      	b.n	8002484 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f8:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x4dc>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7fe ff7b 	bl	80012f8 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002406:	f7fe ff77 	bl	80012f8 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e036      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x44a>
 8002424:	e02e      	b.n	8002484 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e029      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_RCC_OscConfig+0x4d8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	429a      	cmp	r2, r3
 8002444:	d11c      	bne.n	8002480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d115      	bne.n	8002480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800245a:	4013      	ands	r3, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002460:	4293      	cmp	r3, r2
 8002462:	d10d      	bne.n	8002480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d106      	bne.n	8002480 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40007000 	.word	0x40007000
 8002494:	40023800 	.word	0x40023800
 8002498:	42470060 	.word	0x42470060

0800249c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0cc      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b68      	ldr	r3, [pc, #416]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d90c      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b8      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f0:	4b59      	ldr	r3, [pc, #356]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002508:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b50      	ldr	r3, [pc, #320]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	494d      	ldr	r1, [pc, #308]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d044      	beq.n	80025bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d119      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e07f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d003      	beq.n	800255a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	2b03      	cmp	r3, #3
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e06f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e067      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b37      	ldr	r3, [pc, #220]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4934      	ldr	r1, [pc, #208]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800258c:	f7fe feb4 	bl	80012f8 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe feb0 	bl	80012f8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e04f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d20c      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e032      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4916      	ldr	r1, [pc, #88]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	490e      	ldr	r1, [pc, #56]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002622:	f000 f821 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8002626:	4601      	mov	r1, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	5cd3      	ldrb	r3, [r2, r3]
 8002636:	fa21 f303 	lsr.w	r3, r1, r3
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fe14 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023c00 	.word	0x40023c00
 8002658:	40023800 	.word	0x40023800
 800265c:	080044d4 	.word	0x080044d4
 8002660:	20000000 	.word	0x20000000
 8002664:	20000004 	.word	0x20000004

08002668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	2300      	movs	r3, #0
 8002678:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b04      	cmp	r3, #4
 8002688:	d007      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x32>
 800268a:	2b08      	cmp	r3, #8
 800268c:	d008      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x38>
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 80b4 	bne.w	80027fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b5e      	ldr	r3, [pc, #376]	; (8002810 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002696:	60bb      	str	r3, [r7, #8]
       break;
 8002698:	e0b3      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800269a:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800269c:	60bb      	str	r3, [r7, #8]
      break;
 800269e:	e0b0      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a0:	4b5a      	ldr	r3, [pc, #360]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026aa:	4b58      	ldr	r3, [pc, #352]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d04a      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b6:	4b55      	ldr	r3, [pc, #340]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	f04f 0400 	mov.w	r4, #0
 80026c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	ea03 0501 	and.w	r5, r3, r1
 80026cc:	ea04 0602 	and.w	r6, r4, r2
 80026d0:	4629      	mov	r1, r5
 80026d2:	4632      	mov	r2, r6
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	f04f 0400 	mov.w	r4, #0
 80026dc:	0154      	lsls	r4, r2, #5
 80026de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026e2:	014b      	lsls	r3, r1, #5
 80026e4:	4619      	mov	r1, r3
 80026e6:	4622      	mov	r2, r4
 80026e8:	1b49      	subs	r1, r1, r5
 80026ea:	eb62 0206 	sbc.w	r2, r2, r6
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f04f 0400 	mov.w	r4, #0
 80026f6:	0194      	lsls	r4, r2, #6
 80026f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026fc:	018b      	lsls	r3, r1, #6
 80026fe:	1a5b      	subs	r3, r3, r1
 8002700:	eb64 0402 	sbc.w	r4, r4, r2
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	00e2      	lsls	r2, r4, #3
 800270e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002712:	00d9      	lsls	r1, r3, #3
 8002714:	460b      	mov	r3, r1
 8002716:	4614      	mov	r4, r2
 8002718:	195b      	adds	r3, r3, r5
 800271a:	eb44 0406 	adc.w	r4, r4, r6
 800271e:	f04f 0100 	mov.w	r1, #0
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	0262      	lsls	r2, r4, #9
 8002728:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800272c:	0259      	lsls	r1, r3, #9
 800272e:	460b      	mov	r3, r1
 8002730:	4614      	mov	r4, r2
 8002732:	4618      	mov	r0, r3
 8002734:	4621      	mov	r1, r4
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f04f 0400 	mov.w	r4, #0
 800273c:	461a      	mov	r2, r3
 800273e:	4623      	mov	r3, r4
 8002740:	f7fd fd42 	bl	80001c8 <__aeabi_uldivmod>
 8002744:	4603      	mov	r3, r0
 8002746:	460c      	mov	r4, r1
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e049      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274c:	4b2f      	ldr	r3, [pc, #188]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	f04f 0400 	mov.w	r4, #0
 8002756:	f240 11ff 	movw	r1, #511	; 0x1ff
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	ea03 0501 	and.w	r5, r3, r1
 8002762:	ea04 0602 	and.w	r6, r4, r2
 8002766:	4629      	mov	r1, r5
 8002768:	4632      	mov	r2, r6
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	f04f 0400 	mov.w	r4, #0
 8002772:	0154      	lsls	r4, r2, #5
 8002774:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002778:	014b      	lsls	r3, r1, #5
 800277a:	4619      	mov	r1, r3
 800277c:	4622      	mov	r2, r4
 800277e:	1b49      	subs	r1, r1, r5
 8002780:	eb62 0206 	sbc.w	r2, r2, r6
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	f04f 0400 	mov.w	r4, #0
 800278c:	0194      	lsls	r4, r2, #6
 800278e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002792:	018b      	lsls	r3, r1, #6
 8002794:	1a5b      	subs	r3, r3, r1
 8002796:	eb64 0402 	sbc.w	r4, r4, r2
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	00e2      	lsls	r2, r4, #3
 80027a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027a8:	00d9      	lsls	r1, r3, #3
 80027aa:	460b      	mov	r3, r1
 80027ac:	4614      	mov	r4, r2
 80027ae:	195b      	adds	r3, r3, r5
 80027b0:	eb44 0406 	adc.w	r4, r4, r6
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	02a2      	lsls	r2, r4, #10
 80027be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027c2:	0299      	lsls	r1, r3, #10
 80027c4:	460b      	mov	r3, r1
 80027c6:	4614      	mov	r4, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	4621      	mov	r1, r4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f04f 0400 	mov.w	r4, #0
 80027d2:	461a      	mov	r2, r3
 80027d4:	4623      	mov	r3, r4
 80027d6:	f7fd fcf7 	bl	80001c8 <__aeabi_uldivmod>
 80027da:	4603      	mov	r3, r0
 80027dc:	460c      	mov	r4, r1
 80027de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	3301      	adds	r3, #1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	60bb      	str	r3, [r7, #8]
      break;
 80027fa:	e002      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027fe:	60bb      	str	r3, [r7, #8]
      break;
 8002800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002802:	68bb      	ldr	r3, [r7, #8]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	00f42400 	.word	0x00f42400
 8002814:	007a1200 	.word	0x007a1200

08002818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_RCC_GetHCLKFreq+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002834:	f7ff fff0 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002838:	4601      	mov	r1, r0
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0a9b      	lsrs	r3, r3, #10
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	080044e4 	.word	0x080044e4

08002858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800285c:	f7ff ffdc 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002860:	4601      	mov	r1, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0b5b      	lsrs	r3, r3, #13
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4a03      	ldr	r2, [pc, #12]	; (800287c <HAL_RCC_GetPCLK2Freq+0x24>)
 800286e:	5cd3      	ldrb	r3, [r2, r3]
 8002870:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	080044e4 	.word	0x080044e4

08002880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e01d      	b.n	80028ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fad0 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3304      	adds	r3, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f000 fbd2 	bl	8003068 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d007      	beq.n	8002908 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e01d      	b.n	800296c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fe fad3 	bl	8000ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f000 fb83 	bl	8003068 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2201      	movs	r2, #1
 8002984:	6839      	ldr	r1, [r7, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fe58 	bl	800363c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <HAL_TIM_PWM_Start+0x74>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_TIM_PWM_Start+0x2c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a14      	ldr	r2, [pc, #80]	; (80029ec <HAL_TIM_PWM_Start+0x78>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_TIM_PWM_Start+0x30>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_TIM_PWM_Start+0x32>
 80029a4:	2300      	movs	r3, #0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b06      	cmp	r3, #6
 80029ca:	d007      	beq.n	80029dc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40010400 	.word	0x40010400

080029f0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b0c      	cmp	r3, #12
 80029fe:	d841      	bhi.n	8002a84 <HAL_TIM_PWM_Start_IT+0x94>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <HAL_TIM_PWM_Start_IT+0x18>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a3d 	.word	0x08002a3d
 8002a0c:	08002a85 	.word	0x08002a85
 8002a10:	08002a85 	.word	0x08002a85
 8002a14:	08002a85 	.word	0x08002a85
 8002a18:	08002a4f 	.word	0x08002a4f
 8002a1c:	08002a85 	.word	0x08002a85
 8002a20:	08002a85 	.word	0x08002a85
 8002a24:	08002a85 	.word	0x08002a85
 8002a28:	08002a61 	.word	0x08002a61
 8002a2c:	08002a85 	.word	0x08002a85
 8002a30:	08002a85 	.word	0x08002a85
 8002a34:	08002a85 	.word	0x08002a85
 8002a38:	08002a73 	.word	0x08002a73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0202 	orr.w	r2, r2, #2
 8002a4a:	60da      	str	r2, [r3, #12]
      break;
 8002a4c:	e01b      	b.n	8002a86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0204 	orr.w	r2, r2, #4
 8002a5c:	60da      	str	r2, [r3, #12]
      break;
 8002a5e:	e012      	b.n	8002a86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0208 	orr.w	r2, r2, #8
 8002a6e:	60da      	str	r2, [r3, #12]
      break;
 8002a70:	e009      	b.n	8002a86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0210 	orr.w	r2, r2, #16
 8002a80:	60da      	str	r2, [r3, #12]
      break;
 8002a82:	e000      	b.n	8002a86 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002a84:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fdd4 	bl	800363c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_TIM_PWM_Start_IT+0x100>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_TIM_PWM_Start_IT+0xb8>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <HAL_TIM_PWM_Start_IT+0x104>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_TIM_PWM_Start_IT+0xbc>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_TIM_PWM_Start_IT+0xbe>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d007      	beq.n	8002ae4 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40010400 	.word	0x40010400

08002af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d122      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d11b      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0202 	mvn.w	r2, #2
 8002b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa75 	bl	800302a <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa67 	bl	8003016 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fa78 	bl	800303e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d122      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d11b      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0204 	mvn.w	r2, #4
 8002b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa4b 	bl	800302a <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa3d 	bl	8003016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fa4e 	bl	800303e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d122      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d11b      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0208 	mvn.w	r2, #8
 8002bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa21 	bl	800302a <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa13 	bl	8003016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fa24 	bl	800303e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b10      	cmp	r3, #16
 8002c08:	d122      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d11b      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0210 	mvn.w	r2, #16
 8002c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2208      	movs	r2, #8
 8002c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f9f7 	bl	800302a <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f9e9 	bl	8003016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f9fa 	bl	800303e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d10e      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0201 	mvn.w	r2, #1
 8002c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f9c3 	bl	8003002 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c86:	2b80      	cmp	r3, #128	; 0x80
 8002c88:	d10e      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c94:	2b80      	cmp	r3, #128	; 0x80
 8002c96:	d107      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fd76 	bl	8003794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb2:	2b40      	cmp	r3, #64	; 0x40
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d107      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f9bf 	bl	8003052 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d107      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0220 	mvn.w	r2, #32
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fd40 	bl	8003780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e0b4      	b.n	8002e8c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b0c      	cmp	r3, #12
 8002d36:	f200 809f 	bhi.w	8002e78 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002d3a:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002d75 	.word	0x08002d75
 8002d44:	08002e79 	.word	0x08002e79
 8002d48:	08002e79 	.word	0x08002e79
 8002d4c:	08002e79 	.word	0x08002e79
 8002d50:	08002db5 	.word	0x08002db5
 8002d54:	08002e79 	.word	0x08002e79
 8002d58:	08002e79 	.word	0x08002e79
 8002d5c:	08002e79 	.word	0x08002e79
 8002d60:	08002df7 	.word	0x08002df7
 8002d64:	08002e79 	.word	0x08002e79
 8002d68:	08002e79 	.word	0x08002e79
 8002d6c:	08002e79 	.word	0x08002e79
 8002d70:	08002e37 	.word	0x08002e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fa14 	bl	80031a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0208 	orr.w	r2, r2, #8
 8002d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0204 	bic.w	r2, r2, #4
 8002d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6999      	ldr	r1, [r3, #24]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	619a      	str	r2, [r3, #24]
      break;
 8002db2:	e062      	b.n	8002e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fa64 	bl	8003288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6999      	ldr	r1, [r3, #24]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	021a      	lsls	r2, r3, #8
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	619a      	str	r2, [r3, #24]
      break;
 8002df4:	e041      	b.n	8002e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fab9 	bl	8003374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69da      	ldr	r2, [r3, #28]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0208 	orr.w	r2, r2, #8
 8002e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0204 	bic.w	r2, r2, #4
 8002e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69d9      	ldr	r1, [r3, #28]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	61da      	str	r2, [r3, #28]
      break;
 8002e34:	e021      	b.n	8002e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fb0d 	bl	800345c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69d9      	ldr	r1, [r3, #28]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	021a      	lsls	r2, r3, #8
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	61da      	str	r2, [r3, #28]
      break;
 8002e76:	e000      	b.n	8002e7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002e78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_TIM_ConfigClockSource+0x18>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e0a6      	b.n	8002ffa <HAL_TIM_ConfigClockSource+0x166>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d067      	beq.n	8002fb4 <HAL_TIM_ConfigClockSource+0x120>
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d80b      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x6c>
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d073      	beq.n	8002fd4 <HAL_TIM_ConfigClockSource+0x140>
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d802      	bhi.n	8002ef6 <HAL_TIM_ConfigClockSource+0x62>
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d06f      	beq.n	8002fd4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ef4:	e078      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d06c      	beq.n	8002fd4 <HAL_TIM_ConfigClockSource+0x140>
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d06a      	beq.n	8002fd4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002efe:	e073      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f00:	2b70      	cmp	r3, #112	; 0x70
 8002f02:	d00d      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0x8c>
 8002f04:	2b70      	cmp	r3, #112	; 0x70
 8002f06:	d804      	bhi.n	8002f12 <HAL_TIM_ConfigClockSource+0x7e>
 8002f08:	2b50      	cmp	r3, #80	; 0x50
 8002f0a:	d033      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0xe0>
 8002f0c:	2b60      	cmp	r3, #96	; 0x60
 8002f0e:	d041      	beq.n	8002f94 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f10:	e06a      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f16:	d066      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x152>
 8002f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1c:	d017      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f1e:	e063      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6899      	ldr	r1, [r3, #8]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f000 fb64 	bl	80035fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	609a      	str	r2, [r3, #8]
      break;
 8002f4c:	e04c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6899      	ldr	r1, [r3, #8]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f000 fb4d 	bl	80035fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f70:	609a      	str	r2, [r3, #8]
      break;
 8002f72:	e039      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	461a      	mov	r2, r3
 8002f82:	f000 fac1 	bl	8003508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2150      	movs	r1, #80	; 0x50
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fb1a 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 8002f92:	e029      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f000 fae0 	bl	8003566 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2160      	movs	r1, #96	; 0x60
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fb0a 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 8002fb2:	e019      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f000 faa1 	bl	8003508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2140      	movs	r1, #64	; 0x40
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fafa 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 8002fd2:	e009      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f000 faf1 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 8002fe4:	e000      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a40      	ldr	r2, [pc, #256]	; (800317c <TIM_Base_SetConfig+0x114>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d013      	beq.n	80030a8 <TIM_Base_SetConfig+0x40>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003086:	d00f      	beq.n	80030a8 <TIM_Base_SetConfig+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3d      	ldr	r2, [pc, #244]	; (8003180 <TIM_Base_SetConfig+0x118>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00b      	beq.n	80030a8 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a3c      	ldr	r2, [pc, #240]	; (8003184 <TIM_Base_SetConfig+0x11c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d007      	beq.n	80030a8 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3b      	ldr	r2, [pc, #236]	; (8003188 <TIM_Base_SetConfig+0x120>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <TIM_Base_SetConfig+0x40>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a3a      	ldr	r2, [pc, #232]	; (800318c <TIM_Base_SetConfig+0x124>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d108      	bne.n	80030ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2f      	ldr	r2, [pc, #188]	; (800317c <TIM_Base_SetConfig+0x114>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02b      	beq.n	800311a <TIM_Base_SetConfig+0xb2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c8:	d027      	beq.n	800311a <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <TIM_Base_SetConfig+0x118>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d023      	beq.n	800311a <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a2b      	ldr	r2, [pc, #172]	; (8003184 <TIM_Base_SetConfig+0x11c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01f      	beq.n	800311a <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <TIM_Base_SetConfig+0x120>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01b      	beq.n	800311a <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a29      	ldr	r2, [pc, #164]	; (800318c <TIM_Base_SetConfig+0x124>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d017      	beq.n	800311a <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a28      	ldr	r2, [pc, #160]	; (8003190 <TIM_Base_SetConfig+0x128>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a27      	ldr	r2, [pc, #156]	; (8003194 <TIM_Base_SetConfig+0x12c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00f      	beq.n	800311a <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a26      	ldr	r2, [pc, #152]	; (8003198 <TIM_Base_SetConfig+0x130>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00b      	beq.n	800311a <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <TIM_Base_SetConfig+0x134>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a24      	ldr	r2, [pc, #144]	; (80031a0 <TIM_Base_SetConfig+0x138>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <TIM_Base_SetConfig+0x13c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d108      	bne.n	800312c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a0a      	ldr	r2, [pc, #40]	; (800317c <TIM_Base_SetConfig+0x114>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <TIM_Base_SetConfig+0xf8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a0c      	ldr	r2, [pc, #48]	; (800318c <TIM_Base_SetConfig+0x124>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d103      	bne.n	8003168 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	615a      	str	r2, [r3, #20]
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40010000 	.word	0x40010000
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800
 8003188:	40000c00 	.word	0x40000c00
 800318c:	40010400 	.word	0x40010400
 8003190:	40014000 	.word	0x40014000
 8003194:	40014400 	.word	0x40014400
 8003198:	40014800 	.word	0x40014800
 800319c:	40001800 	.word	0x40001800
 80031a0:	40001c00 	.word	0x40001c00
 80031a4:	40002000 	.word	0x40002000

080031a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f023 0201 	bic.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0303 	bic.w	r3, r3, #3
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f023 0302 	bic.w	r3, r3, #2
 80031f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a20      	ldr	r2, [pc, #128]	; (8003280 <TIM_OC1_SetConfig+0xd8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_OC1_SetConfig+0x64>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <TIM_OC1_SetConfig+0xdc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d10c      	bne.n	8003226 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f023 0308 	bic.w	r3, r3, #8
 8003212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f023 0304 	bic.w	r3, r3, #4
 8003224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a15      	ldr	r2, [pc, #84]	; (8003280 <TIM_OC1_SetConfig+0xd8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d003      	beq.n	8003236 <TIM_OC1_SetConfig+0x8e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <TIM_OC1_SetConfig+0xdc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d111      	bne.n	800325a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800323c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	621a      	str	r2, [r3, #32]
}
 8003274:	bf00      	nop
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40010000 	.word	0x40010000
 8003284:	40010400 	.word	0x40010400

08003288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f023 0210 	bic.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f023 0320 	bic.w	r3, r3, #32
 80032d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a22      	ldr	r2, [pc, #136]	; (800336c <TIM_OC2_SetConfig+0xe4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d003      	beq.n	80032f0 <TIM_OC2_SetConfig+0x68>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a21      	ldr	r2, [pc, #132]	; (8003370 <TIM_OC2_SetConfig+0xe8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10d      	bne.n	800330c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800330a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a17      	ldr	r2, [pc, #92]	; (800336c <TIM_OC2_SetConfig+0xe4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <TIM_OC2_SetConfig+0x94>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a16      	ldr	r2, [pc, #88]	; (8003370 <TIM_OC2_SetConfig+0xe8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d113      	bne.n	8003344 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800332a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	621a      	str	r2, [r3, #32]
}
 800335e:	bf00      	nop
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40010000 	.word	0x40010000
 8003370:	40010400 	.word	0x40010400

08003374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a21      	ldr	r2, [pc, #132]	; (8003454 <TIM_OC3_SetConfig+0xe0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d003      	beq.n	80033da <TIM_OC3_SetConfig+0x66>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a20      	ldr	r2, [pc, #128]	; (8003458 <TIM_OC3_SetConfig+0xe4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10d      	bne.n	80033f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a16      	ldr	r2, [pc, #88]	; (8003454 <TIM_OC3_SetConfig+0xe0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d003      	beq.n	8003406 <TIM_OC3_SetConfig+0x92>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a15      	ldr	r2, [pc, #84]	; (8003458 <TIM_OC3_SetConfig+0xe4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d113      	bne.n	800342e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800340c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	bf00      	nop
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	40010000 	.word	0x40010000
 8003458:	40010400 	.word	0x40010400

0800345c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	031b      	lsls	r3, r3, #12
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <TIM_OC4_SetConfig+0xa4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <TIM_OC4_SetConfig+0x68>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a11      	ldr	r2, [pc, #68]	; (8003504 <TIM_OC4_SetConfig+0xa8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d109      	bne.n	80034d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40010000 	.word	0x40010000
 8003504:	40010400 	.word	0x40010400

08003508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f023 0201 	bic.w	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 030a 	bic.w	r3, r3, #10
 8003544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003566:	b480      	push	{r7}
 8003568:	b087      	sub	sp, #28
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f023 0210 	bic.w	r2, r3, #16
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	031b      	lsls	r3, r3, #12
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	621a      	str	r2, [r3, #32]
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f043 0307 	orr.w	r3, r3, #7
 80035e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	021a      	lsls	r2, r3, #8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	431a      	orrs	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4313      	orrs	r3, r2
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	609a      	str	r2, [r3, #8]
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2201      	movs	r2, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a1a      	ldr	r2, [r3, #32]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	43db      	mvns	r3, r3
 800365e:	401a      	ands	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1a      	ldr	r2, [r3, #32]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	fa01 f303 	lsl.w	r3, r1, r3
 8003674:	431a      	orrs	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800369c:	2302      	movs	r3, #2
 800369e:	e05a      	b.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a21      	ldr	r2, [pc, #132]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d022      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ec:	d01d      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d018      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00e      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d009      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d004      	beq.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a15      	ldr	r2, [pc, #84]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d10c      	bne.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4313      	orrs	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40010000 	.word	0x40010000
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800
 8003770:	40000c00 	.word	0x40000c00
 8003774:	40010400 	.word	0x40010400
 8003778:	40014000 	.word	0x40014000
 800377c:	40001800 	.word	0x40001800

08003780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e03f      	b.n	800383a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd fc16 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2224      	movs	r2, #36	; 0x24
 80037d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fabd 	bl	8003d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	4613      	mov	r3, r2
 800384e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b20      	cmp	r3, #32
 800385a:	d140      	bne.n	80038de <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_UART_Receive_IT+0x26>
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e039      	b.n	80038e0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_UART_Receive_IT+0x38>
 8003876:	2302      	movs	r3, #2
 8003878:	e032      	b.n	80038e0 <HAL_UART_Receive_IT+0x9e>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2222      	movs	r2, #34	; 0x22
 800389e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0220 	orr.w	r2, r2, #32
 80038d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80038de:	2302      	movs	r3, #2
  }
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10d      	bne.n	800393e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_UART_IRQHandler+0x52>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f996 	bl	8003c68 <UART_Receive_IT>
      return;
 800393c:	e0d1      	b.n	8003ae2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80b0 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x1ba>
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_UART_IRQHandler+0x70>
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80a5 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_UART_IRQHandler+0x90>
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	f043 0201 	orr.w	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_UART_IRQHandler+0xb0>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003994:	f043 0202 	orr.w	r2, r3, #2
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_UART_IRQHandler+0xd0>
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	f043 0204 	orr.w	r2, r3, #4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00f      	beq.n	80039e6 <HAL_UART_IRQHandler+0xfa>
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <HAL_UART_IRQHandler+0xee>
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	f043 0208 	orr.w	r2, r3, #8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d078      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_UART_IRQHandler+0x11c>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f930 	bl	8003c68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	bf0c      	ite	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	2300      	movne	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <HAL_UART_IRQHandler+0x144>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d031      	beq.n	8003a94 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f879 	bl	8003b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d123      	bne.n	8003a8c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a52:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d013      	beq.n	8003a84 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <HAL_UART_IRQHandler+0x1fc>)
 8003a62:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fd fe69 	bl	8001740 <HAL_DMA_Abort_IT>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d016      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a82:	e00e      	b.n	8003aa2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f845 	bl	8003b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8a:	e00a      	b.n	8003aa2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f841 	bl	8003b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a92:	e006      	b.n	8003aa2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f83d 	bl	8003b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003aa0:	e01e      	b.n	8003ae0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa2:	bf00      	nop
    return;
 8003aa4:	e01c      	b.n	8003ae0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x1d6>
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f866 	bl	8003b8c <UART_Transmit_IT>
    return;
 8003ac0:	e00f      	b.n	8003ae2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x1f6>
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f8ae 	bl	8003c38 <UART_EndTransmit_IT>
    return;
 8003adc:	bf00      	nop
 8003ade:	e000      	b.n	8003ae2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003ae0:	bf00      	nop
  }
}
 8003ae2:	3720      	adds	r7, #32
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	08003b65 	.word	0x08003b65

08003aec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7ff ffc8 	bl	8003b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b21      	cmp	r3, #33	; 0x21
 8003b9e:	d144      	bne.n	8003c2a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba8:	d11a      	bne.n	8003be0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d105      	bne.n	8003bd4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	1c9a      	adds	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]
 8003bd2:	e00e      	b.n	8003bf2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]
 8003bde:	e008      	b.n	8003bf2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	1c59      	adds	r1, r3, #1
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6211      	str	r1, [r2, #32]
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ff47 	bl	8003aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b22      	cmp	r3, #34	; 0x22
 8003c7a:	d171      	bne.n	8003d60 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c84:	d123      	bne.n	8003cce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10e      	bne.n	8003cb2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	1c9a      	adds	r2, r3, #2
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb0:	e029      	b.n	8003d06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
 8003ccc:	e01b      	b.n	8003d06 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6858      	ldr	r0, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	1c59      	adds	r1, r3, #1
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6291      	str	r1, [r2, #40]	; 0x28
 8003ce6:	b2c2      	uxtb	r2, r0
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e00c      	b.n	8003d06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	1c58      	adds	r0, r3, #1
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	6288      	str	r0, [r1, #40]	; 0x28
 8003cfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	4619      	mov	r1, r3
 8003d14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d120      	bne.n	8003d5c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0220 	bic.w	r2, r2, #32
 8003d28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fed4 	bl	8003b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e002      	b.n	8003d62 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e000      	b.n	8003d62 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
  }
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003dae:	f023 030c 	bic.w	r3, r3, #12
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	430b      	orrs	r3, r1
 8003dba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dda:	f040 818b 	bne.w	80040f4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4ac1      	ldr	r2, [pc, #772]	; (80040e8 <UART_SetConfig+0x37c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d005      	beq.n	8003df4 <UART_SetConfig+0x88>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4abf      	ldr	r2, [pc, #764]	; (80040ec <UART_SetConfig+0x380>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	f040 80bd 	bne.w	8003f6e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003df4:	f7fe fd30 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8003df8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	461d      	mov	r5, r3
 8003dfe:	f04f 0600 	mov.w	r6, #0
 8003e02:	46a8      	mov	r8, r5
 8003e04:	46b1      	mov	r9, r6
 8003e06:	eb18 0308 	adds.w	r3, r8, r8
 8003e0a:	eb49 0409 	adc.w	r4, r9, r9
 8003e0e:	4698      	mov	r8, r3
 8003e10:	46a1      	mov	r9, r4
 8003e12:	eb18 0805 	adds.w	r8, r8, r5
 8003e16:	eb49 0906 	adc.w	r9, r9, r6
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e2e:	4688      	mov	r8, r1
 8003e30:	4691      	mov	r9, r2
 8003e32:	eb18 0005 	adds.w	r0, r8, r5
 8003e36:	eb49 0106 	adc.w	r1, r9, r6
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	461d      	mov	r5, r3
 8003e40:	f04f 0600 	mov.w	r6, #0
 8003e44:	196b      	adds	r3, r5, r5
 8003e46:	eb46 0406 	adc.w	r4, r6, r6
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4623      	mov	r3, r4
 8003e4e:	f7fc f9bb 	bl	80001c8 <__aeabi_uldivmod>
 8003e52:	4603      	mov	r3, r0
 8003e54:	460c      	mov	r4, r1
 8003e56:	461a      	mov	r2, r3
 8003e58:	4ba5      	ldr	r3, [pc, #660]	; (80040f0 <UART_SetConfig+0x384>)
 8003e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	461d      	mov	r5, r3
 8003e68:	f04f 0600 	mov.w	r6, #0
 8003e6c:	46a9      	mov	r9, r5
 8003e6e:	46b2      	mov	sl, r6
 8003e70:	eb19 0309 	adds.w	r3, r9, r9
 8003e74:	eb4a 040a 	adc.w	r4, sl, sl
 8003e78:	4699      	mov	r9, r3
 8003e7a:	46a2      	mov	sl, r4
 8003e7c:	eb19 0905 	adds.w	r9, r9, r5
 8003e80:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e98:	4689      	mov	r9, r1
 8003e9a:	4692      	mov	sl, r2
 8003e9c:	eb19 0005 	adds.w	r0, r9, r5
 8003ea0:	eb4a 0106 	adc.w	r1, sl, r6
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	461d      	mov	r5, r3
 8003eaa:	f04f 0600 	mov.w	r6, #0
 8003eae:	196b      	adds	r3, r5, r5
 8003eb0:	eb46 0406 	adc.w	r4, r6, r6
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	f7fc f986 	bl	80001c8 <__aeabi_uldivmod>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b8b      	ldr	r3, [pc, #556]	; (80040f0 <UART_SetConfig+0x384>)
 8003ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	2164      	movs	r1, #100	; 0x64
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	3332      	adds	r3, #50	; 0x32
 8003ed6:	4a86      	ldr	r2, [pc, #536]	; (80040f0 <UART_SetConfig+0x384>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ee4:	4498      	add	r8, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	461d      	mov	r5, r3
 8003eea:	f04f 0600 	mov.w	r6, #0
 8003eee:	46a9      	mov	r9, r5
 8003ef0:	46b2      	mov	sl, r6
 8003ef2:	eb19 0309 	adds.w	r3, r9, r9
 8003ef6:	eb4a 040a 	adc.w	r4, sl, sl
 8003efa:	4699      	mov	r9, r3
 8003efc:	46a2      	mov	sl, r4
 8003efe:	eb19 0905 	adds.w	r9, r9, r5
 8003f02:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f06:	f04f 0100 	mov.w	r1, #0
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f1a:	4689      	mov	r9, r1
 8003f1c:	4692      	mov	sl, r2
 8003f1e:	eb19 0005 	adds.w	r0, r9, r5
 8003f22:	eb4a 0106 	adc.w	r1, sl, r6
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	461d      	mov	r5, r3
 8003f2c:	f04f 0600 	mov.w	r6, #0
 8003f30:	196b      	adds	r3, r5, r5
 8003f32:	eb46 0406 	adc.w	r4, r6, r6
 8003f36:	461a      	mov	r2, r3
 8003f38:	4623      	mov	r3, r4
 8003f3a:	f7fc f945 	bl	80001c8 <__aeabi_uldivmod>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	460c      	mov	r4, r1
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b6a      	ldr	r3, [pc, #424]	; (80040f0 <UART_SetConfig+0x384>)
 8003f46:	fba3 1302 	umull	r1, r3, r3, r2
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	2164      	movs	r1, #100	; 0x64
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	3332      	adds	r3, #50	; 0x32
 8003f58:	4a65      	ldr	r2, [pc, #404]	; (80040f0 <UART_SetConfig+0x384>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	f003 0207 	and.w	r2, r3, #7
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4442      	add	r2, r8
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	e26f      	b.n	800444e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f6e:	f7fe fc5f 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8003f72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	461d      	mov	r5, r3
 8003f78:	f04f 0600 	mov.w	r6, #0
 8003f7c:	46a8      	mov	r8, r5
 8003f7e:	46b1      	mov	r9, r6
 8003f80:	eb18 0308 	adds.w	r3, r8, r8
 8003f84:	eb49 0409 	adc.w	r4, r9, r9
 8003f88:	4698      	mov	r8, r3
 8003f8a:	46a1      	mov	r9, r4
 8003f8c:	eb18 0805 	adds.w	r8, r8, r5
 8003f90:	eb49 0906 	adc.w	r9, r9, r6
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fa0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fa4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fa8:	4688      	mov	r8, r1
 8003faa:	4691      	mov	r9, r2
 8003fac:	eb18 0005 	adds.w	r0, r8, r5
 8003fb0:	eb49 0106 	adc.w	r1, r9, r6
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	461d      	mov	r5, r3
 8003fba:	f04f 0600 	mov.w	r6, #0
 8003fbe:	196b      	adds	r3, r5, r5
 8003fc0:	eb46 0406 	adc.w	r4, r6, r6
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	f7fc f8fe 	bl	80001c8 <__aeabi_uldivmod>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <UART_SetConfig+0x384>)
 8003fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	461d      	mov	r5, r3
 8003fe2:	f04f 0600 	mov.w	r6, #0
 8003fe6:	46a9      	mov	r9, r5
 8003fe8:	46b2      	mov	sl, r6
 8003fea:	eb19 0309 	adds.w	r3, r9, r9
 8003fee:	eb4a 040a 	adc.w	r4, sl, sl
 8003ff2:	4699      	mov	r9, r3
 8003ff4:	46a2      	mov	sl, r4
 8003ff6:	eb19 0905 	adds.w	r9, r9, r5
 8003ffa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800400a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800400e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004012:	4689      	mov	r9, r1
 8004014:	4692      	mov	sl, r2
 8004016:	eb19 0005 	adds.w	r0, r9, r5
 800401a:	eb4a 0106 	adc.w	r1, sl, r6
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	461d      	mov	r5, r3
 8004024:	f04f 0600 	mov.w	r6, #0
 8004028:	196b      	adds	r3, r5, r5
 800402a:	eb46 0406 	adc.w	r4, r6, r6
 800402e:	461a      	mov	r2, r3
 8004030:	4623      	mov	r3, r4
 8004032:	f7fc f8c9 	bl	80001c8 <__aeabi_uldivmod>
 8004036:	4603      	mov	r3, r0
 8004038:	460c      	mov	r4, r1
 800403a:	461a      	mov	r2, r3
 800403c:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <UART_SetConfig+0x384>)
 800403e:	fba3 1302 	umull	r1, r3, r3, r2
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	2164      	movs	r1, #100	; 0x64
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	3332      	adds	r3, #50	; 0x32
 8004050:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <UART_SetConfig+0x384>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800405e:	4498      	add	r8, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	461d      	mov	r5, r3
 8004064:	f04f 0600 	mov.w	r6, #0
 8004068:	46a9      	mov	r9, r5
 800406a:	46b2      	mov	sl, r6
 800406c:	eb19 0309 	adds.w	r3, r9, r9
 8004070:	eb4a 040a 	adc.w	r4, sl, sl
 8004074:	4699      	mov	r9, r3
 8004076:	46a2      	mov	sl, r4
 8004078:	eb19 0905 	adds.w	r9, r9, r5
 800407c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004080:	f04f 0100 	mov.w	r1, #0
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800408c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004090:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004094:	4689      	mov	r9, r1
 8004096:	4692      	mov	sl, r2
 8004098:	eb19 0005 	adds.w	r0, r9, r5
 800409c:	eb4a 0106 	adc.w	r1, sl, r6
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	461d      	mov	r5, r3
 80040a6:	f04f 0600 	mov.w	r6, #0
 80040aa:	196b      	adds	r3, r5, r5
 80040ac:	eb46 0406 	adc.w	r4, r6, r6
 80040b0:	461a      	mov	r2, r3
 80040b2:	4623      	mov	r3, r4
 80040b4:	f7fc f888 	bl	80001c8 <__aeabi_uldivmod>
 80040b8:	4603      	mov	r3, r0
 80040ba:	460c      	mov	r4, r1
 80040bc:	461a      	mov	r2, r3
 80040be:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <UART_SetConfig+0x384>)
 80040c0:	fba3 1302 	umull	r1, r3, r3, r2
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	2164      	movs	r1, #100	; 0x64
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	3332      	adds	r3, #50	; 0x32
 80040d2:	4a07      	ldr	r2, [pc, #28]	; (80040f0 <UART_SetConfig+0x384>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	f003 0207 	and.w	r2, r3, #7
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4442      	add	r2, r8
 80040e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80040e6:	e1b2      	b.n	800444e <UART_SetConfig+0x6e2>
 80040e8:	40011000 	.word	0x40011000
 80040ec:	40011400 	.word	0x40011400
 80040f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4ad7      	ldr	r2, [pc, #860]	; (8004458 <UART_SetConfig+0x6ec>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d005      	beq.n	800410a <UART_SetConfig+0x39e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4ad6      	ldr	r2, [pc, #856]	; (800445c <UART_SetConfig+0x6f0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	f040 80d1 	bne.w	80042ac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800410a:	f7fe fba5 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 800410e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	469a      	mov	sl, r3
 8004114:	f04f 0b00 	mov.w	fp, #0
 8004118:	46d0      	mov	r8, sl
 800411a:	46d9      	mov	r9, fp
 800411c:	eb18 0308 	adds.w	r3, r8, r8
 8004120:	eb49 0409 	adc.w	r4, r9, r9
 8004124:	4698      	mov	r8, r3
 8004126:	46a1      	mov	r9, r4
 8004128:	eb18 080a 	adds.w	r8, r8, sl
 800412c:	eb49 090b 	adc.w	r9, r9, fp
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800413c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004140:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004144:	4688      	mov	r8, r1
 8004146:	4691      	mov	r9, r2
 8004148:	eb1a 0508 	adds.w	r5, sl, r8
 800414c:	eb4b 0609 	adc.w	r6, fp, r9
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4619      	mov	r1, r3
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	f04f 0400 	mov.w	r4, #0
 8004162:	0094      	lsls	r4, r2, #2
 8004164:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004168:	008b      	lsls	r3, r1, #2
 800416a:	461a      	mov	r2, r3
 800416c:	4623      	mov	r3, r4
 800416e:	4628      	mov	r0, r5
 8004170:	4631      	mov	r1, r6
 8004172:	f7fc f829 	bl	80001c8 <__aeabi_uldivmod>
 8004176:	4603      	mov	r3, r0
 8004178:	460c      	mov	r4, r1
 800417a:	461a      	mov	r2, r3
 800417c:	4bb8      	ldr	r3, [pc, #736]	; (8004460 <UART_SetConfig+0x6f4>)
 800417e:	fba3 2302 	umull	r2, r3, r3, r2
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	469b      	mov	fp, r3
 800418c:	f04f 0c00 	mov.w	ip, #0
 8004190:	46d9      	mov	r9, fp
 8004192:	46e2      	mov	sl, ip
 8004194:	eb19 0309 	adds.w	r3, r9, r9
 8004198:	eb4a 040a 	adc.w	r4, sl, sl
 800419c:	4699      	mov	r9, r3
 800419e:	46a2      	mov	sl, r4
 80041a0:	eb19 090b 	adds.w	r9, r9, fp
 80041a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041bc:	4689      	mov	r9, r1
 80041be:	4692      	mov	sl, r2
 80041c0:	eb1b 0509 	adds.w	r5, fp, r9
 80041c4:	eb4c 060a 	adc.w	r6, ip, sl
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	f04f 0400 	mov.w	r4, #0
 80041da:	0094      	lsls	r4, r2, #2
 80041dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041e0:	008b      	lsls	r3, r1, #2
 80041e2:	461a      	mov	r2, r3
 80041e4:	4623      	mov	r3, r4
 80041e6:	4628      	mov	r0, r5
 80041e8:	4631      	mov	r1, r6
 80041ea:	f7fb ffed 	bl	80001c8 <__aeabi_uldivmod>
 80041ee:	4603      	mov	r3, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	461a      	mov	r2, r3
 80041f4:	4b9a      	ldr	r3, [pc, #616]	; (8004460 <UART_SetConfig+0x6f4>)
 80041f6:	fba3 1302 	umull	r1, r3, r3, r2
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	2164      	movs	r1, #100	; 0x64
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	3332      	adds	r3, #50	; 0x32
 8004208:	4a95      	ldr	r2, [pc, #596]	; (8004460 <UART_SetConfig+0x6f4>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004214:	4498      	add	r8, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	469b      	mov	fp, r3
 800421a:	f04f 0c00 	mov.w	ip, #0
 800421e:	46d9      	mov	r9, fp
 8004220:	46e2      	mov	sl, ip
 8004222:	eb19 0309 	adds.w	r3, r9, r9
 8004226:	eb4a 040a 	adc.w	r4, sl, sl
 800422a:	4699      	mov	r9, r3
 800422c:	46a2      	mov	sl, r4
 800422e:	eb19 090b 	adds.w	r9, r9, fp
 8004232:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004242:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004246:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800424a:	4689      	mov	r9, r1
 800424c:	4692      	mov	sl, r2
 800424e:	eb1b 0509 	adds.w	r5, fp, r9
 8004252:	eb4c 060a 	adc.w	r6, ip, sl
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4619      	mov	r1, r3
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	f04f 0400 	mov.w	r4, #0
 8004268:	0094      	lsls	r4, r2, #2
 800426a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800426e:	008b      	lsls	r3, r1, #2
 8004270:	461a      	mov	r2, r3
 8004272:	4623      	mov	r3, r4
 8004274:	4628      	mov	r0, r5
 8004276:	4631      	mov	r1, r6
 8004278:	f7fb ffa6 	bl	80001c8 <__aeabi_uldivmod>
 800427c:	4603      	mov	r3, r0
 800427e:	460c      	mov	r4, r1
 8004280:	461a      	mov	r2, r3
 8004282:	4b77      	ldr	r3, [pc, #476]	; (8004460 <UART_SetConfig+0x6f4>)
 8004284:	fba3 1302 	umull	r1, r3, r3, r2
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	2164      	movs	r1, #100	; 0x64
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	3332      	adds	r3, #50	; 0x32
 8004296:	4a72      	ldr	r2, [pc, #456]	; (8004460 <UART_SetConfig+0x6f4>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	f003 020f 	and.w	r2, r3, #15
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4442      	add	r2, r8
 80042a8:	609a      	str	r2, [r3, #8]
 80042aa:	e0d0      	b.n	800444e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7fe fac0 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 80042b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	469a      	mov	sl, r3
 80042b6:	f04f 0b00 	mov.w	fp, #0
 80042ba:	46d0      	mov	r8, sl
 80042bc:	46d9      	mov	r9, fp
 80042be:	eb18 0308 	adds.w	r3, r8, r8
 80042c2:	eb49 0409 	adc.w	r4, r9, r9
 80042c6:	4698      	mov	r8, r3
 80042c8:	46a1      	mov	r9, r4
 80042ca:	eb18 080a 	adds.w	r8, r8, sl
 80042ce:	eb49 090b 	adc.w	r9, r9, fp
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042e6:	4688      	mov	r8, r1
 80042e8:	4691      	mov	r9, r2
 80042ea:	eb1a 0508 	adds.w	r5, sl, r8
 80042ee:	eb4b 0609 	adc.w	r6, fp, r9
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4619      	mov	r1, r3
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	f04f 0400 	mov.w	r4, #0
 8004304:	0094      	lsls	r4, r2, #2
 8004306:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800430a:	008b      	lsls	r3, r1, #2
 800430c:	461a      	mov	r2, r3
 800430e:	4623      	mov	r3, r4
 8004310:	4628      	mov	r0, r5
 8004312:	4631      	mov	r1, r6
 8004314:	f7fb ff58 	bl	80001c8 <__aeabi_uldivmod>
 8004318:	4603      	mov	r3, r0
 800431a:	460c      	mov	r4, r1
 800431c:	461a      	mov	r2, r3
 800431e:	4b50      	ldr	r3, [pc, #320]	; (8004460 <UART_SetConfig+0x6f4>)
 8004320:	fba3 2302 	umull	r2, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	469b      	mov	fp, r3
 800432e:	f04f 0c00 	mov.w	ip, #0
 8004332:	46d9      	mov	r9, fp
 8004334:	46e2      	mov	sl, ip
 8004336:	eb19 0309 	adds.w	r3, r9, r9
 800433a:	eb4a 040a 	adc.w	r4, sl, sl
 800433e:	4699      	mov	r9, r3
 8004340:	46a2      	mov	sl, r4
 8004342:	eb19 090b 	adds.w	r9, r9, fp
 8004346:	eb4a 0a0c 	adc.w	sl, sl, ip
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004356:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800435a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800435e:	4689      	mov	r9, r1
 8004360:	4692      	mov	sl, r2
 8004362:	eb1b 0509 	adds.w	r5, fp, r9
 8004366:	eb4c 060a 	adc.w	r6, ip, sl
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4619      	mov	r1, r3
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	f04f 0400 	mov.w	r4, #0
 800437c:	0094      	lsls	r4, r2, #2
 800437e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004382:	008b      	lsls	r3, r1, #2
 8004384:	461a      	mov	r2, r3
 8004386:	4623      	mov	r3, r4
 8004388:	4628      	mov	r0, r5
 800438a:	4631      	mov	r1, r6
 800438c:	f7fb ff1c 	bl	80001c8 <__aeabi_uldivmod>
 8004390:	4603      	mov	r3, r0
 8004392:	460c      	mov	r4, r1
 8004394:	461a      	mov	r2, r3
 8004396:	4b32      	ldr	r3, [pc, #200]	; (8004460 <UART_SetConfig+0x6f4>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	; 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	3332      	adds	r3, #50	; 0x32
 80043aa:	4a2d      	ldr	r2, [pc, #180]	; (8004460 <UART_SetConfig+0x6f4>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b6:	4498      	add	r8, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	469b      	mov	fp, r3
 80043bc:	f04f 0c00 	mov.w	ip, #0
 80043c0:	46d9      	mov	r9, fp
 80043c2:	46e2      	mov	sl, ip
 80043c4:	eb19 0309 	adds.w	r3, r9, r9
 80043c8:	eb4a 040a 	adc.w	r4, sl, sl
 80043cc:	4699      	mov	r9, r3
 80043ce:	46a2      	mov	sl, r4
 80043d0:	eb19 090b 	adds.w	r9, r9, fp
 80043d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043ec:	4689      	mov	r9, r1
 80043ee:	4692      	mov	sl, r2
 80043f0:	eb1b 0509 	adds.w	r5, fp, r9
 80043f4:	eb4c 060a 	adc.w	r6, ip, sl
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4619      	mov	r1, r3
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	f04f 0400 	mov.w	r4, #0
 800440a:	0094      	lsls	r4, r2, #2
 800440c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004410:	008b      	lsls	r3, r1, #2
 8004412:	461a      	mov	r2, r3
 8004414:	4623      	mov	r3, r4
 8004416:	4628      	mov	r0, r5
 8004418:	4631      	mov	r1, r6
 800441a:	f7fb fed5 	bl	80001c8 <__aeabi_uldivmod>
 800441e:	4603      	mov	r3, r0
 8004420:	460c      	mov	r4, r1
 8004422:	461a      	mov	r2, r3
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <UART_SetConfig+0x6f4>)
 8004426:	fba3 1302 	umull	r1, r3, r3, r2
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2164      	movs	r1, #100	; 0x64
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	3332      	adds	r3, #50	; 0x32
 8004438:	4a09      	ldr	r2, [pc, #36]	; (8004460 <UART_SetConfig+0x6f4>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4442      	add	r2, r8
 800444a:	609a      	str	r2, [r3, #8]
}
 800444c:	e7ff      	b.n	800444e <UART_SetConfig+0x6e2>
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004458:	40011000 	.word	0x40011000
 800445c:	40011400 	.word	0x40011400
 8004460:	51eb851f 	.word	0x51eb851f

08004464 <__libc_init_array>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	4e0d      	ldr	r6, [pc, #52]	; (800449c <__libc_init_array+0x38>)
 8004468:	4c0d      	ldr	r4, [pc, #52]	; (80044a0 <__libc_init_array+0x3c>)
 800446a:	1ba4      	subs	r4, r4, r6
 800446c:	10a4      	asrs	r4, r4, #2
 800446e:	2500      	movs	r5, #0
 8004470:	42a5      	cmp	r5, r4
 8004472:	d109      	bne.n	8004488 <__libc_init_array+0x24>
 8004474:	4e0b      	ldr	r6, [pc, #44]	; (80044a4 <__libc_init_array+0x40>)
 8004476:	4c0c      	ldr	r4, [pc, #48]	; (80044a8 <__libc_init_array+0x44>)
 8004478:	f000 f820 	bl	80044bc <_init>
 800447c:	1ba4      	subs	r4, r4, r6
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	2500      	movs	r5, #0
 8004482:	42a5      	cmp	r5, r4
 8004484:	d105      	bne.n	8004492 <__libc_init_array+0x2e>
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800448c:	4798      	blx	r3
 800448e:	3501      	adds	r5, #1
 8004490:	e7ee      	b.n	8004470 <__libc_init_array+0xc>
 8004492:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004496:	4798      	blx	r3
 8004498:	3501      	adds	r5, #1
 800449a:	e7f2      	b.n	8004482 <__libc_init_array+0x1e>
 800449c:	080044fc 	.word	0x080044fc
 80044a0:	080044fc 	.word	0x080044fc
 80044a4:	080044fc 	.word	0x080044fc
 80044a8:	08004500 	.word	0x08004500

080044ac <memset>:
 80044ac:	4402      	add	r2, r0
 80044ae:	4603      	mov	r3, r0
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d100      	bne.n	80044b6 <memset+0xa>
 80044b4:	4770      	bx	lr
 80044b6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ba:	e7f9      	b.n	80044b0 <memset+0x4>

080044bc <_init>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr

080044c8 <_fini>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr
