
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d68  08004d68  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d70  08004d70  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013758  200001dc  08004f54  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013934  08004f54  00023934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bf3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026f3  00000000  00000000  00033dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  000364f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  00037188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c61  00000000  00000000  00037cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb4d  00000000  00000000  00059951  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9047  00000000  00000000  0006549e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012e4e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000348c  00000000  00000000  0012e560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b80 	.word	0x08004b80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08004b80 	.word	0x08004b80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <FL_uart_decode>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void FL_uart_decode()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	int function_number = FL_find_decode_nr();
 80004ce:	f000 f86d 	bl	80005ac <FL_find_decode_nr>
 80004d2:	6078      	str	r0, [r7, #4]
	if(function_number == FUNCTION_NO_RESET)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d102      	bne.n	80004e0 <FL_uart_decode+0x18>
		FL_error_handler("Did not recognise function number, line 34");
 80004da:	4831      	ldr	r0, [pc, #196]	; (80005a0 <FL_uart_decode+0xd8>)
 80004dc:	f000 fbfa 	bl	8000cd4 <FL_error_handler>

//	struct collection command;

	command.function_number = function_number;
 80004e0:	4a30      	ldr	r2, [pc, #192]	; (80005a4 <FL_uart_decode+0xdc>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6013      	str	r3, [r2, #0]


	switch(function_number)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3b01      	subs	r3, #1
 80004ea:	2b0a      	cmp	r3, #10
 80004ec:	d84e      	bhi.n	800058c <FL_uart_decode+0xc4>
 80004ee:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <FL_uart_decode+0x2c>)
 80004f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f4:	08000521 	.word	0x08000521
 80004f8:	08000539 	.word	0x08000539
 80004fc:	0800052d 	.word	0x0800052d
 8000500:	08000595 	.word	0x08000595
 8000504:	08000545 	.word	0x08000545
 8000508:	08000551 	.word	0x08000551
 800050c:	0800055d 	.word	0x0800055d
 8000510:	08000569 	.word	0x08000569
 8000514:	08000575 	.word	0x08000575
 8000518:	0800058d 	.word	0x0800058d
 800051c:	08000581 	.word	0x08000581
	{
	/*
	 * struct aanmaken voor functies
	 * afhankelijk van de functie het adres vand e struct meegeven
	 */
		case BITMAP_FUNCTION_NO: FL_find_args(function_number, BITMAP_ARGS, BITMAP_FUNCTION_NAME_LEN);
 8000520:	2206      	movs	r2, #6
 8000522:	2103      	movs	r1, #3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f88d 	bl	8000644 <FL_find_args>
		break;
 800052a:	e034      	b.n	8000596 <FL_uart_decode+0xce>

		case CLEARSCHERM_FUNCTION_NO: FL_find_args(function_number, CLEARSCHERM_ARGS, CLEARSCHERM_FUNCTION_NAME_LEN);
 800052c:	220b      	movs	r2, #11
 800052e:	2101      	movs	r1, #1
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 f887 	bl	8000644 <FL_find_args>
		break;
 8000536:	e02e      	b.n	8000596 <FL_uart_decode+0xce>

		case CIRKEL_FUNCTION_NO: FL_find_args(function_number, CIRKEL_ARGS, CIRKEL_FUNCTION_NAME_LEN);
 8000538:	2206      	movs	r2, #6
 800053a:	2104      	movs	r1, #4
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f881 	bl	8000644 <FL_find_args>
		break;
 8000542:	e028      	b.n	8000596 <FL_uart_decode+0xce>

		case EXECUTE_FUNCTION_NO: //special case: no args, so directly execute
		break;

		case FIGUUR_FUNCTION_NO: FL_find_args(function_number, FIGUUR_ARGS, FIGUUR_FUNCTION_NAME_LEN);
 8000544:	2206      	movs	r2, #6
 8000546:	2109      	movs	r1, #9
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f87b 	bl	8000644 <FL_find_args>
		break;
 800054e:	e022      	b.n	8000596 <FL_uart_decode+0xce>

		case HERHAAL_FUNCTION_NO: FL_find_args(function_number, HERHAAL_ARGS, HERHAAL_FUNCTION_NAME_LEN);
 8000550:	2207      	movs	r2, #7
 8000552:	2102      	movs	r1, #2
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 f875 	bl	8000644 <FL_find_args>
		break;
 800055a:	e01c      	b.n	8000596 <FL_uart_decode+0xce>

		case LIJN_FUNCTION_NO: FL_find_args(function_number, LIJN_ARGS, LIJN_FUNCTION_NAME_LEN);
 800055c:	2204      	movs	r2, #4
 800055e:	2106      	movs	r1, #6
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 f86f 	bl	8000644 <FL_find_args>
		break;
 8000566:	e016      	b.n	8000596 <FL_uart_decode+0xce>

		case RECHTHOEK_FUNCTION_NO: FL_find_args(function_number, RECHTHOEK_ARGS, RECHTHOEK_FUNCTION_NAME_LEN);
 8000568:	2209      	movs	r2, #9
 800056a:	2106      	movs	r1, #6
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f000 f869 	bl	8000644 <FL_find_args>
		break;
 8000572:	e010      	b.n	8000596 <FL_uart_decode+0xce>

		case TEKST_FUNCTION_NO: FL_find_args(function_number, TEKST_ARGS, TEKST_FUNCTION_NAME_LEN);
 8000574:	2205      	movs	r2, #5
 8000576:	2106      	movs	r1, #6
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 f863 	bl	8000644 <FL_find_args>
		break;
 800057e:	e00a      	b.n	8000596 <FL_uart_decode+0xce>

		case WACHT_FUNCTION_NO: FL_find_args(function_number, WACHT_ARGS, WACHT_FUNCTION_NAME_LEN);
 8000580:	2205      	movs	r2, #5
 8000582:	2101      	movs	r1, #1
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f85d 	bl	8000644 <FL_find_args>
		break;
 800058a:	e004      	b.n	8000596 <FL_uart_decode+0xce>

		default : FL_error_handler("Did not recognise function number, line 77");
 800058c:	4806      	ldr	r0, [pc, #24]	; (80005a8 <FL_uart_decode+0xe0>)
 800058e:	f000 fba1 	bl	8000cd4 <FL_error_handler>
	}

}
 8000592:	e000      	b.n	8000596 <FL_uart_decode+0xce>
		break;
 8000594:	bf00      	nop
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	08004b98 	.word	0x08004b98
 80005a4:	20000608 	.word	0x20000608
 80005a8:	08004bc4 	.word	0x08004bc4

080005ac <FL_find_decode_nr>:

int FL_find_decode_nr()
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	if(input.line_rx_buffer[0] == LETTERB) return BITMAP_FUNCTION_NO;
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <FL_find_decode_nr+0x94>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	2b62      	cmp	r3, #98	; 0x62
 80005b6:	d101      	bne.n	80005bc <FL_find_decode_nr+0x10>
 80005b8:	2301      	movs	r3, #1
 80005ba:	e03c      	b.n	8000636 <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERC)
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <FL_find_decode_nr+0x94>)
 80005be:	785b      	ldrb	r3, [r3, #1]
 80005c0:	2b63      	cmp	r3, #99	; 0x63
 80005c2:	d107      	bne.n	80005d4 <FL_find_decode_nr+0x28>
	{
		if(input.line_rx_buffer[1] == LETTERL) return CLEARSCHERM_FUNCTION_NO;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <FL_find_decode_nr+0x94>)
 80005c6:	789b      	ldrb	r3, [r3, #2]
 80005c8:	2b6c      	cmp	r3, #108	; 0x6c
 80005ca:	d101      	bne.n	80005d0 <FL_find_decode_nr+0x24>
 80005cc:	2303      	movs	r3, #3
 80005ce:	e032      	b.n	8000636 <FL_find_decode_nr+0x8a>
		else return CIRKEL_FUNCTION_NO;
 80005d0:	2302      	movs	r3, #2
 80005d2:	e030      	b.n	8000636 <FL_find_decode_nr+0x8a>
	}

	if(input.line_rx_buffer[0] == LETTERE) return EXECUTE_FUNCTION_NO;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <FL_find_decode_nr+0x94>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	2b65      	cmp	r3, #101	; 0x65
 80005da:	d101      	bne.n	80005e0 <FL_find_decode_nr+0x34>
 80005dc:	2304      	movs	r3, #4
 80005de:	e02a      	b.n	8000636 <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERF) return FIGUUR_FUNCTION_NO;
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <FL_find_decode_nr+0x94>)
 80005e2:	785b      	ldrb	r3, [r3, #1]
 80005e4:	2b66      	cmp	r3, #102	; 0x66
 80005e6:	d101      	bne.n	80005ec <FL_find_decode_nr+0x40>
 80005e8:	2305      	movs	r3, #5
 80005ea:	e024      	b.n	8000636 <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERH) return HERHAAL_FUNCTION_NO;
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <FL_find_decode_nr+0x94>)
 80005ee:	785b      	ldrb	r3, [r3, #1]
 80005f0:	2b68      	cmp	r3, #104	; 0x68
 80005f2:	d101      	bne.n	80005f8 <FL_find_decode_nr+0x4c>
 80005f4:	2306      	movs	r3, #6
 80005f6:	e01e      	b.n	8000636 <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERL) return LIJN_FUNCTION_NO;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <FL_find_decode_nr+0x94>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	2b6c      	cmp	r3, #108	; 0x6c
 80005fe:	d101      	bne.n	8000604 <FL_find_decode_nr+0x58>
 8000600:	2307      	movs	r3, #7
 8000602:	e018      	b.n	8000636 <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERR) return RECHTHOEK_FUNCTION_NO;
 8000604:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <FL_find_decode_nr+0x94>)
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	2b72      	cmp	r3, #114	; 0x72
 800060a:	d101      	bne.n	8000610 <FL_find_decode_nr+0x64>
 800060c:	2308      	movs	r3, #8
 800060e:	e012      	b.n	8000636 <FL_find_decode_nr+0x8a>

	if(input.line_rx_buffer[0] == LETTERT)
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <FL_find_decode_nr+0x94>)
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	2b74      	cmp	r3, #116	; 0x74
 8000616:	d107      	bne.n	8000628 <FL_find_decode_nr+0x7c>
	{
		if(input.line_rx_buffer[1] == LETTERE) return TEKST_FUNCTION_NO;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <FL_find_decode_nr+0x94>)
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	2b65      	cmp	r3, #101	; 0x65
 800061e:	d101      	bne.n	8000624 <FL_find_decode_nr+0x78>
 8000620:	2309      	movs	r3, #9
 8000622:	e008      	b.n	8000636 <FL_find_decode_nr+0x8a>
		else return TOREN_FUNCTION_NO;
 8000624:	230a      	movs	r3, #10
 8000626:	e006      	b.n	8000636 <FL_find_decode_nr+0x8a>
	}

	if(input.line_rx_buffer[0] == LETTERW) return WACHT_FUNCTION_NO;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <FL_find_decode_nr+0x94>)
 800062a:	785b      	ldrb	r3, [r3, #1]
 800062c:	2b77      	cmp	r3, #119	; 0x77
 800062e:	d101      	bne.n	8000634 <FL_find_decode_nr+0x88>
 8000630:	230b      	movs	r3, #11
 8000632:	e000      	b.n	8000636 <FL_find_decode_nr+0x8a>

	return FUNCTION_NO_RESET;
 8000634:	2300      	movs	r3, #0

}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	200001f8 	.word	0x200001f8

08000644 <FL_find_args>:

void FL_find_args(int function_number, int num_args, int len_function_name)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08e      	sub	sp, #56	; 0x38
 8000648:	af02      	add	r7, sp, #8
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
	if(function_number != TEKST_FUNCTION_NO)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b09      	cmp	r3, #9
 8000654:	f000 808c 	beq.w	8000770 <FL_find_args+0x12c>
	{
		char string_container[MAX_ARG_LEN]; //ook resetten
		int k;
		for(k = 0; k < MAX_ARG_LEN; k++) string_container[k] = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800065c:	e008      	b.n	8000670 <FL_find_args+0x2c>
 800065e:	f107 0210 	add.w	r2, r7, #16
 8000662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000664:	4413      	add	r3, r2
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066c:	3301      	adds	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000672:	2b09      	cmp	r3, #9
 8000674:	ddf3      	ble.n	800065e <FL_find_args+0x1a>
		int arg_character_counter = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
		char stored_args = 0; // Counts how many arguments are stored. is incremented after successfully storing an arg
 800067a:	2300      	movs	r3, #0
 800067c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		//als er een spatie voor de erste komma zit werkt dit niet
		//Begin een loop die breekt bijd e eerste komma, de plaats waar die breekt stop je in i
		int i = len_function_name; // Start at the first comma
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	623b      	str	r3, [r7, #32]
		int argcounter = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

		while(i <= input.msglen)
 8000688:	e05b      	b.n	8000742 <FL_find_args+0xfe>
		{
			if(input.line_rx_buffer[i] == ',')
 800068a:	4a3b      	ldr	r2, [pc, #236]	; (8000778 <FL_find_args+0x134>)
 800068c:	6a3b      	ldr	r3, [r7, #32]
 800068e:	4413      	add	r3, r2
 8000690:	3301      	adds	r3, #1
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b2c      	cmp	r3, #44	; 0x2c
 8000696:	d130      	bne.n	80006fa <FL_find_args+0xb6>
			{

				if(stored_args != 0) // Dit is niet de eerste komma dus
 8000698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800069c:	2b00      	cmp	r3, #0
 800069e:	d024      	beq.n	80006ea <FL_find_args+0xa6>
				{
					// convert the stored string()
					FL_convert_args(string_container, arg_character_counter, num_args, stored_args, ++argcounter);
 80006a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	3301      	adds	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
 80006aa:	f107 0010 	add.w	r0, r7, #16
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	4613      	mov	r3, r2
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80006b8:	f000 f862 	bl	8000780 <FL_convert_args>
//					FL_convert_args(string_container, arg_character_counter, num_args, arg_num++);
					// reset string container
					for(k = 0; k < MAX_ARG_LEN; k++) string_container[k] = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c0:	e008      	b.n	80006d4 <FL_find_args+0x90>
 80006c2:	f107 0210 	add.w	r2, r7, #16
 80006c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c8:	4413      	add	r3, r2
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d0:	3301      	adds	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d6:	2b09      	cmp	r3, #9
 80006d8:	ddf3      	ble.n	80006c2 <FL_find_args+0x7e>
					arg_character_counter = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
					stored_args++;
 80006de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e2:	3301      	adds	r3, #1
 80006e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006e8:	e004      	b.n	80006f4 <FL_find_args+0xb0>
				}
				else stored_args++;
 80006ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006ee:	3301      	adds	r3, #1
 80006f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				i++;
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	3301      	adds	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
			}
			if(input.line_rx_buffer[i] == ' ')
 80006fa:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <FL_find_args+0x134>)
 80006fc:	6a3b      	ldr	r3, [r7, #32]
 80006fe:	4413      	add	r3, r2
 8000700:	3301      	adds	r3, #1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b20      	cmp	r3, #32
 8000706:	d103      	bne.n	8000710 <FL_find_args+0xcc>
				i++;
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	3301      	adds	r3, #1
 800070c:	623b      	str	r3, [r7, #32]
 800070e:	e018      	b.n	8000742 <FL_find_args+0xfe>
			else
			{
				if(input.line_rx_buffer[i] == ',')
 8000710:	4a19      	ldr	r2, [pc, #100]	; (8000778 <FL_find_args+0x134>)
 8000712:	6a3b      	ldr	r3, [r7, #32]
 8000714:	4413      	add	r3, r2
 8000716:	3301      	adds	r3, #1
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b2c      	cmp	r3, #44	; 0x2c
 800071c:	d103      	bne.n	8000726 <FL_find_args+0xe2>
					FL_error_handler("Argument not filled, line 150");
 800071e:	4817      	ldr	r0, [pc, #92]	; (800077c <FL_find_args+0x138>)
 8000720:	f000 fad8 	bl	8000cd4 <FL_error_handler>
 8000724:	e00d      	b.n	8000742 <FL_find_args+0xfe>
				else
				{
					string_container[arg_character_counter++] = input.line_rx_buffer[i++];
 8000726:	6a3a      	ldr	r2, [r7, #32]
 8000728:	1c53      	adds	r3, r2, #1
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072e:	1c59      	adds	r1, r3, #1
 8000730:	62b9      	str	r1, [r7, #40]	; 0x28
 8000732:	4911      	ldr	r1, [pc, #68]	; (8000778 <FL_find_args+0x134>)
 8000734:	440a      	add	r2, r1
 8000736:	7852      	ldrb	r2, [r2, #1]
 8000738:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800073c:	440b      	add	r3, r1
 800073e:	f803 2c20 	strb.w	r2, [r3, #-32]
		while(i <= input.msglen)
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <FL_find_args+0x134>)
 8000744:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000748:	6a3a      	ldr	r2, [r7, #32]
 800074a:	429a      	cmp	r2, r3
 800074c:	dd9d      	ble.n	800068a <FL_find_args+0x46>
				}
			}


		}
		FL_convert_args(string_container, --arg_character_counter, num_args, stored_args, ++argcounter);
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	3b01      	subs	r3, #1
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
 8000754:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	3301      	adds	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
 800075e:	f107 0010 	add.w	r0, r7, #16
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	4613      	mov	r3, r2
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800076c:	f000 f808 	bl	8000780 <FL_convert_args>
	}
	else
	{

	}
}
 8000770:	bf00      	nop
 8000772:	3730      	adds	r7, #48	; 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200001f8 	.word	0x200001f8
 800077c:	08004bf0 	.word	0x08004bf0

08000780 <FL_convert_args>:

void FL_convert_args(char arg_array[], int num_chars, int num_args, int stored_args, int argcounter)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	603b      	str	r3, [r7, #0]
	switch(command.function_number)
 800078e:	4baf      	ldr	r3, [pc, #700]	; (8000a4c <FL_convert_args+0x2cc>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3b01      	subs	r3, #1
 8000794:	2b0a      	cmp	r3, #10
 8000796:	f200 81d2 	bhi.w	8000b3e <FL_convert_args+0x3be>
 800079a:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <FL_convert_args+0x20>)
 800079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a0:	080007cd 	.word	0x080007cd
 80007a4:	0800080d 	.word	0x0800080d
 80007a8:	0800086d 	.word	0x0800086d
 80007ac:	08000b3f 	.word	0x08000b3f
 80007b0:	0800087d 	.word	0x0800087d
 80007b4:	0800096b 	.word	0x0800096b
 80007b8:	08000995 	.word	0x08000995
 80007bc:	08000a25 	.word	0x08000a25
 80007c0:	08000b3f 	.word	0x08000b3f
 80007c4:	08000ab1 	.word	0x08000ab1
 80007c8:	08000b2f 	.word	0x08000b2f
	{
		case BITMAP_FUNCTION_NO:
		{
			switch(argcounter)
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d00b      	beq.n	80007ea <FL_convert_args+0x6a>
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d011      	beq.n	80007fa <FL_convert_args+0x7a>
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d000      	beq.n	80007dc <FL_convert_args+0x5c>

				case 3: command.bitmap.ylup = atoi(arg_array); break;

//				default: FL_error_handler("Illegal stored_args value, line 209");//Error_Handler();
			}
		}break;
 80007da:	e1bd      	b.n	8000b58 <FL_convert_args+0x3d8>
				case 1:	command.bitmap.nr = atoi(arg_array); break;
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f004 f8eb 	bl	80049b8 <atoi>
 80007e2:	4602      	mov	r2, r0
 80007e4:	4b99      	ldr	r3, [pc, #612]	; (8000a4c <FL_convert_args+0x2cc>)
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	e00f      	b.n	800080a <FL_convert_args+0x8a>
				case 2: command.bitmap.xlup = atoi(arg_array); break;
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	f004 f8e4 	bl	80049b8 <atoi>
 80007f0:	4603      	mov	r3, r0
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b95      	ldr	r3, [pc, #596]	; (8000a4c <FL_convert_args+0x2cc>)
 80007f6:	811a      	strh	r2, [r3, #8]
 80007f8:	e007      	b.n	800080a <FL_convert_args+0x8a>
				case 3: command.bitmap.ylup = atoi(arg_array); break;
 80007fa:	68f8      	ldr	r0, [r7, #12]
 80007fc:	f004 f8dc 	bl	80049b8 <atoi>
 8000800:	4603      	mov	r3, r0
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b91      	ldr	r3, [pc, #580]	; (8000a4c <FL_convert_args+0x2cc>)
 8000806:	815a      	strh	r2, [r3, #10]
 8000808:	bf00      	nop
		}break;
 800080a:	e1a5      	b.n	8000b58 <FL_convert_args+0x3d8>

		case CIRKEL_FUNCTION_NO:
		{
			switch(argcounter)
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	3b01      	subs	r3, #1
 8000810:	2b03      	cmp	r3, #3
 8000812:	f200 8198 	bhi.w	8000b46 <FL_convert_args+0x3c6>
 8000816:	a201      	add	r2, pc, #4	; (adr r2, 800081c <FL_convert_args+0x9c>)
 8000818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081c:	0800082d 	.word	0x0800082d
 8000820:	0800083d 	.word	0x0800083d
 8000824:	0800084d 	.word	0x0800084d
 8000828:	0800085b 	.word	0x0800085b
			{
			case 1: command.cirkel.x = atoi(arg_array); break;
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f004 f8c3 	bl	80049b8 <atoi>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	4b85      	ldr	r3, [pc, #532]	; (8000a4c <FL_convert_args+0x2cc>)
 8000838:	819a      	strh	r2, [r3, #12]
 800083a:	e016      	b.n	800086a <FL_convert_args+0xea>
			case 2: command.cirkel.y = atoi(arg_array); break;
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f004 f8bb 	bl	80049b8 <atoi>
 8000842:	4603      	mov	r3, r0
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b81      	ldr	r3, [pc, #516]	; (8000a4c <FL_convert_args+0x2cc>)
 8000848:	81da      	strh	r2, [r3, #14]
 800084a:	e00e      	b.n	800086a <FL_convert_args+0xea>
			case 3: command.cirkel.radius = atoi(arg_array); break;
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f004 f8b3 	bl	80049b8 <atoi>
 8000852:	4602      	mov	r2, r0
 8000854:	4b7d      	ldr	r3, [pc, #500]	; (8000a4c <FL_convert_args+0x2cc>)
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	e007      	b.n	800086a <FL_convert_args+0xea>
			case 4: command.cirkel.kleur = FL_find_color(arg_array); break;
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f000 f984 	bl	8000b68 <FL_find_color>
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	4b79      	ldr	r3, [pc, #484]	; (8000a4c <FL_convert_args+0x2cc>)
 8000866:	615a      	str	r2, [r3, #20]
 8000868:	bf00      	nop
//			default: FL_error_handler("Illegal stored_args value, line 221");//Error_Handler();
			}
		}break;
 800086a:	e16c      	b.n	8000b46 <FL_convert_args+0x3c6>

		case CLEARSCHERM_FUNCTION_NO: command.clearscherm.kleur = FL_find_color(arg_array); break;
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f000 f97b 	bl	8000b68 <FL_find_color>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b75      	ldr	r3, [pc, #468]	; (8000a4c <FL_convert_args+0x2cc>)
 8000878:	619a      	str	r2, [r3, #24]
 800087a:	e16d      	b.n	8000b58 <FL_convert_args+0x3d8>
//		{
//
//		}break;
		case FIGUUR_FUNCTION_NO:
		{
			switch(argcounter)
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	3b01      	subs	r3, #1
 8000880:	2b0a      	cmp	r3, #10
 8000882:	f200 8162 	bhi.w	8000b4a <FL_convert_args+0x3ca>
 8000886:	a201      	add	r2, pc, #4	; (adr r2, 800088c <FL_convert_args+0x10c>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008b9 	.word	0x080008b9
 8000890:	080008c9 	.word	0x080008c9
 8000894:	080008d9 	.word	0x080008d9
 8000898:	080008e9 	.word	0x080008e9
 800089c:	080008f9 	.word	0x080008f9
 80008a0:	08000909 	.word	0x08000909
 80008a4:	08000919 	.word	0x08000919
 80008a8:	08000929 	.word	0x08000929
 80008ac:	08000939 	.word	0x08000939
 80008b0:	08000949 	.word	0x08000949
 80008b4:	08000959 	.word	0x08000959
			{
			case 1: command.figuur.x1 = atoi(arg_array); break;
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f004 f87d 	bl	80049b8 <atoi>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b62      	ldr	r3, [pc, #392]	; (8000a4c <FL_convert_args+0x2cc>)
 80008c4:	841a      	strh	r2, [r3, #32]
 80008c6:	e04f      	b.n	8000968 <FL_convert_args+0x1e8>
			case 2: command.figuur.y1 = atoi(arg_array); break;
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f004 f875 	bl	80049b8 <atoi>
 80008ce:	4603      	mov	r3, r0
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b5e      	ldr	r3, [pc, #376]	; (8000a4c <FL_convert_args+0x2cc>)
 80008d4:	845a      	strh	r2, [r3, #34]	; 0x22
 80008d6:	e047      	b.n	8000968 <FL_convert_args+0x1e8>
			case 3: command.figuur.x2 = atoi(arg_array); break;
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f004 f86d 	bl	80049b8 <atoi>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	4b5a      	ldr	r3, [pc, #360]	; (8000a4c <FL_convert_args+0x2cc>)
 80008e4:	849a      	strh	r2, [r3, #36]	; 0x24
 80008e6:	e03f      	b.n	8000968 <FL_convert_args+0x1e8>
			case 4: command.figuur.y2 = atoi(arg_array); break;
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f004 f865 	bl	80049b8 <atoi>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	4b56      	ldr	r3, [pc, #344]	; (8000a4c <FL_convert_args+0x2cc>)
 80008f4:	84da      	strh	r2, [r3, #38]	; 0x26
 80008f6:	e037      	b.n	8000968 <FL_convert_args+0x1e8>
			case 5: command.figuur.x3 = atoi(arg_array); break;
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	f004 f85d 	bl	80049b8 <atoi>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b52      	ldr	r3, [pc, #328]	; (8000a4c <FL_convert_args+0x2cc>)
 8000904:	851a      	strh	r2, [r3, #40]	; 0x28
 8000906:	e02f      	b.n	8000968 <FL_convert_args+0x1e8>
			case 6: command.figuur.y3 = atoi(arg_array); break;
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f004 f855 	bl	80049b8 <atoi>
 800090e:	4603      	mov	r3, r0
 8000910:	b29a      	uxth	r2, r3
 8000912:	4b4e      	ldr	r3, [pc, #312]	; (8000a4c <FL_convert_args+0x2cc>)
 8000914:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000916:	e027      	b.n	8000968 <FL_convert_args+0x1e8>
			case 7: command.figuur.x4 = atoi(arg_array); break;
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f004 f84d 	bl	80049b8 <atoi>
 800091e:	4603      	mov	r3, r0
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b4a      	ldr	r3, [pc, #296]	; (8000a4c <FL_convert_args+0x2cc>)
 8000924:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000926:	e01f      	b.n	8000968 <FL_convert_args+0x1e8>
			case 8: command.figuur.y4 = atoi(arg_array); break;
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f004 f845 	bl	80049b8 <atoi>
 800092e:	4603      	mov	r3, r0
 8000930:	b29a      	uxth	r2, r3
 8000932:	4b46      	ldr	r3, [pc, #280]	; (8000a4c <FL_convert_args+0x2cc>)
 8000934:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000936:	e017      	b.n	8000968 <FL_convert_args+0x1e8>
			case 9: command.figuur.x5 = atoi(arg_array); break;
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f004 f83d 	bl	80049b8 <atoi>
 800093e:	4603      	mov	r3, r0
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b42      	ldr	r3, [pc, #264]	; (8000a4c <FL_convert_args+0x2cc>)
 8000944:	861a      	strh	r2, [r3, #48]	; 0x30
 8000946:	e00f      	b.n	8000968 <FL_convert_args+0x1e8>
			case 10: command.figuur.y5 = atoi(arg_array); break;
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f004 f835 	bl	80049b8 <atoi>
 800094e:	4603      	mov	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <FL_convert_args+0x2cc>)
 8000954:	865a      	strh	r2, [r3, #50]	; 0x32
 8000956:	e007      	b.n	8000968 <FL_convert_args+0x1e8>
			case 11: command.figuur.kleur = FL_find_color(arg_array); break;
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f000 f905 	bl	8000b68 <FL_find_color>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b3a      	ldr	r3, [pc, #232]	; (8000a4c <FL_convert_args+0x2cc>)
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
 8000966:	bf00      	nop
//			default: FL_error_handler("Illegal stored_args value, line 247");
			}
		}break;
 8000968:	e0ef      	b.n	8000b4a <FL_convert_args+0x3ca>

		case HERHAAL_FUNCTION_NO:
		{
			switch(argcounter)
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d002      	beq.n	8000976 <FL_convert_args+0x1f6>
 8000970:	2b02      	cmp	r3, #2
 8000972:	d007      	beq.n	8000984 <FL_convert_args+0x204>
			{
			case 1: command.herhaal.aantal = atoi(arg_array); break;
			case 2: command.herhaal.hoevaak = atoi(arg_array); break;
//			default: Error_Handler();//FL_error_handler("Illegal stored_args value, line 257");
			}
		}break;
 8000974:	e0f0      	b.n	8000b58 <FL_convert_args+0x3d8>
			case 1: command.herhaal.aantal = atoi(arg_array); break;
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f004 f81e 	bl	80049b8 <atoi>
 800097c:	4602      	mov	r2, r0
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <FL_convert_args+0x2cc>)
 8000980:	639a      	str	r2, [r3, #56]	; 0x38
 8000982:	e006      	b.n	8000992 <FL_convert_args+0x212>
			case 2: command.herhaal.hoevaak = atoi(arg_array); break;
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f004 f817 	bl	80049b8 <atoi>
 800098a:	4602      	mov	r2, r0
 800098c:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <FL_convert_args+0x2cc>)
 800098e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000990:	bf00      	nop
		}break;
 8000992:	e0e1      	b.n	8000b58 <FL_convert_args+0x3d8>

		case LIJN_FUNCTION_NO:
		{
			switch(argcounter)
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	3b01      	subs	r3, #1
 8000998:	2b05      	cmp	r3, #5
 800099a:	f200 80d8 	bhi.w	8000b4e <FL_convert_args+0x3ce>
 800099e:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <FL_convert_args+0x224>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	080009bd 	.word	0x080009bd
 80009a8:	080009cf 	.word	0x080009cf
 80009ac:	080009e1 	.word	0x080009e1
 80009b0:	080009f3 	.word	0x080009f3
 80009b4:	08000a05 	.word	0x08000a05
 80009b8:	08000a15 	.word	0x08000a15
			{
			case 1: command.lijn.x1 = atoi(arg_array); break;
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f003 fffb 	bl	80049b8 <atoi>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <FL_convert_args+0x2cc>)
 80009c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80009cc:	e029      	b.n	8000a22 <FL_convert_args+0x2a2>
			case 2: command.lijn.y1 = atoi(arg_array); break;
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f003 fff2 	bl	80049b8 <atoi>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <FL_convert_args+0x2cc>)
 80009da:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80009de:	e020      	b.n	8000a22 <FL_convert_args+0x2a2>
			case 3: command.lijn.x2 = atoi(arg_array); break;
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f003 ffe9 	bl	80049b8 <atoi>
 80009e6:	4603      	mov	r3, r0
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <FL_convert_args+0x2cc>)
 80009ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80009f0:	e017      	b.n	8000a22 <FL_convert_args+0x2a2>
			case 4: command.lijn.y2 = atoi(arg_array); break;
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f003 ffe0 	bl	80049b8 <atoi>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <FL_convert_args+0x2cc>)
 80009fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8000a02:	e00e      	b.n	8000a22 <FL_convert_args+0x2a2>
			case 5: command.lijn.kleur = FL_find_color(arg_array); break;
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f000 f8af 	bl	8000b68 <FL_find_color>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <FL_convert_args+0x2cc>)
 8000a10:	649a      	str	r2, [r3, #72]	; 0x48
 8000a12:	e006      	b.n	8000a22 <FL_convert_args+0x2a2>
			case 6: command.lijn.dikte = atoi(arg_array); break;
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f003 ffcf 	bl	80049b8 <atoi>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <FL_convert_args+0x2cc>)
 8000a1e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a20:	bf00      	nop
//			default: FL_error_handler("Illegal stored_args value, line 271");
			}
		}break;
 8000a22:	e094      	b.n	8000b4e <FL_convert_args+0x3ce>
		case RECHTHOEK_FUNCTION_NO:
		{
			switch(argcounter)
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	2b05      	cmp	r3, #5
 8000a2a:	f200 8092 	bhi.w	8000b52 <FL_convert_args+0x3d2>
 8000a2e:	a201      	add	r2, pc, #4	; (adr r2, 8000a34 <FL_convert_args+0x2b4>)
 8000a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a34:	08000a51 	.word	0x08000a51
 8000a38:	08000a63 	.word	0x08000a63
 8000a3c:	08000a75 	.word	0x08000a75
 8000a40:	08000a83 	.word	0x08000a83
 8000a44:	08000a91 	.word	0x08000a91
 8000a48:	08000aa1 	.word	0x08000aa1
 8000a4c:	20000608 	.word	0x20000608
			{
			case 1: command.rechthoek.xlup = atoi(arg_array); break;
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f003 ffb1 	bl	80049b8 <atoi>
 8000a56:	4603      	mov	r3, r0
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b41      	ldr	r3, [pc, #260]	; (8000b60 <FL_convert_args+0x3e0>)
 8000a5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8000a60:	e025      	b.n	8000aae <FL_convert_args+0x32e>
			case 2: command.rechthoek.ylup = atoi(arg_array); break;
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f003 ffa8 	bl	80049b8 <atoi>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b3c      	ldr	r3, [pc, #240]	; (8000b60 <FL_convert_args+0x3e0>)
 8000a6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8000a72:	e01c      	b.n	8000aae <FL_convert_args+0x32e>
			case 3: command.rechthoek.breedte = atoi(arg_array); break;
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f003 ff9f 	bl	80049b8 <atoi>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <FL_convert_args+0x3e0>)
 8000a7e:	655a      	str	r2, [r3, #84]	; 0x54
 8000a80:	e015      	b.n	8000aae <FL_convert_args+0x32e>
			case 4: command.rechthoek.hoogte = atoi(arg_array); break;
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f003 ff98 	bl	80049b8 <atoi>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <FL_convert_args+0x3e0>)
 8000a8c:	659a      	str	r2, [r3, #88]	; 0x58
 8000a8e:	e00e      	b.n	8000aae <FL_convert_args+0x32e>
			case 5: command.rechthoek.kleur = FL_find_color(arg_array); break;
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f000 f869 	bl	8000b68 <FL_find_color>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <FL_convert_args+0x3e0>)
 8000a9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a9e:	e006      	b.n	8000aae <FL_convert_args+0x32e>
			case 6: command.rechthoek.gevuld = atoi(arg_array); break;
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f003 ff89 	bl	80049b8 <atoi>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <FL_convert_args+0x3e0>)
 8000aaa:	661a      	str	r2, [r3, #96]	; 0x60
 8000aac:	bf00      	nop
//			default: FL_error_handler("Illegal stored_args value, line 284");
			}
		}break;
 8000aae:	e050      	b.n	8000b52 <FL_convert_args+0x3d2>
//			case 3: strcpy(command.tekst.tekst, arg_array); break;
//			}
//		}break;
		case TOREN_FUNCTION_NO:
		{
			switch(argcounter)
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d84e      	bhi.n	8000b56 <FL_convert_args+0x3d6>
 8000ab8:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <FL_convert_args+0x340>)
 8000aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000ad5 	.word	0x08000ad5
 8000ac4:	08000ae7 	.word	0x08000ae7
 8000ac8:	08000af9 	.word	0x08000af9
 8000acc:	08000b09 	.word	0x08000b09
 8000ad0:	08000b1b 	.word	0x08000b1b
			{
			case 1: command.toren.x1 = atoi(arg_array); break;
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f003 ff6f 	bl	80049b8 <atoi>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <FL_convert_args+0x3e0>)
 8000ae0:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8000ae4:	e022      	b.n	8000b2c <FL_convert_args+0x3ac>
			case 2: command.toren.y1 = atoi(arg_array); break;
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f003 ff66 	bl	80049b8 <atoi>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <FL_convert_args+0x3e0>)
 8000af2:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8000af6:	e019      	b.n	8000b2c <FL_convert_args+0x3ac>
			case 3: command.toren.grootte = atoi(arg_array); break;
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f003 ff5d 	bl	80049b8 <atoi>
 8000afe:	4602      	mov	r2, r0
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <FL_convert_args+0x3e0>)
 8000b02:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8000b06:	e011      	b.n	8000b2c <FL_convert_args+0x3ac>
			case 4: command.toren.kleur1 = FL_find_color(arg_array); break;
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f000 f82d 	bl	8000b68 <FL_find_color>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <FL_convert_args+0x3e0>)
 8000b14:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8000b18:	e008      	b.n	8000b2c <FL_convert_args+0x3ac>
			case 5: command.toren.kleur2 = FL_find_color(arg_array); break;
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f000 f824 	bl	8000b68 <FL_find_color>
 8000b20:	4603      	mov	r3, r0
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <FL_convert_args+0x3e0>)
 8000b26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000b2a:	bf00      	nop
//			default: FL_error_handler("Illegal stored_args value, line 306");
			}
		}break;
 8000b2c:	e013      	b.n	8000b56 <FL_convert_args+0x3d6>

		case WACHT_FUNCTION_NO: command.wacht.msecs = atoi(arg_array); break;
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f003 ff42 	bl	80049b8 <atoi>
 8000b34:	4602      	mov	r2, r0
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <FL_convert_args+0x3e0>)
 8000b38:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000b3c:	e00c      	b.n	8000b58 <FL_convert_args+0x3d8>

		default : FL_error_handler("Did not recognise function number, line 312");
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <FL_convert_args+0x3e4>)
 8000b40:	f000 f8c8 	bl	8000cd4 <FL_error_handler>
//	{
//		container[temp++] = arg_array[i];
//	}

//*/
}
 8000b44:	e008      	b.n	8000b58 <FL_convert_args+0x3d8>
		}break;
 8000b46:	bf00      	nop
 8000b48:	e006      	b.n	8000b58 <FL_convert_args+0x3d8>
		}break;
 8000b4a:	bf00      	nop
 8000b4c:	e004      	b.n	8000b58 <FL_convert_args+0x3d8>
		}break;
 8000b4e:	bf00      	nop
 8000b50:	e002      	b.n	8000b58 <FL_convert_args+0x3d8>
		}break;
 8000b52:	bf00      	nop
 8000b54:	e000      	b.n	8000b58 <FL_convert_args+0x3d8>
		}break;
 8000b56:	bf00      	nop
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000608 	.word	0x20000608
 8000b64:	08004c10 	.word	0x08004c10

08000b68 <FL_find_color>:

uint8_t FL_find_color(char color[])
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	/*
	 * hmm
	 */
	int ret_val;
	switch(color[0])
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3b62      	subs	r3, #98	; 0x62
 8000b76:	2b18      	cmp	r3, #24
 8000b78:	f200 80a1 	bhi.w	8000cbe <FL_find_color+0x156>
 8000b7c:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <FL_find_color+0x1c>)
 8000b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b82:	bf00      	nop
 8000b84:	08000be9 	.word	0x08000be9
 8000b88:	08000bff 	.word	0x08000bff
 8000b8c:	08000cbf 	.word	0x08000cbf
 8000b90:	08000cbf 	.word	0x08000cbf
 8000b94:	08000cbf 	.word	0x08000cbf
 8000b98:	08000c05 	.word	0x08000c05
 8000b9c:	08000cbf 	.word	0x08000cbf
 8000ba0:	08000cbf 	.word	0x08000cbf
 8000ba4:	08000cbf 	.word	0x08000cbf
 8000ba8:	08000cbf 	.word	0x08000cbf
 8000bac:	08000c2b 	.word	0x08000c2b
 8000bb0:	08000ca7 	.word	0x08000ca7
 8000bb4:	08000cbf 	.word	0x08000cbf
 8000bb8:	08000cbf 	.word	0x08000cbf
 8000bbc:	08000cbf 	.word	0x08000cbf
 8000bc0:	08000cbf 	.word	0x08000cbf
 8000bc4:	08000cad 	.word	0x08000cad
 8000bc8:	08000cbf 	.word	0x08000cbf
 8000bcc:	08000cbf 	.word	0x08000cbf
 8000bd0:	08000cbf 	.word	0x08000cbf
 8000bd4:	08000cbf 	.word	0x08000cbf
 8000bd8:	08000cb3 	.word	0x08000cb3
 8000bdc:	08000cbf 	.word	0x08000cbf
 8000be0:	08000cbf 	.word	0x08000cbf
 8000be4:	08000cb9 	.word	0x08000cb9
	{
	case LETTERB:{
		if(color[1] == LETTERL) ret_val = VGA_COL_BLUE;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3301      	adds	r3, #1
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b6c      	cmp	r3, #108	; 0x6c
 8000bf0:	d102      	bne.n	8000bf8 <FL_find_color+0x90>
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	60fb      	str	r3, [r7, #12]
		else ret_val = VGA_COL_BROWN;
	}break;
 8000bf6:	e064      	b.n	8000cc2 <FL_find_color+0x15a>
		else ret_val = VGA_COL_BROWN;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
	}break;
 8000bfc:	e061      	b.n	8000cc2 <FL_find_color+0x15a>

	case LETTERC: ret_val = VGA_COL_CYAN; break;
 8000bfe:	231f      	movs	r3, #31
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	e05e      	b.n	8000cc2 <FL_find_color+0x15a>

	case LETTERG:
	{
		if(color[1] == LETTERE) ret_val = VGA_COL_YELLOW;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b65      	cmp	r3, #101	; 0x65
 8000c0c:	d102      	bne.n	8000c14 <FL_find_color+0xac>
 8000c0e:	23fc      	movs	r3, #252	; 0xfc
 8000c10:	60fb      	str	r3, [r7, #12]
		else {
			if(color[2] == LETTERI) ret_val = VGA_COL_GREY;
			else ret_val = VGA_COL_GREEN;
		}
	}break;
 8000c12:	e056      	b.n	8000cc2 <FL_find_color+0x15a>
			if(color[2] == LETTERI) ret_val = VGA_COL_GREY;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3302      	adds	r3, #2
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b69      	cmp	r3, #105	; 0x69
 8000c1c:	d102      	bne.n	8000c24 <FL_find_color+0xbc>
 8000c1e:	2302      	movs	r3, #2
 8000c20:	60fb      	str	r3, [r7, #12]
	}break;
 8000c22:	e04e      	b.n	8000cc2 <FL_find_color+0x15a>
			else ret_val = VGA_COL_GREEN;
 8000c24:	231c      	movs	r3, #28
 8000c26:	60fb      	str	r3, [r7, #12]
	}break;
 8000c28:	e04b      	b.n	8000cc2 <FL_find_color+0x15a>

	case LETTERL:
	{
		switch(color[5])
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3305      	adds	r3, #5
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	3b62      	subs	r3, #98	; 0x62
 8000c32:	2b10      	cmp	r3, #16
 8000c34:	d833      	bhi.n	8000c9e <FL_find_color+0x136>
 8000c36:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <FL_find_color+0xd4>)
 8000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3c:	08000c81 	.word	0x08000c81
 8000c40:	08000c87 	.word	0x08000c87
 8000c44:	08000c9f 	.word	0x08000c9f
 8000c48:	08000c9f 	.word	0x08000c9f
 8000c4c:	08000c9f 	.word	0x08000c9f
 8000c50:	08000c8d 	.word	0x08000c8d
 8000c54:	08000c9f 	.word	0x08000c9f
 8000c58:	08000c9f 	.word	0x08000c9f
 8000c5c:	08000c9f 	.word	0x08000c9f
 8000c60:	08000c9f 	.word	0x08000c9f
 8000c64:	08000c9f 	.word	0x08000c9f
 8000c68:	08000c93 	.word	0x08000c93
 8000c6c:	08000c9f 	.word	0x08000c9f
 8000c70:	08000c9f 	.word	0x08000c9f
 8000c74:	08000c9f 	.word	0x08000c9f
 8000c78:	08000c9f 	.word	0x08000c9f
 8000c7c:	08000c99 	.word	0x08000c99
		{
		case LETTERB: ret_val = VGA_COL_LITE_BLUE; break;
 8000c80:	2303      	movs	r3, #3
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	e00e      	b.n	8000ca4 <FL_find_color+0x13c>
		case LETTERC: ret_val = VGA_COL_LITE_CYAN; break;
 8000c86:	2304      	movs	r3, #4
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	e00b      	b.n	8000ca4 <FL_find_color+0x13c>
		case LETTERG: ret_val = VGA_COL_LITE_GREEN; break;
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e008      	b.n	8000ca4 <FL_find_color+0x13c>
		case LETTERM: ret_val = VGA_COL_LITE_MAGENTA; break;
 8000c92:	2306      	movs	r3, #6
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e005      	b.n	8000ca4 <FL_find_color+0x13c>
		case LETTERR: ret_val = VGA_COL_LITE_RED; break;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	e002      	b.n	8000ca4 <FL_find_color+0x13c>
		default: ret_val = VGA_COL_BLACK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
		}
	}break;
 8000ca2:	e00e      	b.n	8000cc2 <FL_find_color+0x15a>
 8000ca4:	e00d      	b.n	8000cc2 <FL_find_color+0x15a>

	case LETTERM: ret_val = VGA_COL_MAGENTA; break;
 8000ca6:	23e3      	movs	r3, #227	; 0xe3
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	e00a      	b.n	8000cc2 <FL_find_color+0x15a>
	case LETTERR: ret_val = VGA_COL_RED; break;
 8000cac:	23e0      	movs	r3, #224	; 0xe0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	e007      	b.n	8000cc2 <FL_find_color+0x15a>
	case LETTERW: ret_val = VGA_COL_WHITE; break;
 8000cb2:	23ff      	movs	r3, #255	; 0xff
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	e004      	b.n	8000cc2 <FL_find_color+0x15a>
	case LETTERZ: ret_val = VGA_COL_BLACK; break;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	e001      	b.n	8000cc2 <FL_find_color+0x15a>

	default: ret_val = VGA_COL_BLACK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
	}

return ret_val;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	b2db      	uxtb	r3, r3
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <FL_error_handler>:


void FL_error_handler(char *pErrorString)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	while(1);
 8000cdc:	e7fe      	b.n	8000cdc <FL_error_handler+0x8>
	...

08000ce0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_DMA_Init+0x3c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <MX_DMA_Init+0x3c>)
 8000cf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_DMA_Init+0x3c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	2044      	movs	r0, #68	; 0x44
 8000d08:	f000 fe87 	bl	8001a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000d0c:	2044      	movs	r0, #68	; 0x44
 8000d0e:	f000 fea0 	bl	8001a52 <HAL_NVIC_EnableIRQ>

}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a31      	ldr	r2, [pc, #196]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin 
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000dac:	4816      	ldr	r0, [pc, #88]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000dae:	f001 fb95 	bl	80024dc <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db8:	4814      	ldr	r0, [pc, #80]	; (8000e0c <MX_GPIO_Init+0xec>)
 8000dba:	f001 fb8f 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin 
 8000dbe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000dc2:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000dd8:	f001 f9e6 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_GPIO_Init+0xec>)
 8000df6:	f001 f9d7 	bl	80021a8 <HAL_GPIO_Init>

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40020400 	.word	0x40020400

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e16:	f000 fcb3 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1a:	f000 f865 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1e:	f7ff ff7f 	bl	8000d20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e22:	f7ff ff5d 	bl	8000ce0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000e26:	f000 fa03 	bl	8001230 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e2a:	f000 fa51 	bl	80012d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e2e:	f000 fb67 	bl	8001500 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Reset line_rx buffer
  int i;
  for(i = 0; i < LINE_BUFLEN; i++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	e008      	b.n	8000e4a <main+0x3a>
	  input.line_rx_buffer[i] = 0;
 8000e38:	4a27      	ldr	r2, [pc, #156]	; (8000ed8 <main+0xc8>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3301      	adds	r3, #1
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3301      	adds	r3, #1
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e50:	dbf2      	blt.n	8000e38 <main+0x28>

  for(i = 0; i < 1024; i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	e007      	b.n	8000e68 <main+0x58>
	  container[i] = 0;
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <main+0xcc>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < 1024; i++)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3301      	adds	r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e6e:	dbf3      	blt.n	8000e58 <main+0x48>
  temp = 0;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <main+0xd0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <main+0xc8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <main+0xc8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = False;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <main+0xc8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000e8c:	f000 fbdc 	bl	8001648 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 8000e90:	20ff      	movs	r0, #255	; 0xff
 8000e92:	f000 fc2b 	bl	80016ec <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000e96:	220a      	movs	r2, #10
 8000e98:	210a      	movs	r1, #10
 8000e9a:	200a      	movs	r0, #10
 8000e9c:	f000 fc48 	bl	8001730 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 fc43 	bl	8001730 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	f240 103f 	movw	r0, #319	; 0x13f
 8000eb2:	f000 fc3d 	bl	8001730 <UB_VGA_SetPixel>

  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4907      	ldr	r1, [pc, #28]	; (8000ed8 <main+0xc8>)
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <main+0xd4>)
 8000ebc:	f002 ff6b 	bl	8003d96 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == True)
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <main+0xc8>)
 8000ec2:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000ec6:	2bff      	cmp	r3, #255	; 0xff
 8000ec8:	d1fa      	bne.n	8000ec0 <main+0xb0>
	  {
		  input.command_execute_flag = False;
 8000eca:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <main+0xc8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
//		  UB_VGA_SetPixel(10,10,VGA_COL_GREEN);
		  FL_uart_decode();
 8000ed2:	f7ff faf9 	bl	80004c8 <FL_uart_decode>
	  if(input.command_execute_flag == True)
 8000ed6:	e7f3      	b.n	8000ec0 <main+0xb0>
 8000ed8:	200001f8 	.word	0x200001f8
 8000edc:	20013410 	.word	0x20013410
 8000ee0:	20000710 	.word	0x20000710
 8000ee4:	200138f0 	.word	0x200138f0

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b094      	sub	sp, #80	; 0x50
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	2230      	movs	r2, #48	; 0x30
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 fd86 	bl	8004a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <SystemClock_Config+0xcc>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <SystemClock_Config+0xcc>)
 8000f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <SystemClock_Config+0xcc>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <SystemClock_Config+0xd0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <SystemClock_Config+0xd0>)
 8000f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <SystemClock_Config+0xd0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f44:	2301      	movs	r3, #1
 8000f46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f5c:	23a8      	movs	r3, #168	; 0xa8
 8000f5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f64:	2304      	movs	r3, #4
 8000f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 facf 	bl	8002510 <HAL_RCC_OscConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f78:	f000 f820 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f80:	2302      	movs	r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2105      	movs	r1, #5
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fd28 	bl	80029f0 <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fa6:	f000 f809 	bl	8000fbc <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3750      	adds	r7, #80	; 0x50
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40007000 	.word	0x40007000

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <HAL_MspInit+0x4c>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001070:	f000 fbd8 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800107c:	4828      	ldr	r0, [pc, #160]	; (8001120 <TIM2_IRQHandler+0xa8>)
 800107e:	f001 ffe5 	bl	800304c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <TIM2_IRQHandler+0xa8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f06f 0208 	mvn.w	r2, #8
 800108a:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <TIM2_IRQHandler+0xac>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <TIM2_IRQHandler+0xac>)
 8001096:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <TIM2_IRQHandler+0xac>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80010a0:	d905      	bls.n	80010ae <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <TIM2_IRQHandler+0xac>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 80010a8:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <TIM2_IRQHandler+0xb0>)
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <TIM2_IRQHandler+0xac>)
 80010ac:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <TIM2_IRQHandler+0xac>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d802      	bhi.n	80010bc <TIM2_IRQHandler+0x44>
 80010b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010ba:	e001      	b.n	80010c0 <TIM2_IRQHandler+0x48>
 80010bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c0:	4a1a      	ldr	r2, [pc, #104]	; (800112c <TIM2_IRQHandler+0xb4>)
 80010c2:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <TIM2_IRQHandler+0xac>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	2b23      	cmp	r3, #35	; 0x23
 80010ca:	d927      	bls.n	800111c <TIM2_IRQHandler+0xa4>
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <TIM2_IRQHandler+0xac>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	f240 2202 	movw	r2, #514	; 0x202
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d821      	bhi.n	800111c <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80010d8:	4a15      	ldr	r2, [pc, #84]	; (8001130 <TIM2_IRQHandler+0xb8>)
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <TIM2_IRQHandler+0xac>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <TIM2_IRQHandler+0xb8>)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <TIM2_IRQHandler+0xac>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <TIM2_IRQHandler+0xbc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a11      	ldr	r2, [pc, #68]	; (8001134 <TIM2_IRQHandler+0xbc>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <TIM2_IRQHandler+0xc0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <TIM2_IRQHandler+0xc0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <TIM2_IRQHandler+0xac>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <TIM2_IRQHandler+0xac>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001118:	4a02      	ldr	r2, [pc, #8]	; (8001124 <TIM2_IRQHandler+0xac>)
 800111a:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200138b0 	.word	0x200138b0
 8001124:	20000714 	.word	0x20000714
 8001128:	20000720 	.word	0x20000720
 800112c:	40020400 	.word	0x40020400
 8001130:	40026488 	.word	0x40026488
 8001134:	40010000 	.word	0x40010000
 8001138:	20013850 	.word	0x20013850

0800113c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  // Get the recieved character from the USART2 Data Register
  char uart_char = USART2->DR;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <USART2_IRQHandler+0x68>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	71fb      	strb	r3, [r7, #7]


  //This way we ignore the '\n' character
  if(uart_char != LINE_FEED)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d023      	beq.n	8001196 <USART2_IRQHandler+0x5a>
  {
	 //Check for CR and LF characters
	 if(uart_char == CARRIAGE_RETURN)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b0d      	cmp	r3, #13
 8001152:	d10e      	bne.n	8001172 <USART2_IRQHandler+0x36>
	 {
		input.command_execute_flag = True;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <USART2_IRQHandler+0x6c>)
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		// Store the message lenght for processing
		input.msglen = input.char_counter;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <USART2_IRQHandler+0x6c>)
 800115e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001162:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <USART2_IRQHandler+0x6c>)
 8001164:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
		// Reset the counter for the next line
		input.char_counter = 0;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <USART2_IRQHandler+0x6c>)
 800116a:	2200      	movs	r2, #0
 800116c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001170:	e011      	b.n	8001196 <USART2_IRQHandler+0x5a>
		//Gently exit intterupt
	 }
	 else
	 {
		input.command_execute_flag = False;
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <USART2_IRQHandler+0x6c>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		input.line_rx_buffer[input.char_counter] = uart_char;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <USART2_IRQHandler+0x6c>)
 800117c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001180:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <USART2_IRQHandler+0x6c>)
 8001182:	4413      	add	r3, r2
 8001184:	79fa      	ldrb	r2, [r7, #7]
 8001186:	705a      	strb	r2, [r3, #1]
//		container[temp++] = uart_char;
		input.char_counter++;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <USART2_IRQHandler+0x6c>)
 800118a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800118e:	3301      	adds	r3, #1
 8001190:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <USART2_IRQHandler+0x6c>)
 8001192:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	 }
  }


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <USART2_IRQHandler+0x70>)
 8001198:	f002 fe52 	bl	8003e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40004400 	.word	0x40004400
 80011a8:	200001f8 	.word	0x200001f8
 80011ac:	200138f0 	.word	0x200138f0

080011b0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  // if (__HAL_DMA_GET_IT_SOURCE(&hdma_tim1_up, DMA_IT_TC)) // not needed?
  // {
    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <DMA2_Stream5_IRQHandler+0x48>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6a1a      	ldr	r2, [r3, #32]
 80011ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80011be:	4013      	ands	r3, r2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10f      	bne.n	80011e4 <DMA2_Stream5_IRQHandler+0x34>
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <DMA2_Stream5_IRQHandler+0x48>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a1a      	ldr	r2, [r3, #32]
 80011ca:	f240 4344 	movw	r3, #1092	; 0x444
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d107      	bne.n	80011e4 <DMA2_Stream5_IRQHandler+0x34>
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <DMA2_Stream5_IRQHandler+0x48>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <DMA2_Stream5_IRQHandler+0x48>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <DMA2_Stream5_IRQHandler+0x4c>)
 80011e6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80011ea:	619a      	str	r2, [r3, #24]
  // }

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <DMA2_Stream5_IRQHandler+0x50>)
 80011ee:	f000 fd73 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20013810 	.word	0x20013810
 80011fc:	40021000 	.word	0x40021000
 8001200:	20013850 	.word	0x20013850

08001204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <SystemInit+0x28>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120e:	4a07      	ldr	r2, [pc, #28]	; (800122c <SystemInit+0x28>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <SystemInit+0x28>)
 800121a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800121e:	609a      	str	r2, [r3, #8]
#endif
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <MX_TIM1_Init+0x98>)
 800124e:	4a1f      	ldr	r2, [pc, #124]	; (80012cc <MX_TIM1_Init+0x9c>)
 8001250:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_TIM1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_TIM1_Init+0x98>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_TIM1_Init+0x98>)
 8001260:	220b      	movs	r2, #11
 8001262:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_TIM1_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_TIM1_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_TIM1_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001276:	4814      	ldr	r0, [pc, #80]	; (80012c8 <MX_TIM1_Init+0x98>)
 8001278:	f001 fdac 	bl	8002dd4 <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001282:	f7ff fe9b 	bl	8000fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4619      	mov	r1, r3
 8001292:	480d      	ldr	r0, [pc, #52]	; (80012c8 <MX_TIM1_Init+0x98>)
 8001294:	f002 f8a8 	bl	80033e8 <HAL_TIM_ConfigClockSource>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800129e:	f7ff fe8d 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	; (80012c8 <MX_TIM1_Init+0x98>)
 80012b0:	f002 fc94 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80012ba:	f7ff fe7f 	bl	8000fbc <Error_Handler>
  }

}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20013810 	.word	0x20013810
 80012cc:	40010000 	.word	0x40010000

080012d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
 80012ee:	615a      	str	r2, [r3, #20]
 80012f0:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <MX_TIM2_Init+0xcc>)
 80012f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <MX_TIM2_Init+0xcc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <MX_TIM2_Init+0xcc>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <MX_TIM2_Init+0xcc>)
 8001308:	f640 226b 	movw	r2, #2667	; 0xa6b
 800130c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_TIM2_Init+0xcc>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_TIM2_Init+0xcc>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800131a:	4820      	ldr	r0, [pc, #128]	; (800139c <MX_TIM2_Init+0xcc>)
 800131c:	f001 fda9 	bl	8002e72 <HAL_TIM_PWM_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001326:	f7ff fe49 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	4619      	mov	r1, r3
 8001338:	4818      	ldr	r0, [pc, #96]	; (800139c <MX_TIM2_Init+0xcc>)
 800133a:	f002 fc4f 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001344:	f7ff fe3a 	bl	8000fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001348:	2360      	movs	r3, #96	; 0x60
 800134a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 800134c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001350:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001352:	2302      	movs	r3, #2
 8001354:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2208      	movs	r2, #8
 800135e:	4619      	mov	r1, r3
 8001360:	480e      	ldr	r0, [pc, #56]	; (800139c <MX_TIM2_Init+0xcc>)
 8001362:	f001 ff7b 	bl	800325c <HAL_TIM_PWM_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800136c:	f7ff fe26 	bl	8000fbc <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001370:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	220c      	movs	r2, #12
 800137a:	4619      	mov	r1, r3
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_TIM2_Init+0xcc>)
 800137e:	f001 ff6d 	bl	800325c <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001388:	f7ff fe18 	bl	8000fbc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <MX_TIM2_Init+0xcc>)
 800138e:	f000 f87f 	bl	8001490 <HAL_TIM_MspPostInit>

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200138b0 	.word	0x200138b0

080013a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a21      	ldr	r2, [pc, #132]	; (8001434 <HAL_TIM_Base_MspInit+0x94>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d13c      	bne.n	800142c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <HAL_TIM_Base_MspInit+0x98>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <HAL_TIM_Base_MspInit+0x98>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_TIM_Base_MspInit+0x98>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 80013d0:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <HAL_TIM_Base_MspInit+0xa0>)
 80013d2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 80013d6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80013da:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 80013de:	2240      	movs	r2, #64	; 0x40
 80013e0:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 80013ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ee:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 8001404:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001408:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 8001412:	f000 fb39 	bl	8001a88 <HAL_DMA_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 800141c:	f7ff fdce 	bl	8000fbc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 8001424:	621a      	str	r2, [r3, #32]
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <HAL_TIM_Base_MspInit+0x9c>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40010000 	.word	0x40010000
 8001438:	40023800 	.word	0x40023800
 800143c:	20013850 	.word	0x20013850
 8001440:	40026488 	.word	0x40026488

08001444 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001454:	d115      	bne.n	8001482 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_TIM_PWM_MspInit+0x48>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_TIM_PWM_MspInit+0x48>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_TIM_PWM_MspInit+0x48>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	201c      	movs	r0, #28
 8001478:	f000 facf 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800147c:	201c      	movs	r0, #28
 800147e:	f000 fae8 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b0:	d11e      	bne.n	80014f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_TIM_MspPostInit+0x68>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <HAL_TIM_MspPostInit+0x68>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_TIM_MspPostInit+0x68>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 80014ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	4804      	ldr	r0, [pc, #16]	; (80014fc <HAL_TIM_MspPostInit+0x6c>)
 80014ec:	f000 fe5c 	bl	80021a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020400 	.word	0x40020400

08001500 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <MX_USART2_UART_Init+0x50>)
 8001508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001538:	f002 fbe0 	bl	8003cfc <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001542:	f7ff fd3b 	bl	8000fbc <Error_Handler>
  }

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200138f0 	.word	0x200138f0
 8001550:	40004400 	.word	0x40004400

08001554 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <HAL_UART_MspInit+0x94>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d133      	bne.n	80015de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_UART_MspInit+0x98>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <HAL_UART_MspInit+0x98>)
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_UART_MspInit+0x98>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_UART_MspInit+0x98>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <HAL_UART_MspInit+0x98>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_UART_MspInit+0x98>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ae:	230c      	movs	r3, #12
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015be:	2307      	movs	r3, #7
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <HAL_UART_MspInit+0x9c>)
 80015ca:	f000 fded 	bl	80021a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2026      	movs	r0, #38	; 0x26
 80015d4:	f000 fa21 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d8:	2026      	movs	r0, #38	; 0x26
 80015da:	f000 fa3a 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40004400 	.word	0x40004400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015fa:	e003      	b.n	8001604 <LoopCopyDataInit>

080015fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001600:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001602:	3104      	adds	r1, #4

08001604 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001604:	480b      	ldr	r0, [pc, #44]	; (8001634 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001608:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800160a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800160c:	d3f6      	bcc.n	80015fc <CopyDataInit>
  ldr  r2, =_sbss
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001610:	e002      	b.n	8001618 <LoopFillZerobss>

08001612 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001612:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001614:	f842 3b04 	str.w	r3, [r2], #4

08001618 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800161a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800161c:	d3f9      	bcc.n	8001612 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800161e:	f7ff fdf1 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001622:	f003 f9cd 	bl	80049c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff fbf3 	bl	8000e10 <main>
  bx  lr    
 800162a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800162c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001630:	08004d78 	.word	0x08004d78
  ldr  r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001638:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800163c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001640:	20013934 	.word	0x20013934

08001644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC_IRQHandler>
	...

08001648 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <UB_VGA_Screen_Init+0x84>)
 800164e:	2200      	movs	r2, #0
 8001650:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <UB_VGA_Screen_Init+0x84>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <UB_VGA_Screen_Init+0x84>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <UB_VGA_Screen_Init+0x88>)
 8001660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001664:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001666:	481b      	ldr	r0, [pc, #108]	; (80016d4 <UB_VGA_Screen_Init+0x8c>)
 8001668:	f001 fbdf 	bl	8002e2a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800166c:	210c      	movs	r1, #12
 800166e:	4819      	ldr	r0, [pc, #100]	; (80016d4 <UB_VGA_Screen_Init+0x8c>)
 8001670:	f001 fc2a 	bl	8002ec8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001674:	2108      	movs	r1, #8
 8001676:	4817      	ldr	r0, [pc, #92]	; (80016d4 <UB_VGA_Screen_Init+0x8c>)
 8001678:	f001 fc64 	bl	8002f44 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <UB_VGA_Screen_Init+0x90>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <UB_VGA_Screen_Init+0x90>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800168a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <UB_VGA_Screen_Init+0x90>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <UB_VGA_Screen_Init+0x90>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 800169c:	490f      	ldr	r1, [pc, #60]	; (80016dc <UB_VGA_Screen_Init+0x94>)
 800169e:	f240 1341 	movw	r3, #321	; 0x141
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <UB_VGA_Screen_Init+0x98>)
 80016a4:	480f      	ldr	r0, [pc, #60]	; (80016e4 <UB_VGA_Screen_Init+0x9c>)
 80016a6:	f000 fa9d 	bl	8001be4 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80016aa:	480e      	ldr	r0, [pc, #56]	; (80016e4 <UB_VGA_Screen_Init+0x9c>)
 80016ac:	f000 f9ec 	bl	8001a88 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <UB_VGA_Screen_Init+0x9c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <UB_VGA_Screen_Init+0x9c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0210 	orr.w	r2, r2, #16
 80016be:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <UB_VGA_Screen_Init+0xa0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a01      	ldr	r2, [pc, #4]	; (80016cc <UB_VGA_Screen_Init+0x84>)
 80016c6:	6093      	str	r3, [r2, #8]
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000714 	.word	0x20000714
 80016d0:	40020400 	.word	0x40020400
 80016d4:	200138b0 	.word	0x200138b0
 80016d8:	20013810 	.word	0x20013810
 80016dc:	20000720 	.word	0x20000720
 80016e0:	40021015 	.word	0x40021015
 80016e4:	20013850 	.word	0x20013850
 80016e8:	40026488 	.word	0x40026488

080016ec <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80016f6:	2300      	movs	r3, #0
 80016f8:	81bb      	strh	r3, [r7, #12]
 80016fa:	e012      	b.n	8001722 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80016fc:	2300      	movs	r3, #0
 80016fe:	81fb      	strh	r3, [r7, #14]
 8001700:	e008      	b.n	8001714 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001702:	79fa      	ldrb	r2, [r7, #7]
 8001704:	89b9      	ldrh	r1, [r7, #12]
 8001706:	89fb      	ldrh	r3, [r7, #14]
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f811 	bl	8001730 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800170e:	89fb      	ldrh	r3, [r7, #14]
 8001710:	3301      	adds	r3, #1
 8001712:	81fb      	strh	r3, [r7, #14]
 8001714:	89fb      	ldrh	r3, [r7, #14]
 8001716:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800171a:	d3f2      	bcc.n	8001702 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800171c:	89bb      	ldrh	r3, [r7, #12]
 800171e:	3301      	adds	r3, #1
 8001720:	81bb      	strh	r3, [r7, #12]
 8001722:	89bb      	ldrh	r3, [r7, #12]
 8001724:	2bef      	cmp	r3, #239	; 0xef
 8001726:	d9e9      	bls.n	80016fc <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
 800173a:	460b      	mov	r3, r1
 800173c:	80bb      	strh	r3, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001748:	d301      	bcc.n	800174e <UB_VGA_SetPixel+0x1e>
    xp = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	2bef      	cmp	r3, #239	; 0xef
 8001752:	d901      	bls.n	8001758 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001758:	88ba      	ldrh	r2, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	441a      	add	r2, r3
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	4413      	add	r3, r2
 8001768:	4904      	ldr	r1, [pc, #16]	; (800177c <UB_VGA_SetPixel+0x4c>)
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	54ca      	strb	r2, [r1, r3]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000720 	.word	0x20000720

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_Init+0x40>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_Init+0x40>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x40>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f92b 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fc0a 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f943 	bl	8001a6e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f90b 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000000 	.word	0x20000000
 800181c:	20000008 	.word	0x20000008
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	20013930 	.word	0x20013930

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20013930 	.word	0x20013930

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <__NVIC_EnableIRQ+0x38>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f7ff ff8e 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff29 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff3e 	bl	80018ac <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff8e 	bl	8001958 <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff31 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffa2 	bl	80019c0 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff feda 	bl	800184c <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e099      	b.n	8001bd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac4:	e00f      	b.n	8001ae6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac6:	f7ff fec1 	bl	800184c <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	d908      	bls.n	8001ae6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2203      	movs	r2, #3
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e078      	b.n	8001bd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e8      	bne.n	8001ac6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_DMA_Init+0x158>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d107      	bne.n	8001b50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f023 0307 	bic.w	r3, r3, #7
 8001b66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d117      	bne.n	8001baa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00e      	beq.n	8001baa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fa91 	bl	80020b4 <DMA_CheckFifoParam>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2240      	movs	r2, #64	; 0x40
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e016      	b.n	8001bd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fa48 	bl	8002048 <DMA_CalcBaseAndBitshift>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	223f      	movs	r2, #63	; 0x3f
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	f010803f 	.word	0xf010803f

08001be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_DMA_Start_IT+0x26>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e040      	b.n	8001c8c <HAL_DMA_Start_IT+0xa8>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d12f      	bne.n	8001c7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2202      	movs	r2, #2
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f9da 	bl	8001fec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	223f      	movs	r2, #63	; 0x3f
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0216 	orr.w	r2, r2, #22
 8001c52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0208 	orr.w	r2, r2, #8
 8001c6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e005      	b.n	8001c8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c86:	2302      	movs	r3, #2
 8001c88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d004      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00c      	b.n	8001ccc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2205      	movs	r2, #5
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_DMA_IRQHandler+0x258>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a92      	ldr	r2, [pc, #584]	; (8001f34 <HAL_DMA_IRQHandler+0x25c>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0a9b      	lsrs	r3, r3, #10
 8001cf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	2208      	movs	r2, #8
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01a      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0204 	bic.w	r2, r2, #4
 8001d2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2208      	movs	r2, #8
 8001d32:	409a      	lsls	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f043 0201 	orr.w	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2201      	movs	r2, #1
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d012      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	2201      	movs	r2, #1
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f043 0202 	orr.w	r2, r3, #2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2204      	movs	r2, #4
 8001d80:	409a      	lsls	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d012      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	f043 0204 	orr.w	r2, r3, #4
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	2210      	movs	r2, #16
 8001db6:	409a      	lsls	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d043      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d03c      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d018      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d108      	bne.n	8001e08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d024      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
 8001e06:	e01f      	b.n	8001e48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
 8001e18:	e016      	b.n	8001e48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0208 	bic.w	r2, r2, #8
 8001e36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 808e 	beq.w	8001f76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8086 	beq.w	8001f76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	2220      	movs	r2, #32
 8001e70:	409a      	lsls	r2, r3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d136      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0216 	bic.w	r2, r2, #22
 8001e90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <HAL_DMA_IRQHandler+0x1da>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0208 	bic.w	r2, r2, #8
 8001ec0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	223f      	movs	r2, #63	; 0x3f
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d07d      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
        }
        return;
 8001eee:	e078      	b.n	8001fe2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01c      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d108      	bne.n	8001f1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d030      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
 8001f1c:	e02b      	b.n	8001f76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d027      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
 8001f2e:	e022      	b.n	8001f76 <HAL_DMA_IRQHandler+0x29e>
 8001f30:	20000000 	.word	0x20000000
 8001f34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10f      	bne.n	8001f66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0210 	bic.w	r2, r2, #16
 8001f54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d032      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d022      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d307      	bcc.n	8001fbe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f2      	bne.n	8001fa2 <HAL_DMA_IRQHandler+0x2ca>
 8001fbc:	e000      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fbe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	4798      	blx	r3
 8001fe0:	e000      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fe2:	bf00      	nop
    }
  }
}
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop

08001fec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002008:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	d108      	bne.n	800202c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800202a:	e007      	b.n	800203c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	60da      	str	r2, [r3, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	3b10      	subs	r3, #16
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <DMA_CalcBaseAndBitshift+0x64>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002062:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d909      	bls.n	800208a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	659a      	str	r2, [r3, #88]	; 0x58
 8002088:	e007      	b.n	800209a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	aaaaaaab 	.word	0xaaaaaaab
 80020b0:	08004c54 	.word	0x08004c54

080020b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11f      	bne.n	800210e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d855      	bhi.n	8002180 <DMA_CheckFifoParam+0xcc>
 80020d4:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <DMA_CheckFifoParam+0x28>)
 80020d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020da:	bf00      	nop
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020ff 	.word	0x080020ff
 80020e4:	080020ed 	.word	0x080020ed
 80020e8:	08002181 	.word	0x08002181
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d045      	beq.n	8002184 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fc:	e042      	b.n	8002184 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002106:	d13f      	bne.n	8002188 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210c:	e03c      	b.n	8002188 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002116:	d121      	bne.n	800215c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d836      	bhi.n	800218c <DMA_CheckFifoParam+0xd8>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <DMA_CheckFifoParam+0x70>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002135 	.word	0x08002135
 8002128:	0800213b 	.word	0x0800213b
 800212c:	08002135 	.word	0x08002135
 8002130:	0800214d 	.word	0x0800214d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      break;
 8002138:	e02f      	b.n	800219a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d024      	beq.n	8002190 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214a:	e021      	b.n	8002190 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002154:	d11e      	bne.n	8002194 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800215a:	e01b      	b.n	8002194 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d902      	bls.n	8002168 <DMA_CheckFifoParam+0xb4>
 8002162:	2b03      	cmp	r3, #3
 8002164:	d003      	beq.n	800216e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002166:	e018      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      break;
 800216c:	e015      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00e      	beq.n	8002198 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
      break;
 800217e:	e00b      	b.n	8002198 <DMA_CheckFifoParam+0xe4>
      break;
 8002180:	bf00      	nop
 8002182:	e00a      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 8002184:	bf00      	nop
 8002186:	e008      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 8002188:	bf00      	nop
 800218a:	e006      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 800218c:	bf00      	nop
 800218e:	e004      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 8002190:	bf00      	nop
 8002192:	e002      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;   
 8002194:	bf00      	nop
 8002196:	e000      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 8002198:	bf00      	nop
    }
  } 
  
  return status; 
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	e16b      	b.n	800249c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c4:	2201      	movs	r2, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	429a      	cmp	r2, r3
 80021de:	f040 815a 	bne.w	8002496 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d00b      	beq.n	8002202 <HAL_GPIO_Init+0x5a>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d007      	beq.n	8002202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f6:	2b11      	cmp	r3, #17
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b12      	cmp	r3, #18
 8002200:	d130      	bne.n	8002264 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	2203      	movs	r2, #3
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002238:	2201      	movs	r2, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 0201 	and.w	r2, r3, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0xfc>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b12      	cmp	r3, #18
 80022a2:	d123      	bne.n	80022ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	08da      	lsrs	r2, r3, #3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3208      	adds	r2, #8
 80022ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	220f      	movs	r2, #15
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	08da      	lsrs	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3208      	adds	r2, #8
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0203 	and.w	r2, r3, #3
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80b4 	beq.w	8002496 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <HAL_GPIO_Init+0x308>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a5e      	ldr	r2, [pc, #376]	; (80024b0 <HAL_GPIO_Init+0x308>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
 800233e:	4b5c      	ldr	r3, [pc, #368]	; (80024b0 <HAL_GPIO_Init+0x308>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234a:	4a5a      	ldr	r2, [pc, #360]	; (80024b4 <HAL_GPIO_Init+0x30c>)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a51      	ldr	r2, [pc, #324]	; (80024b8 <HAL_GPIO_Init+0x310>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d02b      	beq.n	80023ce <HAL_GPIO_Init+0x226>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a50      	ldr	r2, [pc, #320]	; (80024bc <HAL_GPIO_Init+0x314>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d025      	beq.n	80023ca <HAL_GPIO_Init+0x222>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4f      	ldr	r2, [pc, #316]	; (80024c0 <HAL_GPIO_Init+0x318>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01f      	beq.n	80023c6 <HAL_GPIO_Init+0x21e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4e      	ldr	r2, [pc, #312]	; (80024c4 <HAL_GPIO_Init+0x31c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d019      	beq.n	80023c2 <HAL_GPIO_Init+0x21a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4d      	ldr	r2, [pc, #308]	; (80024c8 <HAL_GPIO_Init+0x320>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0x216>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4c      	ldr	r2, [pc, #304]	; (80024cc <HAL_GPIO_Init+0x324>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00d      	beq.n	80023ba <HAL_GPIO_Init+0x212>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4b      	ldr	r2, [pc, #300]	; (80024d0 <HAL_GPIO_Init+0x328>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <HAL_GPIO_Init+0x20e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4a      	ldr	r2, [pc, #296]	; (80024d4 <HAL_GPIO_Init+0x32c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_GPIO_Init+0x20a>
 80023ae:	2307      	movs	r3, #7
 80023b0:	e00e      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023b2:	2308      	movs	r3, #8
 80023b4:	e00c      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023b6:	2306      	movs	r3, #6
 80023b8:	e00a      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023ba:	2305      	movs	r3, #5
 80023bc:	e008      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023be:	2304      	movs	r3, #4
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023c2:	2303      	movs	r3, #3
 80023c4:	e004      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e002      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023ce:	2300      	movs	r3, #0
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f002 0203 	and.w	r2, r2, #3
 80023d6:	0092      	lsls	r2, r2, #2
 80023d8:	4093      	lsls	r3, r2
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e0:	4934      	ldr	r1, [pc, #208]	; (80024b4 <HAL_GPIO_Init+0x30c>)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ee:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_GPIO_Init+0x330>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002412:	4a31      	ldr	r2, [pc, #196]	; (80024d8 <HAL_GPIO_Init+0x330>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002418:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HAL_GPIO_Init+0x330>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243c:	4a26      	ldr	r2, [pc, #152]	; (80024d8 <HAL_GPIO_Init+0x330>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <HAL_GPIO_Init+0x330>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <HAL_GPIO_Init+0x330>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_GPIO_Init+0x330>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002490:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <HAL_GPIO_Init+0x330>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3301      	adds	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b0f      	cmp	r3, #15
 80024a0:	f67f ae90 	bls.w	80021c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a4:	bf00      	nop
 80024a6:	3724      	adds	r7, #36	; 0x24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40013800 	.word	0x40013800
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40020400 	.word	0x40020400
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020c00 	.word	0x40020c00
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40021400 	.word	0x40021400
 80024d0:	40021800 	.word	0x40021800
 80024d4:	40021c00 	.word	0x40021c00
 80024d8:	40013c00 	.word	0x40013c00

080024dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
 80024e8:	4613      	mov	r3, r2
 80024ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ec:	787b      	ldrb	r3, [r7, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024f8:	e003      	b.n	8002502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024fa:	887b      	ldrh	r3, [r7, #2]
 80024fc:	041a      	lsls	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	619a      	str	r2, [r3, #24]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e25b      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d075      	beq.n	800261a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800252e:	4ba3      	ldr	r3, [pc, #652]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b04      	cmp	r3, #4
 8002538:	d00c      	beq.n	8002554 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253a:	4ba0      	ldr	r3, [pc, #640]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002542:	2b08      	cmp	r3, #8
 8002544:	d112      	bne.n	800256c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002546:	4b9d      	ldr	r3, [pc, #628]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002552:	d10b      	bne.n	800256c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	4b99      	ldr	r3, [pc, #612]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d05b      	beq.n	8002618 <HAL_RCC_OscConfig+0x108>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d157      	bne.n	8002618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e236      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002574:	d106      	bne.n	8002584 <HAL_RCC_OscConfig+0x74>
 8002576:	4b91      	ldr	r3, [pc, #580]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a90      	ldr	r2, [pc, #576]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e01d      	b.n	80025c0 <HAL_RCC_OscConfig+0xb0>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x98>
 800258e:	4b8b      	ldr	r3, [pc, #556]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a8a      	ldr	r2, [pc, #552]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b88      	ldr	r3, [pc, #544]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a87      	ldr	r2, [pc, #540]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xb0>
 80025a8:	4b84      	ldr	r3, [pc, #528]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a83      	ldr	r2, [pc, #524]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b81      	ldr	r3, [pc, #516]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a80      	ldr	r2, [pc, #512]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff f940 	bl	800184c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d0:	f7ff f93c 	bl	800184c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1fb      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0xc0>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7ff f92c 	bl	800184c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f8:	f7ff f928 	bl	800184c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1e7      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	4b6c      	ldr	r3, [pc, #432]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0xe8>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d063      	beq.n	80026ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002632:	4b62      	ldr	r3, [pc, #392]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800263a:	2b08      	cmp	r3, #8
 800263c:	d11c      	bne.n	8002678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263e:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x152>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e1bb      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b56      	ldr	r3, [pc, #344]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4952      	ldr	r1, [pc, #328]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	e03a      	b.n	80026ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <HAL_RCC_OscConfig+0x2b0>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7ff f8e1 	bl	800184c <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268e:	f7ff f8dd 	bl	800184c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e19c      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	4b46      	ldr	r3, [pc, #280]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b43      	ldr	r3, [pc, #268]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4940      	ldr	r1, [pc, #256]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c2:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <HAL_RCC_OscConfig+0x2b0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7ff f8c0 	bl	800184c <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d0:	f7ff f8bc 	bl	800184c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e17b      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	4b36      	ldr	r3, [pc, #216]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d030      	beq.n	800275c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <HAL_RCC_OscConfig+0x2b4>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7ff f8a0 	bl	800184c <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002710:	f7ff f89c 	bl	800184c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e15b      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x200>
 800272e:	e015      	b.n	800275c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCC_OscConfig+0x2b4>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002736:	f7ff f889 	bl	800184c <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273e:	f7ff f885 	bl	800184c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e144      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a0 	beq.w	80028aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_OscConfig+0x2b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d121      	bne.n	80027ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_RCC_OscConfig+0x2b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_RCC_OscConfig+0x2b8>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7ff f84b 	bl	800184c <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e011      	b.n	80027de <HAL_RCC_OscConfig+0x2ce>
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	42470000 	.word	0x42470000
 80027c4:	42470e80 	.word	0x42470e80
 80027c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027cc:	f7ff f83e 	bl	800184c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0fd      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027de:	4b81      	ldr	r3, [pc, #516]	; (80029e4 <HAL_RCC_OscConfig+0x4d4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x2f0>
 80027f2:	4b7d      	ldr	r3, [pc, #500]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a7c      	ldr	r2, [pc, #496]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	e01c      	b.n	800283a <HAL_RCC_OscConfig+0x32a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b05      	cmp	r3, #5
 8002806:	d10c      	bne.n	8002822 <HAL_RCC_OscConfig+0x312>
 8002808:	4b77      	ldr	r3, [pc, #476]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a76      	ldr	r2, [pc, #472]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	4b74      	ldr	r3, [pc, #464]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a73      	ldr	r2, [pc, #460]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
 8002820:	e00b      	b.n	800283a <HAL_RCC_OscConfig+0x32a>
 8002822:	4b71      	ldr	r3, [pc, #452]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a70      	ldr	r2, [pc, #448]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
 800282e:	4b6e      	ldr	r3, [pc, #440]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4a6d      	ldr	r2, [pc, #436]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d015      	beq.n	800286e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002842:	f7ff f803 	bl	800184c <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	e00a      	b.n	8002860 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe ffff 	bl	800184c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	; 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e0bc      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002860:	4b61      	ldr	r3, [pc, #388]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ee      	beq.n	800284a <HAL_RCC_OscConfig+0x33a>
 800286c:	e014      	b.n	8002898 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286e:	f7fe ffed 	bl	800184c <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe ffe9 	bl	800184c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	; 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0a6      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288c:	4b56      	ldr	r3, [pc, #344]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ee      	bne.n	8002876 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d105      	bne.n	80028aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289e:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a51      	ldr	r2, [pc, #324]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 80028a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8092 	beq.w	80029d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028b4:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d05c      	beq.n	800297a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d141      	bne.n	800294c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c8:	4b48      	ldr	r3, [pc, #288]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe ffbd 	bl	800184c <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d6:	f7fe ffb9 	bl	800184c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e078      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e8:	4b3f      	ldr	r3, [pc, #252]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	019b      	lsls	r3, r3, #6
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	4933      	ldr	r1, [pc, #204]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800291e:	4b33      	ldr	r3, [pc, #204]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe ff92 	bl	800184c <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe ff8e 	bl	800184c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e04d      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x41c>
 800294a:	e045      	b.n	80029d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7fe ff7b 	bl	800184c <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe ff77 	bl	800184c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e036      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x44a>
 8002978:	e02e      	b.n	80029d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e029      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002986:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_RCC_OscConfig+0x4d8>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	429a      	cmp	r2, r3
 8002998:	d11c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d115      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029ae:	4013      	ands	r3, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d10d      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d106      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40007000 	.word	0x40007000
 80029e8:	40023800 	.word	0x40023800
 80029ec:	42470060 	.word	0x42470060

080029f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0cc      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b68      	ldr	r3, [pc, #416]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d90c      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0b8      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a44:	4b59      	ldr	r3, [pc, #356]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a52      	ldr	r2, [pc, #328]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b50      	ldr	r3, [pc, #320]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	494d      	ldr	r1, [pc, #308]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d044      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d119      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d003      	beq.n	8002aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e06f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e067      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4b37      	ldr	r3, [pc, #220]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4934      	ldr	r1, [pc, #208]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae0:	f7fe feb4 	bl	800184c <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7fe feb0 	bl	800184c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e04f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d20c      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e032      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4916      	ldr	r1, [pc, #88]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	490e      	ldr	r1, [pc, #56]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b76:	f000 f821 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fe14 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023c00 	.word	0x40023c00
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	08004c3c 	.word	0x08004c3c
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d007      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x32>
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d008      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x38>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 80b4 	bne.w	8002d50 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be8:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bea:	60bb      	str	r3, [r7, #8]
       break;
 8002bec:	e0b3      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bee:	4b5e      	ldr	r3, [pc, #376]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002bf0:	60bb      	str	r3, [r7, #8]
      break;
 8002bf2:	e0b0      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf4:	4b5a      	ldr	r3, [pc, #360]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bfc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bfe:	4b58      	ldr	r3, [pc, #352]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d04a      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0a:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	f04f 0400 	mov.w	r4, #0
 8002c14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	ea03 0501 	and.w	r5, r3, r1
 8002c20:	ea04 0602 	and.w	r6, r4, r2
 8002c24:	4629      	mov	r1, r5
 8002c26:	4632      	mov	r2, r6
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	f04f 0400 	mov.w	r4, #0
 8002c30:	0154      	lsls	r4, r2, #5
 8002c32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c36:	014b      	lsls	r3, r1, #5
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	1b49      	subs	r1, r1, r5
 8002c3e:	eb62 0206 	sbc.w	r2, r2, r6
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	f04f 0400 	mov.w	r4, #0
 8002c4a:	0194      	lsls	r4, r2, #6
 8002c4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c50:	018b      	lsls	r3, r1, #6
 8002c52:	1a5b      	subs	r3, r3, r1
 8002c54:	eb64 0402 	sbc.w	r4, r4, r2
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	00e2      	lsls	r2, r4, #3
 8002c62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c66:	00d9      	lsls	r1, r3, #3
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4614      	mov	r4, r2
 8002c6c:	195b      	adds	r3, r3, r5
 8002c6e:	eb44 0406 	adc.w	r4, r4, r6
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	0262      	lsls	r2, r4, #9
 8002c7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c80:	0259      	lsls	r1, r3, #9
 8002c82:	460b      	mov	r3, r1
 8002c84:	4614      	mov	r4, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	4621      	mov	r1, r4
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f04f 0400 	mov.w	r4, #0
 8002c90:	461a      	mov	r2, r3
 8002c92:	4623      	mov	r3, r4
 8002c94:	f7fd fa98 	bl	80001c8 <__aeabi_uldivmod>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	e049      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca0:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	f04f 0400 	mov.w	r4, #0
 8002caa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	ea03 0501 	and.w	r5, r3, r1
 8002cb6:	ea04 0602 	and.w	r6, r4, r2
 8002cba:	4629      	mov	r1, r5
 8002cbc:	4632      	mov	r2, r6
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	f04f 0400 	mov.w	r4, #0
 8002cc6:	0154      	lsls	r4, r2, #5
 8002cc8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ccc:	014b      	lsls	r3, r1, #5
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	1b49      	subs	r1, r1, r5
 8002cd4:	eb62 0206 	sbc.w	r2, r2, r6
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	f04f 0400 	mov.w	r4, #0
 8002ce0:	0194      	lsls	r4, r2, #6
 8002ce2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ce6:	018b      	lsls	r3, r1, #6
 8002ce8:	1a5b      	subs	r3, r3, r1
 8002cea:	eb64 0402 	sbc.w	r4, r4, r2
 8002cee:	f04f 0100 	mov.w	r1, #0
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	00e2      	lsls	r2, r4, #3
 8002cf8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cfc:	00d9      	lsls	r1, r3, #3
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4614      	mov	r4, r2
 8002d02:	195b      	adds	r3, r3, r5
 8002d04:	eb44 0406 	adc.w	r4, r4, r6
 8002d08:	f04f 0100 	mov.w	r1, #0
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	02a2      	lsls	r2, r4, #10
 8002d12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d16:	0299      	lsls	r1, r3, #10
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4614      	mov	r4, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	4621      	mov	r1, r4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f04f 0400 	mov.w	r4, #0
 8002d26:	461a      	mov	r2, r3
 8002d28:	4623      	mov	r3, r4
 8002d2a:	f7fd fa4d 	bl	80001c8 <__aeabi_uldivmod>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	460c      	mov	r4, r1
 8002d32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	60bb      	str	r3, [r7, #8]
      break;
 8002d4e:	e002      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d52:	60bb      	str	r3, [r7, #8]
      break;
 8002d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d56:	68bb      	ldr	r3, [r7, #8]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	00f42400 	.word	0x00f42400
 8002d68:	007a1200 	.word	0x007a1200

08002d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000000 	.word	0x20000000

08002d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d88:	f7ff fff0 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002d8c:	4601      	mov	r1, r0
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	0a9b      	lsrs	r3, r3, #10
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4a03      	ldr	r2, [pc, #12]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9a:	5cd3      	ldrb	r3, [r2, r3]
 8002d9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40023800 	.word	0x40023800
 8002da8:	08004c4c 	.word	0x08004c4c

08002dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002db0:	f7ff ffdc 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002db4:	4601      	mov	r1, r0
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0b5b      	lsrs	r3, r3, #13
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4a03      	ldr	r2, [pc, #12]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc2:	5cd3      	ldrb	r3, [r2, r3]
 8002dc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	08004c4c 	.word	0x08004c4c

08002dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e01d      	b.n	8002e22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe fad0 	bl	80013a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f000 fbd2 	bl	80035bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b06      	cmp	r3, #6
 8002e4a:	d007      	beq.n	8002e5c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e01d      	b.n	8002ec0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7fe fad3 	bl	8001444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3304      	adds	r3, #4
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f000 fb83 	bl	80035bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	6839      	ldr	r1, [r7, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fe58 	bl	8003b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <HAL_TIM_PWM_Start+0x74>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_TIM_PWM_Start+0x2c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <HAL_TIM_PWM_Start+0x78>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <HAL_TIM_PWM_Start+0x30>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_TIM_PWM_Start+0x32>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b06      	cmp	r3, #6
 8002f1e:	d007      	beq.n	8002f30 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	40010400 	.word	0x40010400

08002f44 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b0c      	cmp	r3, #12
 8002f52:	d841      	bhi.n	8002fd8 <HAL_TIM_PWM_Start_IT+0x94>
 8002f54:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <HAL_TIM_PWM_Start_IT+0x18>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f91 	.word	0x08002f91
 8002f60:	08002fd9 	.word	0x08002fd9
 8002f64:	08002fd9 	.word	0x08002fd9
 8002f68:	08002fd9 	.word	0x08002fd9
 8002f6c:	08002fa3 	.word	0x08002fa3
 8002f70:	08002fd9 	.word	0x08002fd9
 8002f74:	08002fd9 	.word	0x08002fd9
 8002f78:	08002fd9 	.word	0x08002fd9
 8002f7c:	08002fb5 	.word	0x08002fb5
 8002f80:	08002fd9 	.word	0x08002fd9
 8002f84:	08002fd9 	.word	0x08002fd9
 8002f88:	08002fd9 	.word	0x08002fd9
 8002f8c:	08002fc7 	.word	0x08002fc7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0202 	orr.w	r2, r2, #2
 8002f9e:	60da      	str	r2, [r3, #12]
      break;
 8002fa0:	e01b      	b.n	8002fda <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0204 	orr.w	r2, r2, #4
 8002fb0:	60da      	str	r2, [r3, #12]
      break;
 8002fb2:	e012      	b.n	8002fda <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0208 	orr.w	r2, r2, #8
 8002fc2:	60da      	str	r2, [r3, #12]
      break;
 8002fc4:	e009      	b.n	8002fda <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0210 	orr.w	r2, r2, #16
 8002fd4:	60da      	str	r2, [r3, #12]
      break;
 8002fd6:	e000      	b.n	8002fda <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002fd8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fdd4 	bl	8003b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_TIM_PWM_Start_IT+0x100>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_TIM_PWM_Start_IT+0xb8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a14      	ldr	r2, [pc, #80]	; (8003048 <HAL_TIM_PWM_Start_IT+0x104>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_TIM_PWM_Start_IT+0xbc>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_TIM_PWM_Start_IT+0xbe>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b06      	cmp	r3, #6
 8003026:	d007      	beq.n	8003038 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40010000 	.word	0x40010000
 8003048:	40010400 	.word	0x40010400

0800304c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b02      	cmp	r3, #2
 8003060:	d122      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d11b      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0202 	mvn.w	r2, #2
 8003078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fa75 	bl	800357e <HAL_TIM_IC_CaptureCallback>
 8003094:	e005      	b.n	80030a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fa67 	bl	800356a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fa78 	bl	8003592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d122      	bne.n	80030fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d11b      	bne.n	80030fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0204 	mvn.w	r2, #4
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fa4b 	bl	800357e <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa3d 	bl	800356a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fa4e 	bl	8003592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b08      	cmp	r3, #8
 8003108:	d122      	bne.n	8003150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b08      	cmp	r3, #8
 8003116:	d11b      	bne.n	8003150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0208 	mvn.w	r2, #8
 8003120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2204      	movs	r2, #4
 8003126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fa21 	bl	800357e <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fa13 	bl	800356a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fa24 	bl	8003592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b10      	cmp	r3, #16
 800315c:	d122      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b10      	cmp	r3, #16
 800316a:	d11b      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0210 	mvn.w	r2, #16
 8003174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2208      	movs	r2, #8
 800317a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f9f7 	bl	800357e <HAL_TIM_IC_CaptureCallback>
 8003190:	e005      	b.n	800319e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f9e9 	bl	800356a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f9fa 	bl	8003592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10e      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d107      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0201 	mvn.w	r2, #1
 80031c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f9c3 	bl	8003556 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	d10e      	bne.n	80031fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b80      	cmp	r3, #128	; 0x80
 80031ea:	d107      	bne.n	80031fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fd76 	bl	8003ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d10e      	bne.n	8003228 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d107      	bne.n	8003228 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f9bf 	bl	80035a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b20      	cmp	r3, #32
 8003234:	d10e      	bne.n	8003254 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b20      	cmp	r3, #32
 8003242:	d107      	bne.n	8003254 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0220 	mvn.w	r2, #32
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fd40 	bl	8003cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003272:	2302      	movs	r3, #2
 8003274:	e0b4      	b.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	f200 809f 	bhi.w	80033cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800328e:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	080032c9 	.word	0x080032c9
 8003298:	080033cd 	.word	0x080033cd
 800329c:	080033cd 	.word	0x080033cd
 80032a0:	080033cd 	.word	0x080033cd
 80032a4:	08003309 	.word	0x08003309
 80032a8:	080033cd 	.word	0x080033cd
 80032ac:	080033cd 	.word	0x080033cd
 80032b0:	080033cd 	.word	0x080033cd
 80032b4:	0800334b 	.word	0x0800334b
 80032b8:	080033cd 	.word	0x080033cd
 80032bc:	080033cd 	.word	0x080033cd
 80032c0:	080033cd 	.word	0x080033cd
 80032c4:	0800338b 	.word	0x0800338b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fa14 	bl	80036fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0208 	orr.w	r2, r2, #8
 80032e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0204 	bic.w	r2, r2, #4
 80032f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6999      	ldr	r1, [r3, #24]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	619a      	str	r2, [r3, #24]
      break;
 8003306:	e062      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fa64 	bl	80037dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6999      	ldr	r1, [r3, #24]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	021a      	lsls	r2, r3, #8
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	619a      	str	r2, [r3, #24]
      break;
 8003348:	e041      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fab9 	bl	80038c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0208 	orr.w	r2, r2, #8
 8003364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0204 	bic.w	r2, r2, #4
 8003374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69d9      	ldr	r1, [r3, #28]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	61da      	str	r2, [r3, #28]
      break;
 8003388:	e021      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fb0d 	bl	80039b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69d9      	ldr	r1, [r3, #28]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	021a      	lsls	r2, r3, #8
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	61da      	str	r2, [r3, #28]
      break;
 80033ca:	e000      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80033cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIM_ConfigClockSource+0x18>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e0a6      	b.n	800354e <HAL_TIM_ConfigClockSource+0x166>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800341e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003426:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d067      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x120>
 8003438:	2b40      	cmp	r3, #64	; 0x40
 800343a:	d80b      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x6c>
 800343c:	2b10      	cmp	r3, #16
 800343e:	d073      	beq.n	8003528 <HAL_TIM_ConfigClockSource+0x140>
 8003440:	2b10      	cmp	r3, #16
 8003442:	d802      	bhi.n	800344a <HAL_TIM_ConfigClockSource+0x62>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d06f      	beq.n	8003528 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003448:	e078      	b.n	800353c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800344a:	2b20      	cmp	r3, #32
 800344c:	d06c      	beq.n	8003528 <HAL_TIM_ConfigClockSource+0x140>
 800344e:	2b30      	cmp	r3, #48	; 0x30
 8003450:	d06a      	beq.n	8003528 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003452:	e073      	b.n	800353c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003454:	2b70      	cmp	r3, #112	; 0x70
 8003456:	d00d      	beq.n	8003474 <HAL_TIM_ConfigClockSource+0x8c>
 8003458:	2b70      	cmp	r3, #112	; 0x70
 800345a:	d804      	bhi.n	8003466 <HAL_TIM_ConfigClockSource+0x7e>
 800345c:	2b50      	cmp	r3, #80	; 0x50
 800345e:	d033      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0xe0>
 8003460:	2b60      	cmp	r3, #96	; 0x60
 8003462:	d041      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003464:	e06a      	b.n	800353c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346a:	d066      	beq.n	800353a <HAL_TIM_ConfigClockSource+0x152>
 800346c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003470:	d017      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003472:	e063      	b.n	800353c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6899      	ldr	r1, [r3, #8]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f000 fb64 	bl	8003b50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003496:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	609a      	str	r2, [r3, #8]
      break;
 80034a0:	e04c      	b.n	800353c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6899      	ldr	r1, [r3, #8]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f000 fb4d 	bl	8003b50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034c4:	609a      	str	r2, [r3, #8]
      break;
 80034c6:	e039      	b.n	800353c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	461a      	mov	r2, r3
 80034d6:	f000 fac1 	bl	8003a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2150      	movs	r1, #80	; 0x50
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fb1a 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 80034e6:	e029      	b.n	800353c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f000 fae0 	bl	8003aba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2160      	movs	r1, #96	; 0x60
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fb0a 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 8003506:	e019      	b.n	800353c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	461a      	mov	r2, r3
 8003516:	f000 faa1 	bl	8003a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2140      	movs	r1, #64	; 0x40
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fafa 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 8003526:	e009      	b.n	800353c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f000 faf1 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 8003538:	e000      	b.n	800353c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800353a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a40      	ldr	r2, [pc, #256]	; (80036d0 <TIM_Base_SetConfig+0x114>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d013      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035da:	d00f      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a3d      	ldr	r2, [pc, #244]	; (80036d4 <TIM_Base_SetConfig+0x118>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00b      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3c      	ldr	r2, [pc, #240]	; (80036d8 <TIM_Base_SetConfig+0x11c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d007      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3b      	ldr	r2, [pc, #236]	; (80036dc <TIM_Base_SetConfig+0x120>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a3a      	ldr	r2, [pc, #232]	; (80036e0 <TIM_Base_SetConfig+0x124>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d108      	bne.n	800360e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2f      	ldr	r2, [pc, #188]	; (80036d0 <TIM_Base_SetConfig+0x114>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d02b      	beq.n	800366e <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361c:	d027      	beq.n	800366e <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2c      	ldr	r2, [pc, #176]	; (80036d4 <TIM_Base_SetConfig+0x118>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d023      	beq.n	800366e <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2b      	ldr	r2, [pc, #172]	; (80036d8 <TIM_Base_SetConfig+0x11c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01f      	beq.n	800366e <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2a      	ldr	r2, [pc, #168]	; (80036dc <TIM_Base_SetConfig+0x120>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01b      	beq.n	800366e <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <TIM_Base_SetConfig+0x124>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d017      	beq.n	800366e <TIM_Base_SetConfig+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a28      	ldr	r2, [pc, #160]	; (80036e4 <TIM_Base_SetConfig+0x128>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <TIM_Base_SetConfig+0x12c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00f      	beq.n	800366e <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a26      	ldr	r2, [pc, #152]	; (80036ec <TIM_Base_SetConfig+0x130>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00b      	beq.n	800366e <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <TIM_Base_SetConfig+0x134>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d007      	beq.n	800366e <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a24      	ldr	r2, [pc, #144]	; (80036f4 <TIM_Base_SetConfig+0x138>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d003      	beq.n	800366e <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a23      	ldr	r2, [pc, #140]	; (80036f8 <TIM_Base_SetConfig+0x13c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d108      	bne.n	8003680 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a0a      	ldr	r2, [pc, #40]	; (80036d0 <TIM_Base_SetConfig+0x114>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_Base_SetConfig+0xf8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a0c      	ldr	r2, [pc, #48]	; (80036e0 <TIM_Base_SetConfig+0x124>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d103      	bne.n	80036bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	615a      	str	r2, [r3, #20]
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40010000 	.word	0x40010000
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40010400 	.word	0x40010400
 80036e4:	40014000 	.word	0x40014000
 80036e8:	40014400 	.word	0x40014400
 80036ec:	40014800 	.word	0x40014800
 80036f0:	40001800 	.word	0x40001800
 80036f4:	40001c00 	.word	0x40001c00
 80036f8:	40002000 	.word	0x40002000

080036fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f023 0201 	bic.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f023 0302 	bic.w	r3, r3, #2
 8003744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <TIM_OC1_SetConfig+0xd8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_OC1_SetConfig+0x64>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <TIM_OC1_SetConfig+0xdc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10c      	bne.n	800377a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0308 	bic.w	r3, r3, #8
 8003766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 0304 	bic.w	r3, r3, #4
 8003778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <TIM_OC1_SetConfig+0xd8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d003      	beq.n	800378a <TIM_OC1_SetConfig+0x8e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <TIM_OC1_SetConfig+0xdc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d111      	bne.n	80037ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	621a      	str	r2, [r3, #32]
}
 80037c8:	bf00      	nop
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40010400 	.word	0x40010400

080037dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f023 0210 	bic.w	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800380a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0320 	bic.w	r3, r3, #32
 8003826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <TIM_OC2_SetConfig+0xe4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_OC2_SetConfig+0x68>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <TIM_OC2_SetConfig+0xe8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10d      	bne.n	8003860 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800384a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800385e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <TIM_OC2_SetConfig+0xe4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_OC2_SetConfig+0x94>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a16      	ldr	r2, [pc, #88]	; (80038c4 <TIM_OC2_SetConfig+0xe8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d113      	bne.n	8003898 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800387e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40010000 	.word	0x40010000
 80038c4:	40010400 	.word	0x40010400

080038c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0303 	bic.w	r3, r3, #3
 80038fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a21      	ldr	r2, [pc, #132]	; (80039a8 <TIM_OC3_SetConfig+0xe0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_OC3_SetConfig+0x66>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a20      	ldr	r2, [pc, #128]	; (80039ac <TIM_OC3_SetConfig+0xe4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d10d      	bne.n	800394a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <TIM_OC3_SetConfig+0xe0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <TIM_OC3_SetConfig+0x92>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a15      	ldr	r2, [pc, #84]	; (80039ac <TIM_OC3_SetConfig+0xe4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d113      	bne.n	8003982 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40010000 	.word	0x40010000
 80039ac:	40010400 	.word	0x40010400

080039b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	031b      	lsls	r3, r3, #12
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <TIM_OC4_SetConfig+0xa4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_OC4_SetConfig+0x68>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <TIM_OC4_SetConfig+0xa8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d109      	bne.n	8003a2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40010400 	.word	0x40010400

08003a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0201 	bic.w	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 030a 	bic.w	r3, r3, #10
 8003a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b087      	sub	sp, #28
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f023 0210 	bic.w	r2, r3, #16
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	031b      	lsls	r3, r3, #12
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003af6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f043 0307 	orr.w	r3, r3, #7
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	021a      	lsls	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1a      	ldr	r2, [r3, #32]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e05a      	b.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d022      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c40:	d01d      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d018      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1b      	ldr	r2, [pc, #108]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00e      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10c      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40000c00 	.word	0x40000c00
 8003cc8:	40010400 	.word	0x40010400
 8003ccc:	40014000 	.word	0x40014000
 8003cd0:	40001800 	.word	0x40001800

08003cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e03f      	b.n	8003d8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd fc16 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2224      	movs	r2, #36	; 0x24
 8003d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fabd 	bl	80042c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	4613      	mov	r3, r2
 8003da2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d140      	bne.n	8003e32 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Receive_IT+0x26>
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e039      	b.n	8003e34 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Receive_IT+0x38>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e032      	b.n	8003e34 <HAL_UART_Receive_IT+0x9e>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	88fa      	ldrh	r2, [r7, #6]
 8003de6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2222      	movs	r2, #34	; 0x22
 8003df2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0220 	orr.w	r2, r2, #32
 8003e2c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e000      	b.n	8003e34 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_UART_IRQHandler+0x52>
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f996 	bl	80041bc <UART_Receive_IT>
      return;
 8003e90:	e0d1      	b.n	8004036 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80b0 	beq.w	8003ffa <HAL_UART_IRQHandler+0x1ba>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x70>
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 80a5 	beq.w	8003ffa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x90>
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	f043 0201 	orr.w	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_UART_IRQHandler+0xb0>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	f043 0202 	orr.w	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_UART_IRQHandler+0xd0>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	f043 0204 	orr.w	r2, r3, #4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00f      	beq.n	8003f3a <HAL_UART_IRQHandler+0xfa>
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d104      	bne.n	8003f2e <HAL_UART_IRQHandler+0xee>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	f043 0208 	orr.w	r2, r3, #8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d078      	beq.n	8004034 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <HAL_UART_IRQHandler+0x11c>
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f930 	bl	80041bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <HAL_UART_IRQHandler+0x144>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d031      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f879 	bl	800407c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d123      	bne.n	8003fe0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d013      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb4:	4a21      	ldr	r2, [pc, #132]	; (800403c <HAL_UART_IRQHandler+0x1fc>)
 8003fb6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fd fe69 	bl	8001c94 <HAL_DMA_Abort_IT>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d016      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd6:	e00e      	b.n	8003ff6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f845 	bl	8004068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fde:	e00a      	b.n	8003ff6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f841 	bl	8004068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe6:	e006      	b.n	8003ff6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f83d 	bl	8004068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003ff4:	e01e      	b.n	8004034 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff6:	bf00      	nop
    return;
 8003ff8:	e01c      	b.n	8004034 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_UART_IRQHandler+0x1d6>
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f866 	bl	80040e0 <UART_Transmit_IT>
    return;
 8004014:	e00f      	b.n	8004036 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_UART_IRQHandler+0x1f6>
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f8ae 	bl	800418c <UART_EndTransmit_IT>
    return;
 8004030:	bf00      	nop
 8004032:	e000      	b.n	8004036 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004034:	bf00      	nop
  }
}
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	080040b9 	.word	0x080040b9

08004040 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004092:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f7ff ffc8 	bl	8004068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b21      	cmp	r3, #33	; 0x21
 80040f2:	d144      	bne.n	800417e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fc:	d11a      	bne.n	8004134 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004112:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]
 8004126:	e00e      	b.n	8004146 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]
 8004132:	e008      	b.n	8004146 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	1c59      	adds	r1, r3, #1
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6211      	str	r1, [r2, #32]
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29b      	uxth	r3, r3
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4619      	mov	r1, r3
 8004154:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004168:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004178:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff47 	bl	8004040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b22      	cmp	r3, #34	; 0x22
 80041ce:	d171      	bne.n	80042b4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	d123      	bne.n	8004222 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10e      	bne.n	8004206 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	1c9a      	adds	r2, r3, #2
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	; 0x28
 8004204:	e029      	b.n	800425a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	b29b      	uxth	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	; 0x28
 8004220:	e01b      	b.n	800425a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6858      	ldr	r0, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	1c59      	adds	r1, r3, #1
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6291      	str	r1, [r2, #40]	; 0x28
 800423a:	b2c2      	uxtb	r2, r0
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e00c      	b.n	800425a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	1c58      	adds	r0, r3, #1
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	6288      	str	r0, [r1, #40]	; 0x28
 8004252:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29b      	uxth	r3, r3
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4619      	mov	r1, r3
 8004268:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800426a:	2b00      	cmp	r3, #0
 800426c:	d120      	bne.n	80042b0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0220 	bic.w	r2, r2, #32
 800427c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800428c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fed4 	bl	8004054 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	e002      	b.n	80042b6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004302:	f023 030c 	bic.w	r3, r3, #12
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	68f9      	ldr	r1, [r7, #12]
 800430c:	430b      	orrs	r3, r1
 800430e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432e:	f040 818b 	bne.w	8004648 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4ac1      	ldr	r2, [pc, #772]	; (800463c <UART_SetConfig+0x37c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d005      	beq.n	8004348 <UART_SetConfig+0x88>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4abf      	ldr	r2, [pc, #764]	; (8004640 <UART_SetConfig+0x380>)
 8004342:	4293      	cmp	r3, r2
 8004344:	f040 80bd 	bne.w	80044c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004348:	f7fe fd30 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 800434c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	461d      	mov	r5, r3
 8004352:	f04f 0600 	mov.w	r6, #0
 8004356:	46a8      	mov	r8, r5
 8004358:	46b1      	mov	r9, r6
 800435a:	eb18 0308 	adds.w	r3, r8, r8
 800435e:	eb49 0409 	adc.w	r4, r9, r9
 8004362:	4698      	mov	r8, r3
 8004364:	46a1      	mov	r9, r4
 8004366:	eb18 0805 	adds.w	r8, r8, r5
 800436a:	eb49 0906 	adc.w	r9, r9, r6
 800436e:	f04f 0100 	mov.w	r1, #0
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800437a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800437e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004382:	4688      	mov	r8, r1
 8004384:	4691      	mov	r9, r2
 8004386:	eb18 0005 	adds.w	r0, r8, r5
 800438a:	eb49 0106 	adc.w	r1, r9, r6
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	461d      	mov	r5, r3
 8004394:	f04f 0600 	mov.w	r6, #0
 8004398:	196b      	adds	r3, r5, r5
 800439a:	eb46 0406 	adc.w	r4, r6, r6
 800439e:	461a      	mov	r2, r3
 80043a0:	4623      	mov	r3, r4
 80043a2:	f7fb ff11 	bl	80001c8 <__aeabi_uldivmod>
 80043a6:	4603      	mov	r3, r0
 80043a8:	460c      	mov	r4, r1
 80043aa:	461a      	mov	r2, r3
 80043ac:	4ba5      	ldr	r3, [pc, #660]	; (8004644 <UART_SetConfig+0x384>)
 80043ae:	fba3 2302 	umull	r2, r3, r3, r2
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	461d      	mov	r5, r3
 80043bc:	f04f 0600 	mov.w	r6, #0
 80043c0:	46a9      	mov	r9, r5
 80043c2:	46b2      	mov	sl, r6
 80043c4:	eb19 0309 	adds.w	r3, r9, r9
 80043c8:	eb4a 040a 	adc.w	r4, sl, sl
 80043cc:	4699      	mov	r9, r3
 80043ce:	46a2      	mov	sl, r4
 80043d0:	eb19 0905 	adds.w	r9, r9, r5
 80043d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043ec:	4689      	mov	r9, r1
 80043ee:	4692      	mov	sl, r2
 80043f0:	eb19 0005 	adds.w	r0, r9, r5
 80043f4:	eb4a 0106 	adc.w	r1, sl, r6
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	461d      	mov	r5, r3
 80043fe:	f04f 0600 	mov.w	r6, #0
 8004402:	196b      	adds	r3, r5, r5
 8004404:	eb46 0406 	adc.w	r4, r6, r6
 8004408:	461a      	mov	r2, r3
 800440a:	4623      	mov	r3, r4
 800440c:	f7fb fedc 	bl	80001c8 <__aeabi_uldivmod>
 8004410:	4603      	mov	r3, r0
 8004412:	460c      	mov	r4, r1
 8004414:	461a      	mov	r2, r3
 8004416:	4b8b      	ldr	r3, [pc, #556]	; (8004644 <UART_SetConfig+0x384>)
 8004418:	fba3 1302 	umull	r1, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	2164      	movs	r1, #100	; 0x64
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	3332      	adds	r3, #50	; 0x32
 800442a:	4a86      	ldr	r2, [pc, #536]	; (8004644 <UART_SetConfig+0x384>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004438:	4498      	add	r8, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	461d      	mov	r5, r3
 800443e:	f04f 0600 	mov.w	r6, #0
 8004442:	46a9      	mov	r9, r5
 8004444:	46b2      	mov	sl, r6
 8004446:	eb19 0309 	adds.w	r3, r9, r9
 800444a:	eb4a 040a 	adc.w	r4, sl, sl
 800444e:	4699      	mov	r9, r3
 8004450:	46a2      	mov	sl, r4
 8004452:	eb19 0905 	adds.w	r9, r9, r5
 8004456:	eb4a 0a06 	adc.w	sl, sl, r6
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004466:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800446a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800446e:	4689      	mov	r9, r1
 8004470:	4692      	mov	sl, r2
 8004472:	eb19 0005 	adds.w	r0, r9, r5
 8004476:	eb4a 0106 	adc.w	r1, sl, r6
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	461d      	mov	r5, r3
 8004480:	f04f 0600 	mov.w	r6, #0
 8004484:	196b      	adds	r3, r5, r5
 8004486:	eb46 0406 	adc.w	r4, r6, r6
 800448a:	461a      	mov	r2, r3
 800448c:	4623      	mov	r3, r4
 800448e:	f7fb fe9b 	bl	80001c8 <__aeabi_uldivmod>
 8004492:	4603      	mov	r3, r0
 8004494:	460c      	mov	r4, r1
 8004496:	461a      	mov	r2, r3
 8004498:	4b6a      	ldr	r3, [pc, #424]	; (8004644 <UART_SetConfig+0x384>)
 800449a:	fba3 1302 	umull	r1, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2164      	movs	r1, #100	; 0x64
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	3332      	adds	r3, #50	; 0x32
 80044ac:	4a65      	ldr	r2, [pc, #404]	; (8004644 <UART_SetConfig+0x384>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	f003 0207 	and.w	r2, r3, #7
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4442      	add	r2, r8
 80044be:	609a      	str	r2, [r3, #8]
 80044c0:	e26f      	b.n	80049a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044c2:	f7fe fc5f 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 80044c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	461d      	mov	r5, r3
 80044cc:	f04f 0600 	mov.w	r6, #0
 80044d0:	46a8      	mov	r8, r5
 80044d2:	46b1      	mov	r9, r6
 80044d4:	eb18 0308 	adds.w	r3, r8, r8
 80044d8:	eb49 0409 	adc.w	r4, r9, r9
 80044dc:	4698      	mov	r8, r3
 80044de:	46a1      	mov	r9, r4
 80044e0:	eb18 0805 	adds.w	r8, r8, r5
 80044e4:	eb49 0906 	adc.w	r9, r9, r6
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044fc:	4688      	mov	r8, r1
 80044fe:	4691      	mov	r9, r2
 8004500:	eb18 0005 	adds.w	r0, r8, r5
 8004504:	eb49 0106 	adc.w	r1, r9, r6
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	461d      	mov	r5, r3
 800450e:	f04f 0600 	mov.w	r6, #0
 8004512:	196b      	adds	r3, r5, r5
 8004514:	eb46 0406 	adc.w	r4, r6, r6
 8004518:	461a      	mov	r2, r3
 800451a:	4623      	mov	r3, r4
 800451c:	f7fb fe54 	bl	80001c8 <__aeabi_uldivmod>
 8004520:	4603      	mov	r3, r0
 8004522:	460c      	mov	r4, r1
 8004524:	461a      	mov	r2, r3
 8004526:	4b47      	ldr	r3, [pc, #284]	; (8004644 <UART_SetConfig+0x384>)
 8004528:	fba3 2302 	umull	r2, r3, r3, r2
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	461d      	mov	r5, r3
 8004536:	f04f 0600 	mov.w	r6, #0
 800453a:	46a9      	mov	r9, r5
 800453c:	46b2      	mov	sl, r6
 800453e:	eb19 0309 	adds.w	r3, r9, r9
 8004542:	eb4a 040a 	adc.w	r4, sl, sl
 8004546:	4699      	mov	r9, r3
 8004548:	46a2      	mov	sl, r4
 800454a:	eb19 0905 	adds.w	r9, r9, r5
 800454e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004552:	f04f 0100 	mov.w	r1, #0
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800455e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004562:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004566:	4689      	mov	r9, r1
 8004568:	4692      	mov	sl, r2
 800456a:	eb19 0005 	adds.w	r0, r9, r5
 800456e:	eb4a 0106 	adc.w	r1, sl, r6
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	461d      	mov	r5, r3
 8004578:	f04f 0600 	mov.w	r6, #0
 800457c:	196b      	adds	r3, r5, r5
 800457e:	eb46 0406 	adc.w	r4, r6, r6
 8004582:	461a      	mov	r2, r3
 8004584:	4623      	mov	r3, r4
 8004586:	f7fb fe1f 	bl	80001c8 <__aeabi_uldivmod>
 800458a:	4603      	mov	r3, r0
 800458c:	460c      	mov	r4, r1
 800458e:	461a      	mov	r2, r3
 8004590:	4b2c      	ldr	r3, [pc, #176]	; (8004644 <UART_SetConfig+0x384>)
 8004592:	fba3 1302 	umull	r1, r3, r3, r2
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2164      	movs	r1, #100	; 0x64
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	3332      	adds	r3, #50	; 0x32
 80045a4:	4a27      	ldr	r2, [pc, #156]	; (8004644 <UART_SetConfig+0x384>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045b2:	4498      	add	r8, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	461d      	mov	r5, r3
 80045b8:	f04f 0600 	mov.w	r6, #0
 80045bc:	46a9      	mov	r9, r5
 80045be:	46b2      	mov	sl, r6
 80045c0:	eb19 0309 	adds.w	r3, r9, r9
 80045c4:	eb4a 040a 	adc.w	r4, sl, sl
 80045c8:	4699      	mov	r9, r3
 80045ca:	46a2      	mov	sl, r4
 80045cc:	eb19 0905 	adds.w	r9, r9, r5
 80045d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80045d4:	f04f 0100 	mov.w	r1, #0
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045e8:	4689      	mov	r9, r1
 80045ea:	4692      	mov	sl, r2
 80045ec:	eb19 0005 	adds.w	r0, r9, r5
 80045f0:	eb4a 0106 	adc.w	r1, sl, r6
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	461d      	mov	r5, r3
 80045fa:	f04f 0600 	mov.w	r6, #0
 80045fe:	196b      	adds	r3, r5, r5
 8004600:	eb46 0406 	adc.w	r4, r6, r6
 8004604:	461a      	mov	r2, r3
 8004606:	4623      	mov	r3, r4
 8004608:	f7fb fdde 	bl	80001c8 <__aeabi_uldivmod>
 800460c:	4603      	mov	r3, r0
 800460e:	460c      	mov	r4, r1
 8004610:	461a      	mov	r2, r3
 8004612:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <UART_SetConfig+0x384>)
 8004614:	fba3 1302 	umull	r1, r3, r3, r2
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	2164      	movs	r1, #100	; 0x64
 800461c:	fb01 f303 	mul.w	r3, r1, r3
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	3332      	adds	r3, #50	; 0x32
 8004626:	4a07      	ldr	r2, [pc, #28]	; (8004644 <UART_SetConfig+0x384>)
 8004628:	fba2 2303 	umull	r2, r3, r2, r3
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	f003 0207 	and.w	r2, r3, #7
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4442      	add	r2, r8
 8004638:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800463a:	e1b2      	b.n	80049a2 <UART_SetConfig+0x6e2>
 800463c:	40011000 	.word	0x40011000
 8004640:	40011400 	.word	0x40011400
 8004644:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4ad7      	ldr	r2, [pc, #860]	; (80049ac <UART_SetConfig+0x6ec>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d005      	beq.n	800465e <UART_SetConfig+0x39e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4ad6      	ldr	r2, [pc, #856]	; (80049b0 <UART_SetConfig+0x6f0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	f040 80d1 	bne.w	8004800 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800465e:	f7fe fba5 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 8004662:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	469a      	mov	sl, r3
 8004668:	f04f 0b00 	mov.w	fp, #0
 800466c:	46d0      	mov	r8, sl
 800466e:	46d9      	mov	r9, fp
 8004670:	eb18 0308 	adds.w	r3, r8, r8
 8004674:	eb49 0409 	adc.w	r4, r9, r9
 8004678:	4698      	mov	r8, r3
 800467a:	46a1      	mov	r9, r4
 800467c:	eb18 080a 	adds.w	r8, r8, sl
 8004680:	eb49 090b 	adc.w	r9, r9, fp
 8004684:	f04f 0100 	mov.w	r1, #0
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004690:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004694:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004698:	4688      	mov	r8, r1
 800469a:	4691      	mov	r9, r2
 800469c:	eb1a 0508 	adds.w	r5, sl, r8
 80046a0:	eb4b 0609 	adc.w	r6, fp, r9
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4619      	mov	r1, r3
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	f04f 0400 	mov.w	r4, #0
 80046b6:	0094      	lsls	r4, r2, #2
 80046b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046bc:	008b      	lsls	r3, r1, #2
 80046be:	461a      	mov	r2, r3
 80046c0:	4623      	mov	r3, r4
 80046c2:	4628      	mov	r0, r5
 80046c4:	4631      	mov	r1, r6
 80046c6:	f7fb fd7f 	bl	80001c8 <__aeabi_uldivmod>
 80046ca:	4603      	mov	r3, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	461a      	mov	r2, r3
 80046d0:	4bb8      	ldr	r3, [pc, #736]	; (80049b4 <UART_SetConfig+0x6f4>)
 80046d2:	fba3 2302 	umull	r2, r3, r3, r2
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	469b      	mov	fp, r3
 80046e0:	f04f 0c00 	mov.w	ip, #0
 80046e4:	46d9      	mov	r9, fp
 80046e6:	46e2      	mov	sl, ip
 80046e8:	eb19 0309 	adds.w	r3, r9, r9
 80046ec:	eb4a 040a 	adc.w	r4, sl, sl
 80046f0:	4699      	mov	r9, r3
 80046f2:	46a2      	mov	sl, r4
 80046f4:	eb19 090b 	adds.w	r9, r9, fp
 80046f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046fc:	f04f 0100 	mov.w	r1, #0
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004708:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800470c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004710:	4689      	mov	r9, r1
 8004712:	4692      	mov	sl, r2
 8004714:	eb1b 0509 	adds.w	r5, fp, r9
 8004718:	eb4c 060a 	adc.w	r6, ip, sl
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4619      	mov	r1, r3
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	f04f 0400 	mov.w	r4, #0
 800472e:	0094      	lsls	r4, r2, #2
 8004730:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004734:	008b      	lsls	r3, r1, #2
 8004736:	461a      	mov	r2, r3
 8004738:	4623      	mov	r3, r4
 800473a:	4628      	mov	r0, r5
 800473c:	4631      	mov	r1, r6
 800473e:	f7fb fd43 	bl	80001c8 <__aeabi_uldivmod>
 8004742:	4603      	mov	r3, r0
 8004744:	460c      	mov	r4, r1
 8004746:	461a      	mov	r2, r3
 8004748:	4b9a      	ldr	r3, [pc, #616]	; (80049b4 <UART_SetConfig+0x6f4>)
 800474a:	fba3 1302 	umull	r1, r3, r3, r2
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	2164      	movs	r1, #100	; 0x64
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	3332      	adds	r3, #50	; 0x32
 800475c:	4a95      	ldr	r2, [pc, #596]	; (80049b4 <UART_SetConfig+0x6f4>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004768:	4498      	add	r8, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	469b      	mov	fp, r3
 800476e:	f04f 0c00 	mov.w	ip, #0
 8004772:	46d9      	mov	r9, fp
 8004774:	46e2      	mov	sl, ip
 8004776:	eb19 0309 	adds.w	r3, r9, r9
 800477a:	eb4a 040a 	adc.w	r4, sl, sl
 800477e:	4699      	mov	r9, r3
 8004780:	46a2      	mov	sl, r4
 8004782:	eb19 090b 	adds.w	r9, r9, fp
 8004786:	eb4a 0a0c 	adc.w	sl, sl, ip
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004796:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800479a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800479e:	4689      	mov	r9, r1
 80047a0:	4692      	mov	sl, r2
 80047a2:	eb1b 0509 	adds.w	r5, fp, r9
 80047a6:	eb4c 060a 	adc.w	r6, ip, sl
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	4619      	mov	r1, r3
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	f04f 0400 	mov.w	r4, #0
 80047bc:	0094      	lsls	r4, r2, #2
 80047be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047c2:	008b      	lsls	r3, r1, #2
 80047c4:	461a      	mov	r2, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	4628      	mov	r0, r5
 80047ca:	4631      	mov	r1, r6
 80047cc:	f7fb fcfc 	bl	80001c8 <__aeabi_uldivmod>
 80047d0:	4603      	mov	r3, r0
 80047d2:	460c      	mov	r4, r1
 80047d4:	461a      	mov	r2, r3
 80047d6:	4b77      	ldr	r3, [pc, #476]	; (80049b4 <UART_SetConfig+0x6f4>)
 80047d8:	fba3 1302 	umull	r1, r3, r3, r2
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	2164      	movs	r1, #100	; 0x64
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	3332      	adds	r3, #50	; 0x32
 80047ea:	4a72      	ldr	r2, [pc, #456]	; (80049b4 <UART_SetConfig+0x6f4>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	f003 020f 	and.w	r2, r3, #15
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4442      	add	r2, r8
 80047fc:	609a      	str	r2, [r3, #8]
 80047fe:	e0d0      	b.n	80049a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004800:	f7fe fac0 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 8004804:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	469a      	mov	sl, r3
 800480a:	f04f 0b00 	mov.w	fp, #0
 800480e:	46d0      	mov	r8, sl
 8004810:	46d9      	mov	r9, fp
 8004812:	eb18 0308 	adds.w	r3, r8, r8
 8004816:	eb49 0409 	adc.w	r4, r9, r9
 800481a:	4698      	mov	r8, r3
 800481c:	46a1      	mov	r9, r4
 800481e:	eb18 080a 	adds.w	r8, r8, sl
 8004822:	eb49 090b 	adc.w	r9, r9, fp
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004832:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004836:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800483a:	4688      	mov	r8, r1
 800483c:	4691      	mov	r9, r2
 800483e:	eb1a 0508 	adds.w	r5, sl, r8
 8004842:	eb4b 0609 	adc.w	r6, fp, r9
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4619      	mov	r1, r3
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	f04f 0400 	mov.w	r4, #0
 8004858:	0094      	lsls	r4, r2, #2
 800485a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800485e:	008b      	lsls	r3, r1, #2
 8004860:	461a      	mov	r2, r3
 8004862:	4623      	mov	r3, r4
 8004864:	4628      	mov	r0, r5
 8004866:	4631      	mov	r1, r6
 8004868:	f7fb fcae 	bl	80001c8 <__aeabi_uldivmod>
 800486c:	4603      	mov	r3, r0
 800486e:	460c      	mov	r4, r1
 8004870:	461a      	mov	r2, r3
 8004872:	4b50      	ldr	r3, [pc, #320]	; (80049b4 <UART_SetConfig+0x6f4>)
 8004874:	fba3 2302 	umull	r2, r3, r3, r2
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	469b      	mov	fp, r3
 8004882:	f04f 0c00 	mov.w	ip, #0
 8004886:	46d9      	mov	r9, fp
 8004888:	46e2      	mov	sl, ip
 800488a:	eb19 0309 	adds.w	r3, r9, r9
 800488e:	eb4a 040a 	adc.w	r4, sl, sl
 8004892:	4699      	mov	r9, r3
 8004894:	46a2      	mov	sl, r4
 8004896:	eb19 090b 	adds.w	r9, r9, fp
 800489a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800489e:	f04f 0100 	mov.w	r1, #0
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048b2:	4689      	mov	r9, r1
 80048b4:	4692      	mov	sl, r2
 80048b6:	eb1b 0509 	adds.w	r5, fp, r9
 80048ba:	eb4c 060a 	adc.w	r6, ip, sl
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4619      	mov	r1, r3
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	f04f 0400 	mov.w	r4, #0
 80048d0:	0094      	lsls	r4, r2, #2
 80048d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048d6:	008b      	lsls	r3, r1, #2
 80048d8:	461a      	mov	r2, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	4628      	mov	r0, r5
 80048de:	4631      	mov	r1, r6
 80048e0:	f7fb fc72 	bl	80001c8 <__aeabi_uldivmod>
 80048e4:	4603      	mov	r3, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	461a      	mov	r2, r3
 80048ea:	4b32      	ldr	r3, [pc, #200]	; (80049b4 <UART_SetConfig+0x6f4>)
 80048ec:	fba3 1302 	umull	r1, r3, r3, r2
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	2164      	movs	r1, #100	; 0x64
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	3332      	adds	r3, #50	; 0x32
 80048fe:	4a2d      	ldr	r2, [pc, #180]	; (80049b4 <UART_SetConfig+0x6f4>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800490a:	4498      	add	r8, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	469b      	mov	fp, r3
 8004910:	f04f 0c00 	mov.w	ip, #0
 8004914:	46d9      	mov	r9, fp
 8004916:	46e2      	mov	sl, ip
 8004918:	eb19 0309 	adds.w	r3, r9, r9
 800491c:	eb4a 040a 	adc.w	r4, sl, sl
 8004920:	4699      	mov	r9, r3
 8004922:	46a2      	mov	sl, r4
 8004924:	eb19 090b 	adds.w	r9, r9, fp
 8004928:	eb4a 0a0c 	adc.w	sl, sl, ip
 800492c:	f04f 0100 	mov.w	r1, #0
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004938:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800493c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004940:	4689      	mov	r9, r1
 8004942:	4692      	mov	sl, r2
 8004944:	eb1b 0509 	adds.w	r5, fp, r9
 8004948:	eb4c 060a 	adc.w	r6, ip, sl
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4619      	mov	r1, r3
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	f04f 0400 	mov.w	r4, #0
 800495e:	0094      	lsls	r4, r2, #2
 8004960:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004964:	008b      	lsls	r3, r1, #2
 8004966:	461a      	mov	r2, r3
 8004968:	4623      	mov	r3, r4
 800496a:	4628      	mov	r0, r5
 800496c:	4631      	mov	r1, r6
 800496e:	f7fb fc2b 	bl	80001c8 <__aeabi_uldivmod>
 8004972:	4603      	mov	r3, r0
 8004974:	460c      	mov	r4, r1
 8004976:	461a      	mov	r2, r3
 8004978:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <UART_SetConfig+0x6f4>)
 800497a:	fba3 1302 	umull	r1, r3, r3, r2
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2164      	movs	r1, #100	; 0x64
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	3332      	adds	r3, #50	; 0x32
 800498c:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <UART_SetConfig+0x6f4>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	f003 020f 	and.w	r2, r3, #15
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4442      	add	r2, r8
 800499e:	609a      	str	r2, [r3, #8]
}
 80049a0:	e7ff      	b.n	80049a2 <UART_SetConfig+0x6e2>
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ac:	40011000 	.word	0x40011000
 80049b0:	40011400 	.word	0x40011400
 80049b4:	51eb851f 	.word	0x51eb851f

080049b8 <atoi>:
 80049b8:	220a      	movs	r2, #10
 80049ba:	2100      	movs	r1, #0
 80049bc:	f000 b8a8 	b.w	8004b10 <strtol>

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4e0d      	ldr	r6, [pc, #52]	; (80049f8 <__libc_init_array+0x38>)
 80049c4:	4c0d      	ldr	r4, [pc, #52]	; (80049fc <__libc_init_array+0x3c>)
 80049c6:	1ba4      	subs	r4, r4, r6
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	2500      	movs	r5, #0
 80049cc:	42a5      	cmp	r5, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	4e0b      	ldr	r6, [pc, #44]	; (8004a00 <__libc_init_array+0x40>)
 80049d2:	4c0c      	ldr	r4, [pc, #48]	; (8004a04 <__libc_init_array+0x44>)
 80049d4:	f000 f8d4 	bl	8004b80 <_init>
 80049d8:	1ba4      	subs	r4, r4, r6
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	2500      	movs	r5, #0
 80049de:	42a5      	cmp	r5, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049e8:	4798      	blx	r3
 80049ea:	3501      	adds	r5, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049f2:	4798      	blx	r3
 80049f4:	3501      	adds	r5, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	08004d70 	.word	0x08004d70
 80049fc:	08004d70 	.word	0x08004d70
 8004a00:	08004d70 	.word	0x08004d70
 8004a04:	08004d74 	.word	0x08004d74

08004a08 <memset>:
 8004a08:	4402      	add	r2, r0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <_strtol_l.isra.0>:
 8004a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	4680      	mov	r8, r0
 8004a1e:	4689      	mov	r9, r1
 8004a20:	4692      	mov	sl, r2
 8004a22:	461e      	mov	r6, r3
 8004a24:	460f      	mov	r7, r1
 8004a26:	463d      	mov	r5, r7
 8004a28:	9808      	ldr	r0, [sp, #32]
 8004a2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a2e:	f000 f885 	bl	8004b3c <__locale_ctype_ptr_l>
 8004a32:	4420      	add	r0, r4
 8004a34:	7843      	ldrb	r3, [r0, #1]
 8004a36:	f013 0308 	ands.w	r3, r3, #8
 8004a3a:	d132      	bne.n	8004aa2 <_strtol_l.isra.0+0x8a>
 8004a3c:	2c2d      	cmp	r4, #45	; 0x2d
 8004a3e:	d132      	bne.n	8004aa6 <_strtol_l.isra.0+0x8e>
 8004a40:	787c      	ldrb	r4, [r7, #1]
 8004a42:	1cbd      	adds	r5, r7, #2
 8004a44:	2201      	movs	r2, #1
 8004a46:	2e00      	cmp	r6, #0
 8004a48:	d05d      	beq.n	8004b06 <_strtol_l.isra.0+0xee>
 8004a4a:	2e10      	cmp	r6, #16
 8004a4c:	d109      	bne.n	8004a62 <_strtol_l.isra.0+0x4a>
 8004a4e:	2c30      	cmp	r4, #48	; 0x30
 8004a50:	d107      	bne.n	8004a62 <_strtol_l.isra.0+0x4a>
 8004a52:	782b      	ldrb	r3, [r5, #0]
 8004a54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004a58:	2b58      	cmp	r3, #88	; 0x58
 8004a5a:	d14f      	bne.n	8004afc <_strtol_l.isra.0+0xe4>
 8004a5c:	786c      	ldrb	r4, [r5, #1]
 8004a5e:	2610      	movs	r6, #16
 8004a60:	3502      	adds	r5, #2
 8004a62:	2a00      	cmp	r2, #0
 8004a64:	bf14      	ite	ne
 8004a66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004a6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004a6e:	2700      	movs	r7, #0
 8004a70:	fbb1 fcf6 	udiv	ip, r1, r6
 8004a74:	4638      	mov	r0, r7
 8004a76:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004a7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004a7e:	2b09      	cmp	r3, #9
 8004a80:	d817      	bhi.n	8004ab2 <_strtol_l.isra.0+0x9a>
 8004a82:	461c      	mov	r4, r3
 8004a84:	42a6      	cmp	r6, r4
 8004a86:	dd23      	ble.n	8004ad0 <_strtol_l.isra.0+0xb8>
 8004a88:	1c7b      	adds	r3, r7, #1
 8004a8a:	d007      	beq.n	8004a9c <_strtol_l.isra.0+0x84>
 8004a8c:	4584      	cmp	ip, r0
 8004a8e:	d31c      	bcc.n	8004aca <_strtol_l.isra.0+0xb2>
 8004a90:	d101      	bne.n	8004a96 <_strtol_l.isra.0+0x7e>
 8004a92:	45a6      	cmp	lr, r4
 8004a94:	db19      	blt.n	8004aca <_strtol_l.isra.0+0xb2>
 8004a96:	fb00 4006 	mla	r0, r0, r6, r4
 8004a9a:	2701      	movs	r7, #1
 8004a9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004aa0:	e7eb      	b.n	8004a7a <_strtol_l.isra.0+0x62>
 8004aa2:	462f      	mov	r7, r5
 8004aa4:	e7bf      	b.n	8004a26 <_strtol_l.isra.0+0xe>
 8004aa6:	2c2b      	cmp	r4, #43	; 0x2b
 8004aa8:	bf04      	itt	eq
 8004aaa:	1cbd      	addeq	r5, r7, #2
 8004aac:	787c      	ldrbeq	r4, [r7, #1]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	e7c9      	b.n	8004a46 <_strtol_l.isra.0+0x2e>
 8004ab2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004ab6:	2b19      	cmp	r3, #25
 8004ab8:	d801      	bhi.n	8004abe <_strtol_l.isra.0+0xa6>
 8004aba:	3c37      	subs	r4, #55	; 0x37
 8004abc:	e7e2      	b.n	8004a84 <_strtol_l.isra.0+0x6c>
 8004abe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004ac2:	2b19      	cmp	r3, #25
 8004ac4:	d804      	bhi.n	8004ad0 <_strtol_l.isra.0+0xb8>
 8004ac6:	3c57      	subs	r4, #87	; 0x57
 8004ac8:	e7dc      	b.n	8004a84 <_strtol_l.isra.0+0x6c>
 8004aca:	f04f 37ff 	mov.w	r7, #4294967295
 8004ace:	e7e5      	b.n	8004a9c <_strtol_l.isra.0+0x84>
 8004ad0:	1c7b      	adds	r3, r7, #1
 8004ad2:	d108      	bne.n	8004ae6 <_strtol_l.isra.0+0xce>
 8004ad4:	2322      	movs	r3, #34	; 0x22
 8004ad6:	f8c8 3000 	str.w	r3, [r8]
 8004ada:	4608      	mov	r0, r1
 8004adc:	f1ba 0f00 	cmp.w	sl, #0
 8004ae0:	d107      	bne.n	8004af2 <_strtol_l.isra.0+0xda>
 8004ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae6:	b102      	cbz	r2, 8004aea <_strtol_l.isra.0+0xd2>
 8004ae8:	4240      	negs	r0, r0
 8004aea:	f1ba 0f00 	cmp.w	sl, #0
 8004aee:	d0f8      	beq.n	8004ae2 <_strtol_l.isra.0+0xca>
 8004af0:	b10f      	cbz	r7, 8004af6 <_strtol_l.isra.0+0xde>
 8004af2:	f105 39ff 	add.w	r9, r5, #4294967295
 8004af6:	f8ca 9000 	str.w	r9, [sl]
 8004afa:	e7f2      	b.n	8004ae2 <_strtol_l.isra.0+0xca>
 8004afc:	2430      	movs	r4, #48	; 0x30
 8004afe:	2e00      	cmp	r6, #0
 8004b00:	d1af      	bne.n	8004a62 <_strtol_l.isra.0+0x4a>
 8004b02:	2608      	movs	r6, #8
 8004b04:	e7ad      	b.n	8004a62 <_strtol_l.isra.0+0x4a>
 8004b06:	2c30      	cmp	r4, #48	; 0x30
 8004b08:	d0a3      	beq.n	8004a52 <_strtol_l.isra.0+0x3a>
 8004b0a:	260a      	movs	r6, #10
 8004b0c:	e7a9      	b.n	8004a62 <_strtol_l.isra.0+0x4a>
	...

08004b10 <strtol>:
 8004b10:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <strtol+0x24>)
 8004b12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b14:	681c      	ldr	r4, [r3, #0]
 8004b16:	4d08      	ldr	r5, [pc, #32]	; (8004b38 <strtol+0x28>)
 8004b18:	6a23      	ldr	r3, [r4, #32]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf08      	it	eq
 8004b1e:	462b      	moveq	r3, r5
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	4613      	mov	r3, r2
 8004b24:	460a      	mov	r2, r1
 8004b26:	4601      	mov	r1, r0
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f7ff ff75 	bl	8004a18 <_strtol_l.isra.0>
 8004b2e:	b003      	add	sp, #12
 8004b30:	bd30      	pop	{r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	2000000c 	.word	0x2000000c
 8004b38:	20000070 	.word	0x20000070

08004b3c <__locale_ctype_ptr_l>:
 8004b3c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004b40:	4770      	bx	lr

08004b42 <__ascii_mbtowc>:
 8004b42:	b082      	sub	sp, #8
 8004b44:	b901      	cbnz	r1, 8004b48 <__ascii_mbtowc+0x6>
 8004b46:	a901      	add	r1, sp, #4
 8004b48:	b142      	cbz	r2, 8004b5c <__ascii_mbtowc+0x1a>
 8004b4a:	b14b      	cbz	r3, 8004b60 <__ascii_mbtowc+0x1e>
 8004b4c:	7813      	ldrb	r3, [r2, #0]
 8004b4e:	600b      	str	r3, [r1, #0]
 8004b50:	7812      	ldrb	r2, [r2, #0]
 8004b52:	1c10      	adds	r0, r2, #0
 8004b54:	bf18      	it	ne
 8004b56:	2001      	movne	r0, #1
 8004b58:	b002      	add	sp, #8
 8004b5a:	4770      	bx	lr
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	e7fb      	b.n	8004b58 <__ascii_mbtowc+0x16>
 8004b60:	f06f 0001 	mvn.w	r0, #1
 8004b64:	e7f8      	b.n	8004b58 <__ascii_mbtowc+0x16>

08004b66 <__ascii_wctomb>:
 8004b66:	b149      	cbz	r1, 8004b7c <__ascii_wctomb+0x16>
 8004b68:	2aff      	cmp	r2, #255	; 0xff
 8004b6a:	bf85      	ittet	hi
 8004b6c:	238a      	movhi	r3, #138	; 0x8a
 8004b6e:	6003      	strhi	r3, [r0, #0]
 8004b70:	700a      	strbls	r2, [r1, #0]
 8004b72:	f04f 30ff 	movhi.w	r0, #4294967295
 8004b76:	bf98      	it	ls
 8004b78:	2001      	movls	r0, #1
 8004b7a:	4770      	bx	lr
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4770      	bx	lr

08004b80 <_init>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr

08004b8c <_fini>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr
